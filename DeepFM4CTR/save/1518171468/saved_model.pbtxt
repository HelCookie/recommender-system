saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddN"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "sum"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "ApplyAdam"
        input_arg {
          name: "var"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "m"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "v"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        output_arg {
          name: "out"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "AssignAdd"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatOffset"
        input_arg {
          name: "concat_dim"
          type: DT_INT32
        }
        input_arg {
          name: "shape"
          type: DT_INT32
          number_attr: "N"
        }
        output_arg {
          name: "offset"
          type: DT_INT32
          number_attr: "N"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "FloorDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Greater"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "HistogramSummary"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_FLOAT
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "LogicalAnd"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        input_arg {
          name: "y"
          type: DT_BOOL
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        is_commutative: true
      }
      op {
        name: "LogicalNot"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "MergeSummary"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomStandardNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Rank"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "ScalarSummary"
        input_arg {
          name: "tags"
          type: DT_STRING
        }
        input_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShapeN"
        input_arg {
          name: "input"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
          number_attr: "N"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Sigmoid"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "SigmoidGrad"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Slice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "size"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Square"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Transpose"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "perm"
          type_attr: "Tperm"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tperm"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "1.2.1"
    tensorflow_git_version: "b\'unknown\'"
  }
  graph_def {
    node {
      name: "input"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "Placeholder"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "fm/random_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "fm/random_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/random_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "fm/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "fm/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1518171483
        }
      }
      attr {
        key: "seed2"
        value {
          i: 5
        }
      }
    }
    node {
      name: "fm/random_normal/mul"
      op: "Mul"
      input: "fm/random_normal/RandomStandardNormal"
      input: "fm/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/random_normal"
      op: "Add"
      input: "fm/random_normal/mul"
      input: "fm/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Assign"
      op: "Assign"
      input: "fm/feature_embeddings"
      input: "fm/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_embeddings/read"
      op: "Identity"
      input: "fm/feature_embeddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\377\377\377\377\t\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "fm/Reshape"
      op: "Reshape"
      input: "input"
      input: "fm/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Mul"
      op: "Mul"
      input: "fm/feature_embeddings/read"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/max"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "fm/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1518171483
        }
      }
      attr {
        key: "seed2"
        value {
          i: 17
        }
      }
    }
    node {
      name: "fm/random_uniform/sub"
      op: "Sub"
      input: "fm/random_uniform/max"
      input: "fm/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/mul"
      op: "Mul"
      input: "fm/random_uniform/RandomUniform"
      input: "fm/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/random_uniform"
      op: "Add"
      input: "fm/random_uniform/mul"
      input: "fm/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Assign"
      op: "Assign"
      input: "fm/feature_bias_0"
      input: "fm/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_bias_0/read"
      op: "Identity"
      input: "fm/feature_bias_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Mul_1"
      op: "Mul"
      input: "fm/feature_bias_0/read"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "fm/Sum"
      op: "Sum"
      input: "fm/Mul_1"
      input: "fm/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "fm/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "fm/Sum_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "fm/Sum_1"
      op: "Sum"
      input: "fm/Mul"
      input: "fm/Sum_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "fm/Square"
      op: "Square"
      input: "fm/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Square_1"
      op: "Square"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Sum_2/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "fm/Sum_2"
      op: "Sum"
      input: "fm/Square_1"
      input: "fm/Sum_2/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "fm/Sub"
      op: "Sub"
      input: "fm/Square"
      input: "fm/Sum_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/mul/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node {
      name: "fm/mul"
      op: "Mul"
      input: "fm/mul/x"
      input: "fm/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/dropout_1/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deep/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377Z\000\000\000"
          }
        }
      }
    }
    node {
      name: "deep/Reshape"
      op: "Reshape"
      input: "fm/Mul"
      input: "deep/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
            tensor_content: "\376`d=\277\3553>o\255\306\275\333_\005\276(\033t=\225\017\260=\344\325o\275\016\355l\276\345\313\231\275\315\211\255<L\211\206=N\311\003>\274\035\007\276\226y\264<v\337\321\275\334\312{\275\0002\216\275\203\'x:\035f\234\275p\336s;|.\214\275\202\273d\276i\374\220=\274\230\"=^<Z\275\337\227\327=\017\006\n\274\024\354\231\275\220\340\250=\n=`=\024\370\007=\030%\343\275\257\006\002=\340I\\\274n\337U=\260\036\242=\273\263\206=S\220\020>\221N}\275\217B\316<8\300\213;:\301\251<\330\3358\273\037\371l\275\331<>\275\215p\"\275O\023\216=\346.*=\257\243\275\2730\274\275=\360U\226;\220\330\366=\355\237\253=|\322\360\272;\272\034>\255\233\266\274\255\242\251=:\237\263\274\361\310\034>\276,\005\275uG\201=%\n\304=S\272(<\300\361F=}\021\203\275\323\320\251\274\200+z\276A\207\320\275\304[\024=\320\333\312\275E\371\204<Q$\022=eM\233=\344\307\010>\267,\223\275\010LV<\204\315\316\274n\024\303=[\334\000=\332\363:\275g\000:\275\330\276)>\306y\277=\345\2655\274cw\024>GE5\275\253\260D\275\267Y\210=\370[\251=\254\307\231=\223\023\323=\371N\322\275/D\006\275`y\246=\006\237\246=\261\'y>\227\341\345\273\345\210\207=H^\242<\370\016\033\276\257=\005=e\335m<\320\214\177=\r\321\260\275\030\027\027\276@\032\323<\3713\236=\333G\334\274\227\023\255\274.\344t=kE\267\275q\342\231\275`\016\026\276Wh\213\274<\200|=\376\370w<\317\3704;.\205@\275d\033\317\274T\277\017\275\254s\373\274\317(\021\273\226iD=\036_\301\274\3463t=\274\371\205\275\344\316\217=\034i\204\273\022\030\\\274\374\337E\273f\213 \274\360n\352\275X\3613>\023\275y\275p>%\275\205\325\206<\321\253=\276\246\211\027\275\304\255\'>\273\345b\275\314\237;\276?\301\272;e\033\357=\242\207\323\273\220\243\n;\272W\317\273Y\330\t<\352\016F>F\031.\275\221\361\032>et\n\275\336\255!>%\372A=\252\273\371<\r\324\013>\236~[\275\271\377R\275\374\217\315\275\033&\312<IdE>y\321\025\276,v\261=\253\030\360\275Q\364\266=\036\2216>\1773\356\2757\345\010\276_\253\270=\2202c=\260\245\271=R\235\302<\344\234\005\276V\200\245<M\023\310=Q\035\337=\2513a=)\243h\275\206\331\343\274hQ\325\274\362pN=J\370\244\275w\003\374\275\253\372a\273O\301\023=oc\260\275 \364\216\275\242M\024\276\375\223J<\272\2256><\310-=\316\200\'\275\311 M\274\361\210\300=Z\326\220\275\264\247X>Y\346\333\275\016<\240=\243\222l<\2430\016=\316\342\277\275\313\324\200\276\2106\003=\250\r(<O\267\223=\210at\273\342u\004>U^<=`\366\006>\364\250\252=\n\207\261=\213\254\341;9Q\n\276\250\004|=)4\260=\270\361\010\275\371\310\213=\3507\016>3a\324=\010\037\377\275`\331\024>\025\376/\276/\343\003\274\375\265\307=0\316j\275Q\014\331<3\330\035\275]\001\262=f\202\266\275\302\032\372\275\216%~\275L\376I=J\250^\275\366\252k\275\250Mn\275O\357\204\275\260\017\260\275\325G\036>\3024\213\275\223\243\027>\3705\267<\311\270\275=}p\267\274\364\262\033=q\224O\275\272b@\275\362\177\203=\321\2272\274\240\343\325\275\342!\233<\204_\021>\271\347O=N\257\311=\371\255\301<9 \203\275\226\202\013\276\305G\357\273wq\323=\374e\364=>\027\375=.\330\336<}\223\377<%\275\210=0\216\225<\271c\307;\257D\022\275\t\316%>0\217\220\275\266Z>\2761\313=\275\006\360\235\275\324\r\232=GW\306\274\265\007*<\354+=\275A\227:\2766\005\036\276\033\324\213=\034\022\261<P$\233=AS\030\276\266\207\371\275e\205\211\274j\3229\275\236i\213=\3655\014\276\315\361#>\332r]\275\033?\312;<\224E< \247[<\245\252\314=\002\344\013=\362x\213\274\327?b>J\354\226= h\210\275].\325\274\200\270\022\2766!\031=\213x\232\2758\225\241\275\271U;:\210\024n\275e\267\257\275\300\350=;\312-8>\001\211\223=\201\234\234\275\006\260,\275\237\217\211\2757\246\034\276\220\002\006>\223\303\307\275G\260\300\274\301\2303\276It\233\275\360\031\016=\263\203\332\274~\232y\275\222o\341\273O\240\276=\242\255==\035\300\304<\236\323\277\275f\342L=\355\205M<\"\024\224=\371\n\250\275j\211\177=\322\376#>\274\272\320\274\3173L=mb\010=\307\367\316;Rs\322\275\323\376M\275\000 \364=\261\266\370=Hd\255\275\263Kb\275\244/\275\275\213D\377\275P\242\350\275w\335\005< \033f\274\023\204\355:\244\261\201\274 \352\016>\236\3534=\360\021\346=\305X\004\275\243\001;\275\254\036\216\274J\252\017\275\177\031\213\275e\253Q>\343\226\242=z\217\344=\322<|=\352\002\326\275\242\307b=\374I\t\276\261\001\006\275\227\364\313<\263\207\000\275\313\265$\276\3350\003=\351IK=8\345\";tM\024\276\"\272\020\276\020K\013\275\221\266\206=\214i\023\275\305\021 >*\036\324;\322\245\'<\274\372\236=\272d\005=\374\346-\2766T\225:$\014\000\276\221\022\313=\306p\022=\3565\276\274\240\306\343\275\240\026M\274\037\330\303=\\B\313\275RJX\276\347\252\316;l\020$=S3Y\274\263\325\372\275\351\310\030=\365\340l\273D\302/=\1777\027\275<E\374\271\303\025P\276\340\347\372\275uY#<\032\246\350<\r\216\371\274\002\254\322\275\252-\014>\016\251\233<\322-\233=0J\016\2748\363\346\275m\305\327<Y}\264\275\373\312.=f\366\265=\275\363q>Y^\310\275\325%\003>G4\271<e\005\030\276\006{J>N\030m\275G\027\"<\376&C\275]\350\210\274\374\314\020\275Nw\226=\370\333Y\275\2248\255\274\316\270\241\275\306\207*<rrT<\366\340\201<\227\033\235<A\3029\276\315\206f\275\264\216\340\274\247B\316=.J\253;B\257\270\274\033\370t:0c]>\202W\306=#.\231=W%G\275\376y\005=\r\230\r>\346\277\217=R\270\n>\031\001\324\275\370\303+\275\254\305\264\272Y\305[\276f\320\327\274 \325\201=\024\252l\275\370\0317=I\262\222\275\017Y2\275\226\351Z\275\262e\325\274+\351\036\276/R\n\2737\027Y=}\"\271=\356H\036>\366\330\036=\022i\251\275\2362\326\275\277\317\372\274\272\210\001\276\000&\020\2733[P\275\371\020e>\347\317\312=[A\267\275u\013\364=\210\317\317=\330D\307=8R\340=\030\363\022>\242\254\334<9\335u>\363\205\213\274\303eh\275\226X\024\275\201\250P=J3:>\321^\275=\366,\235=\333+\223=8q\270\275\276Q\303<*\336?\276=\261q=\377\nu=\006\260t=\326\365\224\275\021T\003\276\223z\302\2752S^\276\231bi=\221\010\000>!sF\276\033^\005=\030B\263<\3706\"\276\323\311\220;X\315\356\275d\031?=\005&\242\275\006h\260\275\234\314\373<\333\366|<\353\037\361\275[b\037\276\005jp\275\244\217\021\276\364K\242\275\322D\244\275\254\037\"\276\010\200j=\272\217\026=0\252\316\274Cw\215\275\271l\300;eh\207\275sV\253\275?\265\033>\357%\302<+h*\275Zd\233;q\244\273\275\302\032\210\2759_E\275\305\374\307\275\360\031H\274VDP={.\022\274\026\314\341\275*\327\243\275\255\001\000\276\036\272]<\304bE\275\t[$\275\271g\\\276\035\317\246\274\252\366S>D\366{=\365g\367=\221r\224\2741|5\276\347\021\032\276p\201\237\2741\200\':\337\"\005>\225k\274=\021\031\"=\354\317\227;\305\001U\276\323\277\357\275\006Hi:\037\245\350<y)]=QZ\377\275\035K\363\272Z\023\276=\315\361W=\246\227~=D&P=\255 x>\336\341\013>k\n;\276\213\315\226\274{\276o\275s\301\227\275\216\235\215\275\354|\\\275\014\324\202=\277lT=\252\271\036>\243\026\220\275\336\020\352=\306_\004\275\023Y+\276\226\204\032\276\210\271\213\275\010G\021=\336WO\275\002\273\r>\333\243\010=\003\253\307=\346T\346=\252\020!\276R\365T=N\003S=\353\216\263\275\316\212\302=$Z\017>\223|.=\214\003\302\274\274\237\201\275o\222\017>\253Z\254<\345\262\021\276\253*\311=\352N\024\275g\217\266<?\366C\275\003m\307\275Q\302E\276>\232\345=\273A\264\274PZ\230=P\3707\273+\027o\276\272\325a\275\211\204\311=\325\036\211\274T\017\311\275}V\025;\224\204Y\276\331\346$>\326V\037\274\201r\010<\233c0\275%\n\373\275^e6=\257\236\271\275$\230\223<H\003\374=mx\t\276\325\254\337;\376\232S\276g\304\236=\177\2356\276\334\353&<%yo<4!\242\275@\352\241\275\243\267\221=\203\237\227;j\274`=$\274x\275\344Ql\275\360_R=p\377N=\276\274\036\276\201\313C\274\336R1>x\316\204=\2032\205=\262cj\275\254\316\227=\342\033\334\275\026\334\321;\277\2513\275Y\001/>\227/\326\275\357iS\275\363W\202\275\036Ak\276\306\036\361=JH\223=\207(\'=R\241\277\274\235\372A={_\005\275i\022\216=(\270\364<|\237L=\341\340\363=\231\336\272\275\265\341\252\275ga\231\275\357=>=\205!\267<+\233p<>\2718\276c/\255\275\2411\260\275\354\324%\274\017\003\232\275\213\004\302=C`\346\2757a\252<N\271g\275\321\357\320\275\005\260\311\274\320\271\016\276\031\244\036\274A\351\227\273T\316\334=b}P=\230\334\312\275\267y\223=\200\243\307\275\304\357\221\273\036\311\235=\373YH\275\267\230\005\276\207\033\371=O\361\361\275\367\276^\275\327\350\231\275\307\221\214\273\313\337\230\275b)s<\361\2636>\226\322A<6\340~\274<{K=9\216\373\275\326\352\n>\372\263Z=\334a\020\275\240\311\004<XK\215=\003\220S=x\373\230=\251b\021\276^\323^<\375\002\260\274|$\215\275f\316\362\275g\024\025\276g\005\007\275\232\221\205>\030\2112<\026\022\243=\342^\020>\322\307\037\275\327\246\003\273J\310\256;+\034R=\255\016u\275B7\347\275\301i1\275\204z`\276n\376Y=\005\201\000<\223b\001\276\30225\275\'\240-\276\013\004\361\272\373\366N=\177\215\253=\363\002\312\275\001\336\361\275\230BA\276\203\351=<F\337\300=\361\365\354\275H\'\221<\237\215\257=\256\036\014>\022\000:\276\347=\202<\365\020\2079\376\020\004>\202W\016>\366\241\322:\234\025\352<\351D\267\273\364\341\227=Y\237O>y\243\266\273@Y\250\275\344<\211=\230g@\275\240~\014\275\234\016\270=\214\354v\272{\000\206\275\013\240\265\275\323\246\251\274\235\240\277\274-\226\363=\262\262\264< \217\277=}\355\300=\243B\031\275\361\362\240=\231\353\223\274\270W4\274\267\"N\274\034L\217\274G\310\216=\244\032\t>\022~\245=\023\345q\275\006I\262=\227aq\276\'\021\005\276]\270\241=>\312.\274\032\277\202\275D\223\202=\2607H>\r\213f=\200\237\301\275\270\370\321=h\344\374\275\217Gr>?Y\233=\003\215\304<4\265\002=\004&\274\275$Aq\274\262:\007=\322\353\006\276\013[\307<\232\267\313\275\347\2170>Ai\260\2747F\026>\317\252A=\215A;\273\233\356\302\275\315\334\030;\333`\252=K!\253=\233\223\204=\377\303\016>\3036\375\274\000\262\200\274t\316\223\274\277\t\245\275\321\315\202\2753\3360\274x\371\274\275o\214\270<\263px\274<\363\230\275\307\330I=Y$\327\274\317\212\016\2768Jv<\\\010\275\274\216\245;>\205?\000=\3419\006>\360\320\177\275\t\233\\\275\327Dt<\336\251\353=\375\221}<\240\246\200=\032&\002<\357:\237\275\023T\t\276]P\356\275\214\327\317=c\323\276=\231\377:<\370\325\200=\325\234\303=B3A=\007\244\263\274\316\017\321\272K\222\204\275\2447/>\226\276\222\275\330\324\225=\010\200\025\275\303E\347<(\261w\276YN\035=j\227\306=\221\360\221=?k\006>\220\255#\275\360\261\022\275ue,\2766.\212\275\351\330]<!\301\271\275\265Pe\275%\272\216\275\220+\324\273\245&\227<\243\366\001\274-\327\252=\220\262\202=\007\026{\275\211\334Q=s\373,=\264l<\274\177\246V\275p\276\374\274\263\235\\;O\242%\276\264]\004\275\226W\004\275\\|>=\237\333\035<S\013\023\276\264\214r\275\257T\334\275\355\237\310\275\315R^\275\235\361b=\307\016\321=t\315\312;xj\177\275\201\347\002>\022\331\371\275\3016Y\275\031D\354\275\357\240\346\272\260o\370=n\325:>\225\251\251\275\215\366\036>\n\314\316=N\2306\274\330Rb\2750\250\311=\3547C>\235\210\311\275\034z\312=\275*F>pw}\275A\347\r\275nj3>\346\010[\274>\343\026>\330\'-=\037c\357<\335\306Q>,^.\275\321\342\017=7\010\203\2757\323\270<FB\273=\237)3<]N\324\275V\357\263\275\035\314M\273\265\037\226\275#\371o\274\311\212\210=\327\322A<)\366\031=D&\302\275.\314\007>\256j\215=\335\022\270\275E2\300\274\230\017g\273\210]\024>PO\234=\217^\210=\374i\272=\255\224z=,Gh>\202\3412\276\265\233\341\275\266;\373=\036\026\\\274\021\261\256=\223\227\261=\341\362\265\2756h\\\276\277p\032=\340\340\374=\3706\246=%\010\026=\322\313^>2,=\276\"w\254=\034>\t>\003\017\214\274_M\324\275C\221_=\363\2507=[?\030\274\031S\266\275\177Q\237=o\t\016=\311j\246\275\236v3\273fNZ:\036;H=T\263\311\275+\0076\275\372\305\\\275\322\325q\275\334\013,\276[\351\302<\325?\225=y8\213=\347D\010\276\177;\026\276AP\n\274\205\252\301\275\330vc=\3021\370\275\022K\000\276\215V\244<\272\323\342\275}q\241\275\266B\323<\230\362M<\017yt=\263R\234;6\334l\275y\264p<s9\\=\201r\321=\356D:\275^|\332\274C\204\204=9\240\307=\2154\271=M\014\313\275u\032\227\275\n\262\016\273\010\025I=N\373\216>\221\310\023=S\240\004\275\245w\366=`\242\020\276\016\300$\275#\266O=\004\240\257=\330\242\207=)\370\240<\246W4\275\301\316\367\275<\232\353=\320|&\276, \324=$\274\241\275d\000\373\275\370k\240=\261\350\214\273\324q\242\275\360\221\014>\365\026\013>h\345\n\2760w\260=\r\241U=u~d=\303\025\246<F\216\304\275\n\314\004\275{fT\275:\201\260\275\355~h\276\323WF=;\221n<\246h_=\014\214\032<\361\304k\276H+\323<\260a\373<7\321\360=B<\262=\264\252\246\275\240\363\202\276\234>8\275\2406\017>\231\313\024\274\032\272\317\275J\242\222=h\210\323\275\256^\025=\320\371\206=#\324b\275\304\364\313=\361\200\253=\025\271\007>\211\211_\276\354\266\367\275\342L\241=\374-\276=\031\371K=$\265\370\275\023\331\236\274\344\315\206\2745M^<\211\376<>s\373\357;\340f\013<z\310h\275\020\274\232\274eA\242=\3661\357\274\267\372\027\276\301\342)=\310\2237\275,\361\206\275\364?\324=[\254g=\037?\303=\250F<>\242t\363;\345\037\301\275/%\375\275u=\262\275\364\331\352\275\201)\024\274=T\002<}9H\275\023Ii=\001\311\253\274\236S$>\242E\355<\307\010$\276\267\271\022\275\277}\354\275\233j\301=5\314d=\347]%\275\272\205\033\274\276\001n\275\227\343\024>\200N\016\2767\304\323\275\313S\304\275\2417\004\275\316\272\004\275b|\227\275\2463\361<\027\35509sX\033\276\036\323v\275.\177S\275lp\211=\217ZR\275\002]\223\275\246\251\362<V\244\310=\340\232\321=+?\200=\276W\313\275MU}=\r\014\237=u\2624=J\373\273\275\217\034\223\275\264\307\323\275\033,*\276V\224\231\273h=I\276&\256\211=\337\037&\276\n\346 =Q\271\370\275Z\031\231\275\006/\r\2758FF\275W)\236=\250\212\205=L\213A<\330_\210=\242\023\375\2732\270\270\275Wl\270=\273[?>\016\352\356\275E\313\216\274\221\335\217\275k\347\267\272Y\212\322\275\345\"\225=\275\342=<,K\217\274\025\260\013\27665J\274\027\317M\275\243\367\270<:\324b;\375\367\375=\363\273\004\275]\271I\276\244\355\211=\326Q,>R\320s>j\020*\276\014zy\274\337\214\224\275.\224\177\275&\314\333;\223\225\242\272=\007\016\276\374rH=\234\237\241\275\2674\234\275\304\356\271\275\327r\017\275\037\023\266=\371\215\230\275\335\n\243\275-\2053\276\266\016\300<Z\226l=(\n\035=4/\032\275\017g\364\271\232\375\225\275\n\243V\275\034~\342=\322\243\002=M\352\305\2751\214\234\275\257\241\373\274S\322\324<\224\276\237\273\'\361\310<2?\212\275\320mE=c>C=8\206\300=\311\355r=\337\022\034>\252\017\207<\026\237]=\237\203\246=\177t\311\275\014\363\333=\3312\242\275\033#\004\2756\352\343<\266\021\033<&\360\260\275\346\2670>\267\201\302=*z\317=\031\036\004>\362\271\030<\346f\264\274\301k\272;G\315\250=O\302~=\344l\351\274\276\206\275\2756n\327=y/\355=\032\273;\276\2651\374\274y\252\222=\272\276R\275c\311\307\275\314\372\006=\244\210\224<86\340\275\343\357z\275\002\274\347\275\005\2715\276l\327\007;|\274n\275[\226\n>\336\272\235<q5O\273\370\351\263=\221\261\003\276\340\300\263=\310\345-<\217\217L=\036YY\274\317\000\270=t}\252=\240\246K\275\033\306:<w(T>#\351\311=\246\274\220\275W\023\034=<&e=-+\030=\263\224\037\276\361\001q;o\354\217;X\204H\276F;\372<\354\377\206\274#\377\311=\0171J=\334\344\323:\364E\177\276\367\300\004=d\334.\275\323\343D=\014L\305\275|\036<>\016\300\271;.y\324=\225}y=\344: \275\232\276(>v\2675\275\244\317\312\271*S\026\276\027\2056\275@\371\231\275\003\351D\276M\252\221=\312)K;T\360\223=M \037=\035\376\376=\r\374B\272\261\030/\276!\334\233=Lif=8\224\355\274t7\201=\224\254\325;\2160\200=\207\330\370\275@\300\356\274\207\312d<\317D};\234ok>+\362/>w\243V;\236E\352\275\212]\251\275\006s\336<\330N\200=\032\350\241>\013\204\322=\'\220&=\327\217\356<\034<\254=`\200\004>\321\324\014\275\255_j=\367W\230=z\353\314\275aT(>\267\321\236;\030\332\210\273d\334\350\275q9\255\275\016\210\305=c\021\270<,\000\353<\020\'\353\275CYf\27615\334\275\343\236\t\275\245\353\2778\235\215}\274\245\376L=j\210@\275\005<\216=r/:=w\374 \276[\221\276=V\320\265\274}{n=\005g]=\266\344\270\273\337P\336=\275\322\n=\337\204\330<\016mX\275\331\230\211=S#\311\275\245\"\353<\373S:>\262<\002\276p\235\331\275\340z*=a\343e=\255\017\240\275\261\016\032=\313U\327\275p\326\034=\365\226\304\274\353\241B=\320\230\345\275\347Z\373=\373&\271<\267\264\005>\302\036\266<\216\2649=\300\326\027\276\371\234\221\275\206(\312<\227\322\'>\203\220\214;/q\327\275\237\004\302\272c\260\357=\022\362\305\274ont\274\264\257\313<\331\315\034\275\014\362\013=G|-=K\001t=9oa=-\014\036<\'\"\020>\007]\374\273\302qC=>\241;\276\234\273b\276\362i\013=\ns#\274\230K(\275\212\347\235<\021\214\235=r\\\254<v\374!\275\353\022\320\275\357!7\276~\007\017;\274\020\220<\265\246\030<\005\240\220\273\252\032Y\276Y\0346\275*\201\025\275:2?=6r\267\275\314H\262\275\202\245`=\257\245r\275\025\222\227\275\304\351\260=\236v\314\275\024\006V\275l\2220=Yr\331<\236\200\232<\243R\340<\366\273_\273-\373\221\275O\217\214\275al\277\275y\'\277=\266\256\330=\212`:<\033>@\275\006n\t=Ve\213\274\242\005$\276\231=\251=\260/\365\275\013\363\177=\346\320!\276\323\204\203=\351\005\224\275\261T\034\275i_\325=sNV;S\023\215\275\342\234\265\275\246)n\274\002\024\306=\344\263\003\275\016\334\002\273\312\265\377<\320\225\327\275\311\362\215=J\211E=\230\215T=k\331\307<=\320\345=\007\306-<M\314.=us\352<\364\273\336\275f\"8\2769^\221=\255)\001\276x\321\032>\311\332\"\275\243Q\t\275\242\364\365\275\267\316\206=9`\244=\326\252\257\274#\n2\276\025\350\252=7\317\331<\200\213\246\272\317(:\276\232\220[\275\236\201\036\276Y\021\030\276\256D\n<\317\311^\276@\005\320=%9E\276\231\006\262=\323\344\311\274{w\201=\244\240\203>\034\243\362<\360i\242>\2239M\275\356+\352=\377\033v=\343U\365<\tty<!L\032=K\034\217\276\240ut\275\235.(=0\016\201=\322\326\034\275\241\306T\274\307\323\247\275\333=\252\274s,\362\2729\214\201\275\320\215\310=\001\321\320\275\373\315\376<\340>k\2753\342;>^%d=/+\032\275\372\325E=\363\265+=h\250\300\273\246>\000\276\215\325\217\275\271zO\2756\265\273\275:\361\224;\254\267\246=CO\230=\254l\211\275\000q\274\275\303\274\324\273\265\220\275=\253\020G\272\360\020!\2739%\356\275w\321 >\250\274\256\274m\224\367\274\225i\264=\006\r\354=w:\205>\036N@\275R\215\353=\221x\234\275\345:\005>\016\245\255\275\350Y\315;\301\315\353\275\177\206\301=\275c\033>\316\001\013\275\240}\200\274\233-\343\2755\321\034=@\221x\275\337\353\210=\\\370\013\276w\334y=\230\220\242\275Q\217X\276\215\324\014\273U\003\271\275\300\352\302<\343\235!\274h\260M=,\303-\276U\021\203=\010S,\275.\2502\276m@\233=\343\0171>\327\316>\275ef\313=\310m\250=Q\t\361\273\253\322&\275\357\331\217\275\314\356\374\274K\315\027<\"K\272=l\006\257\275\323=\353<5\266\336\274(6\010=\2417\021>\316\036D<r\247\212\274S7\025>\274Y\206\275mM\n=\237\372\251\2753\373\203=\233\350\255=\227\347\240=\304\024==\366o\313\275\370>X>\267\362\361\272\320\341!=\217\350\023\274\026\020\317\275<\203\222=\370uX<\244\300\304=3\020\r=a\\a\275\004*\227\275\006\257m\275 \272\273=\347b\271\275\334\023C>\237O:>e\037\275<\261\343\374\275\006\333Z=\202sL\275qZ\224\275R\010\367<N1Y=\027g*\275Z\364^\275\270s\372=Hu\257\274\367K\231\275\361\276\233=\270[g\275\302\376\213=#Z\206\275;@\341\274\013\\\222\275\351\342\216\274\025\332o=\254\274\024=\277\330#=\022\n\272\274\321\211\215\2764\341\027\276vd\350=\nat=U\272\t>\244\323\005=\r\317b\274\250\033\237\275\032}\276=_V\252=\302\265O\274\376+\260\275FJ$<\364\221\033=\356\324\262=\005\201\022=uK\035\276\360D\246=\377T\236=\363\331z=t\251\021=flf=w\204\033\276\342\315\221=\310F\033=\3145M\275\342\216f\275\212\\\261=\353`Q<J\231\237\275?I\023=\241\027\224=e\253\207=_\004\315\275+\300\270\274\301\325y=\263\256\276\275U\210j<\325]\266\275\334\365\265>\345\3548>i\323K=^g\361\275}V\177=\363\310p\275\334>[\275\376\367\031\275\\{\312\275\304I\200<M\032\254\274\225\223Z\275\351\250\277\275\270?\272\273dYk=o(\242=\252\235\240\275\372-L>\321\267\270\275\251\334[\275\017E\206=\217\274\314=\317\233\354=m\222[<6M\327=Rh\301=^\023\336<\227yZ\275&_\020=H\"e=Y\306n=X\322\022=k\316;\275\360N\377<.%#>\244\213\226\275{\307\343\274H\027~=|\247\345\274[[\244\275U\220\264\2751i\010>\374\004.=\257\252\376\275\322\342\376=\036\037\325<\200P\257=\314K9=-\241U>)9\366\275u\347\004\275OB\016>RO\352\275r1\004>\263\351\350\275T\373H\2762b\323\274`\312\273\275\253\263\034=r\262\220\273c\314\013>\321w\240=Tdp=\232\330\305=\363\271<\275\377y\020\275h\036\205\275@\213\332=iSu=\357\023\010<\033:)\275\013x><\353\262\336\2749Gz\275\370\331t\275.\261\255=\305\275\246\275u$\367\274Q\265\022>\310\210.>\315\"\313\275\337\020\017\276N\260\022>\244~\344\274\217\231\373\275\353l\275;Z\351\243<\347f\343=%?\224\275|\025\230\275X\000\307\275\237G\267\274\001\031\001>[0z<\231\370C=\200\262X=\267\377\211=\020W\240\272 \257\271\275\177\341\361\274\302\312\354\275\356\355\365\275I\267\024\275\001\220^\275Lj\300\2746P->\"VV>\375\262\365\275\370\244\356=\252\341\241=![\333=\000K\246;\210\010\312<\266\305W<\236\274\324<[t\035=\006\370\236=\022=I\275\327\001\352\275\201b\340\275\037f\273\274\314\257\345\275\221O\306<\345\036\340<\261\327\322\273\213\317=\276\241\271\233\275n\372\376\275\204\213\336=\250\\\366<)\303e\275\206dY=K\361\023\275\351\025\272\275\347\006o==_ >\205\367\330\273\266\030\256=.mu\275u\t\305=\320\322\207==\362\254\275\0265\200\275\364rJ<k\n\244\274\266\200\307=U\"\316\275\024\362\245\275\272\255\314\274v\201\226<\306o\371<\277<7\275\327\226\307=\303\025\376=8\342\231<\276Nr\274!\222o\275\240=\232\273\022\301\207\2752J6;\004\274\236\275\203@\375\275Q\232>>K\222\263;Z\026\013\276\020\211\020=\376p\200=\327\270P=\231\244\310\275\325\321\357\275\'5\007=\324\242T\275\300\362M\275\345\331`=)\256\n\275\333\250\217\274\250\374\024\276\005\016\034>N\330e\275\270\0013=26\304\275\207M\306\275$x\212\274\024\030\250<5-\341\275S\340n:\000\254\376=\206v\316\275\367\032;=\225\276\252=\333W\305\275p\243W=|y\010\276\340\010\210=\314\3057<e\210\027=\356\005\337\275\035\306\n<G\0003>oT\232\275\333\177J\276W\211K>9\371\361\275\364\'\001><\007\245\274+\361\252\2743\0260\275\200\n\241\275\002\371\315=\034\307)>\0108\372<4\247\331<07g=C+\275\275i\356\222\276\330\037\002\275;\335\034=o\3368\275^0M\273\036\301\202\275d7D\276\320\347^\2754\220\231\275\033\303S=\353\310\302\275\261\360\340\275\205\373\223\275n\rl\275E\332\022>\277\332\235=m\244I>\202\366\232<\320\223\302;\355\247\004\276p:\226:q%\253=N\264\237=\035\312\252=?\023\020\2768\263(=;\357\036=\356?\216\274\201\306\034=\277\026\374\2744\231\023=\201$\277\275}d\032\275\014\347a\275\000J\353\275O\334\265=;\337\263\275\334\314\227\275\210@\306<\250f}=qy\213\275(|A=q\335n>\312HD>_\014\236=\031\201,>,#\301\274\360\275\226;\336\033\203\275\266\317r=\214\323\026\276s\013\032>\005\323,\275k\363\235\275i\331\027=\251\241\341\275vVO\276\324t\200\276/\207\217\275\017\250\277\275\323R\001\274=\232\325=EM\235\275\301\354\204<b\235H=*\276\031\275vx\310\275N\276\370\275V\373\300<\215\302\241=\336\302\002\275\036\357\312=v\007\365\275\006g\357<+\370z=uS{\273\226\370\226;@\026z\276\205\213\215\275\224\307\227\274S\007D\276\353\263 \274K|\347\275\017\223\321\275\256U\214\273\203\301\321<\351\251Y\274|l8\275\\o8=\335\263d\274\250A\002<\026\305\017\276\n\332 \275[T\250<H\177\014>\332v\342;\344P`\275\267\2125>\023\241\"<\214P_<\234g\241=\271u\214\275yH\343\274\307\235!\275\036^==\034\226\315\275\362\315\232<\276\320\234=B\t\276\275PZ\274\273\316\261\337=i\014@\275\001`\270=O\264n;\206\264%>>_&\275\002\273\257\275|h\200\274\2043\243=\260)\223=y`\237\275\010\002\023>\244\336_\275Y\245[\275\314\2240>\007\220\260<[+\304=\316O\241<\230Y\350=\260\316\242\275\221\267\341<\330\227%\273\004\023\373<\022\222\202=RkP=\374\346\371\275\250\351`=\327\351\001\276\270:\360\275\210Y\332\275\270\277\222\274\016\003\013=\010\317\221\275\203\013}=c\231\262;\215\324\007\276B&\014<\350\236:=\317K\251\275\304\220,<\377K\030=m6\'\2752\213\350\274\035\324\242<\270\3719=\004\270\342\275@\223\005\275w\014|<\234\361(\275\362\002\347\274\302|\311\275\023Q*\274h,\216=*\347/\2761P\246>\2129\"=p\240,\274\'\343\227=\253\005&\275\017\356I\275r\372\225\275dJ\260\275=\235\025\275\r\337\'=q\231\257\274\232~\336=4~\330\275\026\000\313\275\336\332\320=\227TF\276\321/E\275\2012\223=\213\324\254\275\003\016w=\005\031\004\267\304\337V\275\234G\n>\337\3114\274\206\276\270\275\305\243\262\275\027\324\223\274\236\246G>\257a\317<z\270\t\275\3605\231\275\316O\025>&\234x\274\374\001\367\275CT\261\274\022\026\311\275\311=\024\2749\214\022>\235d \275\355\315\322=\275\277\271\275\342Y\241;\016\205&\276\034\253\304\275\202\320\234<\372\362\016\2762u7>J-\021\275db\244\275\013\340\261<#\302.=\007\256!=\333\367h\275\322\005\010\276MV\005\276\362\032\n\274\247\344\356\2752\362\000\275AF\360=~A\024>\037hJ\274<l7<M\3458\275\373\010|=\267\222\250\273I0\271\274\343\004-\273\250\222\350<\325S\376=\007w\226=`\205\035>\313\313\322\275\223\032\003>c\253(<\352\364\001\275x\022\337=\2504!\2752\270\350=\275\226]<\331\312)>2Cx=i4 \274\345a\317\273A\036\326\275\251\233\374\275\213\262\206;C4\251\275/\2507\273\322\234M=c^\202>\320\221\367=\314\377\265\275\007\201\234=F\206\010=L\3444\276\374F\230<dQ\357<%\'W=\347:\304\275\232\314(>\241\364{>\022\204V<\216\322\327;O\375?=\3408\262<r\246e\275\226\023\217<\353\222\223=\300\005\303\274H7\267<[J\003>\241\347R\275\252\037e\275\324K\225\275\266S\231\272\223H\0269\223\266>\276Z\026\n>\266\2136\276\230\344\025\276\215\000\304\275\2609(\276\355\2447\276UP\033>\027w\326\275^\324\034>\303\346\002\276@H\020>\007\242\263\275\264\374?\276Y\032\310=T\302\264=\247\342\221\2757\321\313\275\014\326\236\274\014\037\212\274\332\305\274=\240A\214\274\257K\r\276\307|,\276\005\037\246\275\360\206\241\275\324\350c=\331\274\363\2749\3611\276\236\315\312<0:\343=\235\3539\275FiL\273\023zV=\371A\030=U\206\035>\021\010\306=\225\212\036=B\234\032\276\t/[=\211\357\364\275\232\350\235=z\006\233\275;lR\276D\366C\276\364I\335<\254H\330\275\005\237\274\274~\234\231\274\236\036\033\276\035\334H<b\206\004\276uqx;+\361\306=\177E,\275\030`\032=Q\242K\276<\026R=\nt\274\2759\001 =\020\346A<\316\027,>\346Qi\275\311\274?\275]\233Q=F\221.\275\006\332\366=\247\221\254\275>\2613=_5\256=\253?\376=[\255\207<\376\212\005\276\255\214\007\276\263\232\024>M\026\351=(\220\264<Q\354&>\264\202\007>\004W\323\275f\227\030=\261N\332\273I\221v>\366\344\240=\032\243\023\275\364r\034\275\266!\003>=\231\206=\243\240\315\275P\316%=Z7\001>\204\261\262<ql\002>\255\211\237\275\232\021s>\235\353\215\275\226\232\013\275^P_=~\217\301=3~\031=\231\034K>\226\363C<\256\242\244=\334\220\246\275O\320e=\001\341\316=\264\213\206\275\224\266&;2\211\036=\254-\205>W@\216\275\035PO\275\r,\355=:\277!\275\014:\316<\030\013\332=\244 \025\276c\272\270\275\245v\207\275\373A\200<\020bU=\335O\227\275\274\255S<-\250\253\275~\217\312\275K@\326=\347\254r\2769\033M\276\370\351\006\276\357\372G\275\300\322\003\273c\354t<3\3470=\241\031(>\005W\032=)\036\'\276<\266\271=D\203\264=d\374\251\275S\271f\2754\267/>.(\001>\3560\200\275}{\202\275|\323\344\274\220\016\275<j\234\201=(F\t>\242t\325\275\247S?=\202Kg=\007<\331\275(S\343=\334)\325\275u/\234=\216E\311\275U\343\365<\330\014\224\275\256l\370\275\211q\027\275\031\005\214\275 \256\346=&\035\030=\210`\354\273J\014j\276\215\261u\276\330u\030\275\357\321!=\304\205\014\274&\300[=L\r\017=\307Ll=\302\3403=p\003P<\022\370\212\275/FE>i\335\254=\'\207\373=L7 \2765\254\236<&\341H\275\272,\001>k\273\257=8\244\347<@\355\343\275\007f\235\275\210\256\031\273\305\237%<\207\260\000\276\222>\345\275\331{\230=F\255\262\275\000\336N\276S\031B=\377\037\024\275\260D>\275\000\2665\2741mC\276\271\267P\276\240Ob\275\362\313S=:\343\275=A\343\227\275/\"\365\275\212#G<\013\265,\275rz\254=\016\206\223\275\030\207?\275\224\254\026\276\347\370\276\274\246\224\316\2751\221\355=\336\206\004\276\376m\232\274\016`\n\276`/\032=Q\013$=dz\254\275\327Cd\275\013\346N>^U\001\276\304+\001\276[g\034\272\310-\255<\001\t\214\274<\222\302\275\356>\243=\221\017\253\275O\276.>\004k^\275\353\021A=\262\370Y=\254\r2:\255C\244<)\326\206\275\267\317\323=\212\365\233\275\037_\213=w\217\001\276N\210*<+\207[>\375\2048< \300\320\275\273\234\"\276/\240\026>/\272\260\274\251\t\211\275\026;A\276k\326+>\003r\337:\253Tn=\217\314?\275\004\325\363=\331\317\333<A\032\336=\242\235j\276\262E\251\275\213\317\035\276\025\033\210\276\"\361\004=k\322\t>\271\020\376<\333\377\276\275\3431\234=\207c\362=\007\245B\275\033\204\200\275i\260\2559\010O\315\275\025c\374\275\327*\001\275\014Ko=\241=\332\275+\334\324<\205\233\371<\2468h\273\305s\236<\234B\021\275UB\353\275\247\230\223=/\316%>jt\022=\3231P\275d4\217\270\333\277\214\274\226\333\320=,g\336<\223\317K\276\023\362\370=\375\265\247=\010 ;\276\354\304\251\275X\\i=\177H\355\273\211\254\261;\255\247\247<\261\247\321=\274AA\2760X\370=\315\263\321=\250\213\244\272\034\227\264\275\236\302Y\275\343&\235=\241\nq\27569\030\276L\367\025>\317\026.=\241.\317=(\303(=\245E\010=:\360\321=<\\\032\276\310\370\222\274y\257\224\274\362\2126\276\345W\340=\243\3527>\321\205\321\273\226\240\327\275~P\217\273\177\331\005>\367\276*\276g\332\221\275|\000\312=Y\022\257=\366\375\275; \216\373<TY0\275\025\360\201\275\350.\220\275\253\352\224\274Q\002k\275z\010\252<0\346q\275J\006W=\304<\">)\250\321=\376\247\257;\274\325\207\274\345\017y=\205J\025>\202~\217<\206@\240\273\346\250\211<`\020\257=Rs;\276\363z\327\275\266\037\026\275\031\000\261\274\026\242(\276\303\213\033=\271\227:>\330$\036\276\311\001\237>\337\244\374\275\342L\361=%c\000> \021\227:\345\305\311<p;3\275\337A\317\275M\232W>\350\205\335<K\r8\275J\214%\274\024\337m=l1\312\275\004\213U\275i\307\003\2764\260\367=_\3672<\323\360L=\266\311\247<\265\024\007=\312!\241\274w\201\017\275\223\334\252\275\023\243\332=\030+\303<\354\314\367\275-\363 \274\315\022\346\275\353\252\270\275\210(\'=\271\3258=\337\355E>\340w\242=\225\262\263=\245\033\030\275\360G\245\275\321m\251\274\304\273\237=\360\341m=\"\206f\276\301\230\'=\365\311\340\274\204\324\277;\207\206\004>\331\260D<@%7\275\3443\262=\215a1>u@\323=T_\340\275p\262\n\275\035\250x=sj\274\275\2052\020\276\2506\026>dBD>\212\3310\275\356\340\306;\264\333\325=3^\254\275\303\261\322<\312Ar=e\0178\275i\377\331;\0049\360=\226g6>\322\2317\274N\024\022\276\342 \222\275\0257\217=\224\301.=\375XY\275;e\365=\270\343\303\275-\357\024>)\376\222=\206\232Y<\325z\251=\000\271;\275\205\232\334=\365\230\261<\177\354\224=\027\321!\276O\0056=\344\274)\275\'r\001<\tJ\302\275\253\0077>d\356\351\275\222\361\202=\007$\200\276\304\360\320<\003\251\364=\360\326==Z\345\223=\3348\371=~%\027=\355\\p:\037\202\001=\272R\021>\201o^\275\355 a=\270Hd\276wFx\275\014\252\014>\254\006+>\313\202\005=\374>(=3.\222\274J\340\347\274\003=*=I\3472=\325 \t<*\241\340\275\344\240,=\006-\226=\371\317\344=Gf\261\275\265?\214\275|g\315\273\342\007_\276\244\005\224\275\334\324K=\344N\270=\235\361\014\275:(\224=\222\366(=\341\205\350=\023\306\356\275\362\2666\274\353.\"\276\361\263\002\275\036\202v\275\346\247:>an3\275\026\002Y\275Q\210\002=MT\007=\201,\212\274<Tl\274\261Q*>S\1777\276]\327\271=\352\322\326=\257\336`\275\035\265\022\276+QB\2768\3452=N\310\276\274\177$\020>\242\315\245=1\236\264\275\016E\n=zW\014=\010ka>#.\244:=\255\372;0^\267\274\226>\'\276|\2035\276\036\027\243=\274\004\021\276VTc<\364`Z\276\0027\300=\237j9\275\226.\032\276\026\211?\275{\376$>\213T\316\275q\263\311=$\251\t\276c\372\005\276\2102&\274\266\375\333\275\352S\224=\227\263\025\276w\212\212\274>\247\241\275\033\323\021\276C\231\213=\353\320\226=\220C\236\2756\010\252\275g%\200=0:\321;\276\362R<\355\273\010\276a\2633=\244L\205\276\3375\316\274\212\360\253;O\nL\275\034\256\237<\260\204\311\274s@s<\037\315\301\274\365\377R<s\004(\275\350\251\272=\033\026\366\275k\035\026>\211\331\234=\200\341\014>\335)}\274L:f\275\227El<Ih\006=x\221\261\275\302\206\200\275\315\n\230<E\310Z<C\2657\276A\251<\275\3774\226\274\361\351\004>\365\305X>:u\274\275k\010\016\27529\262<\005\333\356\274\275u\003>(;\005\276\216&n=\310\372\224\275\345\3602=\332\013\324<\214{\314=v-\022\276w\371`\275\t\006\374=\217\377k\274\235\034W>\330\354a=69J>\351\262E\275\237MP\275G\240\237=$\025\222=\264]\340=\\s\327\275,\315\256=\014\2128=6p\345\275\230C\330\275\270\'\314;\013\233\265\273\t\177S=,\233\261\275\335z)\275(\340\014\276\260#C\2768~\026\275\333\234[=o\306\210\273\225*\251;\311\232w>?X\303<<\nI=\223B\026\275\030KK\276{Ig\275\004\346\254\275U\343\031\271\320R\005=b\035\251\275-\\\344=\277\314\245\275\340h\373\275F\252i<\231\3503=q\326\305\274o\370\203=\\\222)=\313\303\370=\340\314\210\275\016\334\331=\265\375\000\276]\336[\274\324\010r=#\000\274=e\372A=\312\266\'\276\2005\377<\256UT=\274\262\224\276\022\372\256\275\350#\022>\340c\032>\250\227W<h\345\277;\256\266\342\274\324b\207=\014\003\370\275RMU\275\005\374\347\275\345\271\323=l\000\234<\016,\002\276\204\025\322=\276\316\273;\356:*\274\321\252\347=\202\013K\274\031\364\335\273\001\302\245=\261\331`;j\351\021\275\352\231\273\2759\330=\275 6*\276\021\212\233\275B\352\262\275\234\3766=\333\034\310\275\216\235\262\275D\203\251=r\332\342\2752\234\223\273\335\236\261=\361\014\334\274s\377S=\026\216\030;z^\204=\275\311\303\274\344\363:<\312:\352<\2011\203\274u{\255=|\004\255\275}:\367<6\023\222=>\2500>u|\275;U=\252=p\365\336=\022\242~\276\202\020h=\366\224\022=\216l\">\027\0275\276\271\3201\276\354i\202\274\\P*>\310\024+=&\351v=\351}\224=\177\226J\274\'\231F\275\251$e\275\013\253t\273\2330\302\274\276\251\200=\252\220\001\276\262\242g=0\006\317=\220oX\275\311\274\n>\311=\367=$\321\037\274\2004\021;d\237\212\275\262\224\217=\004\3201>-\355(\275\323\315\274\275\364\035}\275~%\327\275{W\243\273\315\272\035\275`\320\">\363\300\256\275\217\005l<\021Y->\010\220Q>[\247\335=#\217\350\275~M\322=nE\215\272\032Lm=\274\220\032\275D\032U\275\210\210\363\273q\216\205\275\327\352\253\274W<\267<H\213\331\275\226\377\344\2755\234\307=u\256\244\274L\353\031<\317\303\306\272tH\002>\373\3653\276\202\311\000\275\010\244\020\275P}\007>\277l\206\272\270\\\213=\361`\240\275\215>\357=\177\277\350=\022\242C\273)\341\336=\036\371\204=\334\302&>N\373\033>\336\231=>>\013#\276*m\237\275Q\035f\275\221\203\233\275\377\275Q>\334\246\021>\020\033?\275\302\323\264\275\273\226u<\257\226\376=g=\210\275\245\r\227\276\211,\243\274ag\n\275\255pP<x\035B\274\007\245c=\024v8\275\367P[>\352\331\362<\002\352\202\275\351p\273=i+T\276X_\315=\002\263F\276\317\270\254\274@]/\275&~\371=B\241\203=aO\r=\300\271_=\233\356\376\275\2633]\275H;\311\275b\372\236\275o\220\353\275\217\351\310\274\301\264Y\275\355S,=\334S\335<q\231\236;\301\nZ\275xR\201=\356\326\r>\270:\177=6C\322<\346\243\227\275>E+\275\314\004\254\274\326\266\223=\246Z\257=>G\267\275\361(m\275\325\344\263<o\205\373\274\235\320F\275@\371\322=${\341=h\264\226=\311\254\006>BE\224>v.\206\276X\367\237\275\316[E==c\r\274\036\241:>B1\023<}+x\275\206\256\255=d[_\275G3\037>2y\271=R#\223=S\021\020\275\203y\204\275\025d\273<SG\317=\356\'\326;}\325 =\336\333\361\275\003\257\375\273\340\020}<IF\203\275\335\204d=8\002\242<N\3153=~\234\t\275\\\264\032\275:O\315\274\263\374\212=\273dp:BB\362\275F\000 \276\253\275+=:\025\342\275\003z\210=\330#\233=\302\340\205\275V\224\023\276\220N\n\276\321\350\014\276\361z1\275>\311\322\275\035#\335\275\355\001]\275%j\337\275j!&>\201$\214\276\2238\215\274@\036\366=\027*\346;+\307{<\271*\304<kK\206<a\364\331=76\245\275\203\262@>U\360\021\275 \213i>\352\364\207\275\272\256\303\275\307\306\037\275\035X\013>\332V\217=\365W-\276\3541\227>\350x\326=C\222\213<\363\255\271\275\224\365\200=\255\344\226\275z\r\023\273\211\311^<\017\307\204\275\273y\277\275\301\357)=\254:\035>j \005<_\244p\275\235\312\t\2764\004H>L\006\216\275\366\010]\274 \304\367\274v\205%\276\212P\317\275\037L\206>\'\000\252<.\225\253=:\352#>\217\354\017\276\2552\026=f\217\352=\220\365!<\330\005\203=\262\375\256=g\n\225\274\363\177\311\275\266\354\242=E\254\314<W7S\276\262\375\345=\230\271\321\275\374\031\236=F\273r\275\344\304#=\237\325\273\275\256\217\316<\341\214\332\275\nW\032\275\310z\001\2730\'\213=\351hn\275D6\345\275\346\274D>{\364\276\2751\270A:[6\037\276n\260 \275\216\366\373\275\244\212\343\273\036\226\020\275\305\226\021</g\265<se\327\275\226u%=\027|{\275\300\265\204\275\355\350D=\214\030\267\275\276\206p\275\224\324a:a~;\274\312s\010<\267\371\344=I\331\350\275\366\265\364=\022d\305=ho\337=\226\316L\274\314\337\222\275\276\014\323\275\321\255\223\275\214\376M\275H\334\371\275?n\342\273%\351G=y\241R\276\000\341\013\276Wc\016=\250\205\242\274/\322\222<\031<\010<\377\260\022>\245\024\027\276\253,?\275\304\005(\275\222UF>\000\001\204=#/\220=p<\310\274(\340\275;\243\017F=\307\320\026\276\016o+\276 /\234<\303\306%\276i\0045<\261\376\341\273\302\273\201=:\321\254=\274\250K9\255\307?=\302\001\034=A\206\370\274\241\233l>]\220\326\274\216c\177\275\267#\r>\332>\364=\210xm=\217\2242\275\\b\037=r\372 \276!s#>\245,\203\275J\030\331\274\247\310\355=\027\226\253=\375\336\241=\271X\333\275Auv\2750\300\004\276\034\330!=L\314\223\274\363\204\r=\253%x;\213\333\324\275j\335E\276\315\014\242\275\235m\325\275mq-\274\006F\000>\243\247?=J\217\230\275\211.\276\275\221d\302\275\342\206!=\350\355\327\275\021\204\007>6t2=f\261\214\275\036\211g\276\213\372\033\276\370 \316\275\221\261\003=i\2536>,H@\275v$];,\315\316\274X\271\273\275H\365\341<\251+h\276\212\343\350<\354NZ=\272\303\001>\320U\013=\2436\241\275w\357\017=\036\340m=\177\312X\275tH\361\275\261C8\2763\311\222\275\316\372(>\256(o=(\344\311<V\274\313\275\013\347\025>\233\376J\2756\234t\276\3112-<x\343V\275\216\366\306\275\316\320%>\354n\023=\201e\313<\3639\310=C\033\210\275\200K\235\274!\374\220=\360\366X=\321\332\276=H\322\320;S\r\371\273\370\306\271:\003\343\361\274M\324\343\275\266\357\362\274\302\250\236\274[9\267\275(@\024\276\363\227\237=\177\027\242\2754\254\204<\322\026\006>\252\210%\275\270\330/>\330R~\275\005\266\014>a\226\242\275\006\025\240=\262\327\310=\232\312&=\361f3=]\231\356<\271D\210=Y\267\367\275\227\254\031>\230\215V=}\217\177=\034 \021\276\302\230\033>\016\016\000\276\322\314\221\276\340qH=\3601\025>\022(\026\276\027\301\003\274Af\004\276n\344\262\275\247O\010>U\335\233\274\030E\312;\270\016\r\276w]\302\2759\2018\2756\212\001=/\204\325=\314\376\362=\030)\237=^3\325\275\344\341\353\275\227\225}<W\010\242=\223\023\267\274\035W\206\273\222\266\272<\344g\002>}\250r>\244\333\220=\236Q\211=\324\024\031\275\362\353\371=\332\213\366<\037\014\031\276\233\353\320=\245@\024=\227\023\036=\023t\350=!*\r>\353}+\275\246!\214\274\202\330\245\275\272c\"\276^\321>;vOi\275\025S\374<31\"\273\314\351C=\240\343\336\275\246\271\227=\031\014\221=\326y\r\274t\"<=/\334\234<\332>\343\275H\236\027\275\002j\276=\342S@\276\250bs<\306G\301=P\220m\275\t~\035=\375\376\316=\347\224I\275\324\007\222\274\2343\216\275\206\363\312=\250I\035=\022BI\275\341\255b<\264\021{<\215Ej\275\252c\021=@\357\273=s\347\240<\266\233\364\275_6%\275M\305\351;\212\317E=\\^\350=L\365(=\027V\307=\310A\252=E3u>r\037\357\275[E\222\275\036\003\227\274m>\013\276\226\016\274=\300\034A=\344\212\357\275\316\r?\276y\224\026>\216 \236\275\t\250\275=\213\3458;\222\207\267\274\313\377\216\275/\211\333\275\'f\306\275\360\225J\275H\3033>\335\355A\275\010\312\246\273\316\372^\275\n\315\222=_R@<\'~\251=%G\207=\3640\334=E\362\006>\250)\325=( \274=\275\347\330\273ri~\272~\342\266=6dE<\214\035\300=\374\373\277<\t\001o\275bY\302=#\027U\274\215q\017\275R\032\307\273DG\266:\177\r\016\276\3605\343=\315q\260<\'\274\031\275\013\303X;\016\244\203<\322\000\307\274\236\247X=\0213w\275\216\202\343<\255!\273=B\3605\276\355\303\305<\307x\031=]\222\024\275\323R\216\275\334\203K<f\251\036<\006%~=\377;\001>\325)\000\275\365\266\001\2765&\027>\245\026\035>\023\205\246;\272\304\245=\006\0054\274|\377\272\275\240\\\364\274\000P\350\274\014cw=\027\325i<lwG=G\331\214\274\022\343\243\272-H\371=c\361\001\276\357fL\275\244\026\336:\310$\014>\222\230\200=&\214\263=\277\222\266=E\367\220>\204\216\235\275\322\030\223\275ly\337\274\332=\217\275\303\201&=)\230\376;h\354a\275e\342\253=\225o\312=\202n\003>\212\320y=\003\351m\275a\226\303\274\r=\262=\253\364\036\274L\275\250;Q)\027>\331\004\021>o\357|\274\274\343\302\274\354ME=\352\201\262=\225\206n>\007\256\026=\371O\002>C\307\020\275b\032j=\330\364\010<\360\312\237\272\3722\233\273\264\272B\275\304]\3229\336y\001=\226>\344=\036\274\034\276v\220\310\275\272n\216=\231\226D>\321\207\r\276\016\347\222=\230\340\343\270)N9=u]\354=\340\334\205\2752\227\320\275\002V\250\275\332\327\004>(\034\355\275\3557\377\274q\221\274=\352X\224\275\0160\201\275\365[\327=\264\214\322\275\261\366\014\275?h\177<(E+\275{\275\300\275(\306]=1\371\230\273\034\227\263<l\327`=\321F\035\275\t\372\256\275.-\344=3\r\240\275\'U.=@;\227\275\036T6={B\034\276\344x\304\275\363\024R>\373\271\263=\013\320\246\275\'H(>\261\250\317\275\3527S=\014\177;>c\332\241\275X\021\205<\342*r\276(\032\200;\305hb=.\246\332=\205\321\237\275\252\350x\276\002\254\005\276\006\2424<K\253u<\031\252=\275\377\271.\276\362\235\020>\3441\221\275\215\002\274=\305Q\007\275= \007\275\230\225~\275\033\327\017>\205\221Z>-P\307;\262\321D\274\225\315\361=N\253}\276\271g.=\021\246\316\275\037n\276=0U\016\276\357\230_>\t\354\366\273L\271?=V\235\315\273\307^<\276\314\271|\275s8V; \300Y\275\025\300\206\275\177-\271\274wh\315\275\022\302\3559\315o\003\274\256\234\310=\327\354@=Y\377\215\276\225\353\347\274)\366\010=\005\030\226=\303\337:\275X\0059\275\016\017P={H\213\276\037q7>5\324\251\275\031\261\304\275\311<\216=3\336\204>\341\244\275\275\274\346\022>\255\267\355=\221\375\237=\235\350\257\275E\'_\274S\004[\275\266\364#\275g\332\006=\003\001\262=B\362\004=8T\303=\232\326/>\343\374g<\275P)\2765\213\234;Q\347G\275\351\216s\274>$\364=\356\367z<\345[t\275\373\267\275\275 }\232\273n\302\304<\001\000\337\275\001\210\367;\351\306\300\275\325\232o\274h\346<\273Ma\352<\255\2720\275\251\232U\275\017\0244=\311\232\305;\200V%>o\351p<\\\363\253\275\341\005\305\274\241\022`=\212\372\222=uW\r>7\215\232<u\372\001>$\317\'\276#t\312<9\347\343={w7=\206wS\275Z\004c\275\224v\215>\240\223(=\277y\327=S\025_=J\025\002=\r\376\261\275H\371G\276\375c\371;\234\273\010=\345=!=8=\273\2753A\217=\356,T<\273\300G\275\374\340.\276\035\017\252\275=,\264=\242]\263\275\240\270\327=\326\277 \275No\311\275\002\301\304\274Iak=\r\250\273=\317(\361=E\365f=\177\352#=\\\321R\276_t3\276\234 C\275\203x\017; \325\017>\322\263\372\275\306o\025>A\271\364<^>\265;\326\266\r=4m\215<\356]\325\275\302\304A\276\372\024P\275v)\373<\255I\365\274\264a+\275\354\034s\2752\024\321\275\372\016\272<?\024\235\275\326\230\364=\375=\343<T\221I\274t\020\010\276\344d\037\275=\036e=\034U\002=G\033\342\2759\243\215=V\036O\274/x;\274\331\344\022\276{\301O>\270N>\275\367\334p\273\302\0319=\027u\200:br\261\274!\224+\276\272\271\356=q\033\033<\305\356\365\275\217\215\347<\022B\363;+\317U=\351\023w=.\312\314\275\315D\353\275>=m;\227\036\013>\210q\261\274\304\223\356=\007\275\331=\355\341\256\275\252\312\332\275*\263\037=~\277\303=\030\361\027\276=\303\233\275p\212\252\273\373\004/\275\227k/=\334\2751\276\324\'\002;0\247q>@\300\252=W\302\254\275\323\031d\275:J\002\276Y\317\n\274M\241\331=\247JI\276\030\377\000\276\004\217[>\357S\316\275\317\317:>3um\276\340\024\000\276\306\233\341<W\226\\\276\032W\277\275\336/S\275j\226\226\274:\335\026>c\200w\275\334#\204<4\340\207\275\244P\370\275YS\271\275\257UF\274>xF>I\346\355<\215\303D\275\201\014\360\274\377\314\016\276\251\033\353\275}6\210=I\353=\275P|\n\276\270\306\020\276K\014\264=5D\253\275F\006\247=\201\323J\2759!\213\274\364 \"=fJ\026\275\300\363\312=0\325\213\275G,\221=\224\322U=8\244\036\276\323\277\322<`\274\314\275\230\022\263;\206p\320\275\360\333\237\275\356\310\023\276\302\037:=9R\230\275&\364Z\276\021:=\275\313x\034\275\215z\237=$\301\013\274iA\344=\260<\306\274G\177\270=\304\307e\274}\232\036\276}\007\303=\266^\001;?#\300\275BF\006:\021\217O=;\366\272=\271\036G\274DC\256=\256\337\350=\007\2353\275r\237<\2754\213\321\275W{K=\221\205}\274\304\373-\276\306\260v\274\310\366\014>d\233U\276\347\227\330\275\362\305\024>\022<C>\217j2\275\267>\374<Z\303\201\275g\315q\275EQ\334\275w\242\263\275\246\316\201=\026\2062>\227\207p=9\353>\275B\225\370=\246\356\026>\207\350\353=\234\254U>\323\370\026\274pY3\275\215\273G\274\357\367\022>+\341Z<\312\"g\275\223\002\360\275\263\027\343\275\025\321\244<J7\300\273fom=\377\371^\274\377r\357=\264,B<\375\206\036\276c\230\263\274\313\035\t\275\225\272e<\220\317-=\t\356\203=\211\255\226<\001\236\014>\241\367\224=\246\347\321<cy\246<R\276(\274kb\331\275-\312\271\274\204\313\253=\222r\325=O$\330\274\357A\304\274e\235?=\263\3561\275\221\320\321\275\204\344\t=\352N\344\274^t<\276\332f\024\275U$\230\275\355\212\215=%?\307\275\327\273\025>\247\033s:z\354\342\275u\243\030\276FW\202=\177\330\225=\0009\342<a,\025\275\003\007\245\275xD8\275\253\2722\275\0140g\276\233\206\346\275\266\n\306=0O\373<\n!\206\272z\001\307<\004\002E\275Uo\036>Nk3>Y06<\336o\323=\267\350\312=<V\321\275\003\270\254=\212\025\335\274\025\036\033=\217\325)\276\232\273\320<1\313\251=R\317_\276\376\316\003\276\211\332\003>\310\201\230\275\3156\345=4p\030=\340\265\333\275\301|\226=*\372\005\276P\n\007\274\3339\245<\221\335\004\276\330\225m=\3620\307\275\265\023\263=c\003\037\275\0263\3509f~\232;\317\206\027\276\002\363\251\274\215d\235=\364\032>\276\324>\365=\030C\\\275\033X\374\275h\300c\275Yt\033\276\304\010\302<\373\022\254<&\017\263=\370N\242=\340)|\274 \2320=\r\276\333\275\021\r\t\276\322i.\275AP\370\275;]2=\364\334\032>\302!\205\274\346E%\275\235\346\254\275\331\326\n\275FE_\276\200,\250\275\016\222\243\273(\302\304<\360u%\275\005\240\311<;\014\363=\2754c=%:\233\275\246\273\217\275\370\245\006\276tjH>\177\024\257=Y|\313\274\207x\242\274\275\330F\275\237\340\346\275F\316\321<\340\3778\276j!t\274_\315\207<\253k\220\274o!:\275\224\220\273;\366+R\276\025\273:=<\245\257\275(c^<b\340W;\235V8\276E\r\247\275\030\304:>\351S\253=\356\223\237<\324\224\n\274\262m\370=\366\202\322=N\357\234=g7\210<Y\207\036\275\r\340\341\274\201\237,=\017|\372<\364,S>\326d`\276\256\211\206\275!7\325\2757X\023;\034\000z<\232Q\232\274(W\245<<V\262=\305Z\265\274\027K\274\275\303<\225\274G\274n\275\325]\262\275\345\354\307\275U\026\036\276$,\206=\233\344\370=\363UT\274\306\230\336\275\3028\024\276.x\323<b===\257\331Z\275H\211\031>\364\227m\275\325\272\241=5L\227\275D*r=\322\345_;\240\257\005\274Q6<\275\351\336>\274\265\207\014=\362\234+=Uc%\274\342\262\022\275\227x\216>W\327\236\275\312Dv>p)\210\274Kx\366=R\256\244\275_\337\207\275\330\001\000\275/\362\020=h(\000\276(GJ\275\372V\304<\253V\222\272\3752V\276\241\346N>\202\202\020\276}\261\247<;*\245<\237\311\353\275\246b\333\275}\024\314\275\355\321\317\274;\211\371=\367\211\005\276\037\010\324=^\375\25392d\246;$\n\212\275\\\272x\275\306\2242>\331\326\005<\200\003\031\276\277k=\276C\310\323=\260\200\252=)\rQ=\210\203\233\274)\353\024\276\302ux=\341\r\000\276lX\316=Q\346\356\274&w;\276\221\254\207=y\343^\276=\"r=\031x\022=\023\005A\273\3011\252\275\212\2349>\305\342\037\275\377z\013=l\374\027>\363\301\302<9\035D\275,\200\0008$f\021\275#\362\315\275\223\200\"\276v\036\231=^/\224=\177\253\262=8\242\241=*\201\301\275\002>\210\275J\364n\274\354\326\021\276\262#v\275`z%=\246\377\365<\350\232>;n\357\020\275\336d\315=\210\030\244<I\306\211=\254\242\314=&\355g<^8\273\275BY\001\275z\260\232=|\373\235>\3079a\275+\253\370\274\360\303~\275\263n\200=#3>=\002n\301=\026\013\302=\377\241l=\364zk;\022b<\276\362\341\313\275\035\243\r>=\013S\275\0220\277=)\306\337<\3058\215\275\234\013\243;\326\021\240=\216#\341<\245\233$<*<\213=m\213\'\275\343\376\234\274\376\236\324\274\361\367B\274#\177\034<n\307:\275\206eJ\275X\350\273\275\272\204P\2748y,\275\367*\375=:\024\342=\263~\371=\321\234->\014\232A<uw\273\275\301]\274<AD\304\275\211\3331>\204\277\005\274R\336\370:\231(\227\275\222#\245\275\357rd\275\n\217\357=!j\236=\217RY<8\0016\276e\224\351=y>\354=<#t<\263s\272<`M\307=\341\252\212<H=\2419\377\025\273<g\357)\275\016\021\001>\2129\304=vY\213\275F\214\337\275\210\316)>F\335\313=\036\025\232\275f\221\372<\210\221-\276K|z>\305\245<\276\225\243)<6:\025\276\020\226B=\013/K\276\232Q\r>\315\307\330<\243\3055=\203\273\301;\017/\2159\222%]>N\004\221\275\366\350K>\236#\347\274\224\362\003\276\236!\251\275\0051\363\272$\231k>\266\r\010\275|V\271<^\262\201\276\033\273[\276\274\236V\274+L\360\275(13\276\214\007\362\275Y\321\363<V\321\366=\r\257\273\275T\017 \275R\225\306\275\034f\332\275\363\250\252=\251\372*>\027\264\332=\211\227\256=\266\200l\275R\354\232\275\332\'\235\275\313\251\242=\301z\341\275QU\341=3#\'=\t\365,\275OK\022\275\016\357\236=\202K\032>%\360\357<\346\352->R\311\241=v\261\035>\013\206#=q\357w\276f;\224\275\326c\213\275:\020W\275\333\307\206<\237\360?=@\253\313\275\232\221\013<\330\307\003\276M\200\244\275\006+\236=\314i\005\276\261TL=\353^t\2766\260L=b\360\006\275)3\342<\312_ \276\3662\241;\2418\315\275\327~=\276\204o\330\275?\374u=E\233?\274\353\317\245\275\007\377\261\275D\020\247\2753\352\013>\226\020s\274r\212\300\275\377;\006\276%>p=\255\323\347=\231/P\275\307\005\r\275F\217o=D\275\302\275\211\3416>\234\n\212=m\324\340=\234\364\226=v_\253=\337\370?=7\340\305\273W\325\235\275,\247/\275\334\202\335\275f\343\356\2752p\037>\304\273Q>\335\301\253\275\nTv=\352\216\202\275\244\002\372<\255\320\316\274g3}\2757\366/\276\233\222(\275FpZ\275\221\2349\275\276\233\216\2756\303\242=\005\256\222\274\240\261\275<\355\236t=\352\226\007\276\024Tu=\364bk<N\305\001<@q9\276\371\212=>\271\002\017=dK\216=\275V\022\275-\353\240\275\244\343\322<\332\221\376=q`\242\271\n5d\275\201\254\301\275\3601\037\276\033`\036\275%\320\263=%\007\370=\334\021w\276D\262+\276\003\357\363\275\236\032\000\276\372\'a\276\t4\362\275\263I\263\275\005\345\027\276\250\340\236\276\246\230D9\263\246\243\275\342Z\202\274\273;/\274(\200\246\275\256\372|=\246\245E=f\330\241=\271\312\232\275\246\'\275\275\222o\367\275w\321\321\275:!\231\275\220\244\000\276\361\333\r=g\334\351=&\301\004\276#\017\235=\361\312\377=\376N\236=\275\344\205=%\027x\275\303\352\326=?\001[>\2259\207;\000\223\303<3\023M=\0109\315\273fx{;CH\230\276\025\013%=\217:w=\247T\004\274c\255q=\244\0074\275HOD<\274\210\274\273\014\302\220=@\353\227>\354\016.\276;\330\027==\034\005=\312\n6=\'\217\323=\240\337V\275O\244f\274\010\206\352\275y\2368>\233\361\014>/\251\014\274]\301\\<8;\010\276P\031\025\276gQ\\\274\312*A>\252Y<\276\341\330\341:\334\007p\275@\253\240\275\032\232\001=\240\267\221\275i\237O>a8\'=\246\353\305<c\323\006\276\247\275\003=\366s\275\275\023,R\274_&\273\275\342\022\220=L`\375=\271\'\277=]\016y=l+\001=S\224\032>\264\345\320=\351\204\267\274\013\021\374=\355\331\241<i;T\276\303 \215=\220\002\237=\3763p=\342\\v=\326C\257\275\222\221\210;E`\034=\355|\000<\223\365I=\017\224;=\t9\241\275\375\242l\275a\007%>K\315,\276H\2572<H\360\274=E\005\344\274\233\200\n>\214\017\276\2749\262\202\275\346:\304=\257`A\274\333+\005>\035\227\035>E\250\031>\321\007\232=\036\022B>c\322\243\275\030A*\275\244\3223>z\352\324=I}\346=E\347\272<\344\035/\275O\234\210=\231<8\276\036\363\232=T\310\265\2743\346$\272\002\274\362\275\334}^<9<-\2767\017\362\273\337\335\'\276\250\272\025\275\361V\017<\376\304\316\274\222\344\331\274\271\006V\276}i\354;\255\336]<\003\206;={oR\276\315p\004=\024,Y\275V\304\222\275\200E\334\275\225\340T\276\311<\000=\357<?\275O\206\207>BH<;\257\006\274\275\225\247\200<\2365J\275M\305O=\005\024\t\275Z@H>\276L+=\326{\265\274X\177.\276\371\234F\275\024\327G\275_\202\300\275\243\314X\275\334F\372\275\032,a=VX/\276\335\034\263=W6O;\r\252\034\276\303u\233\275\375<\345<\370R\366<N\242\007=s\007\204=\275\244\301=9\372{;\345I\026\274F\355\320=\317u\276;7\004\014\275-\363\232=\t\355@>\342\026\003\276g\202a9:\267\241\275N\030\354=\334\232\221=RU@\275\313\017\265\275\267\002\003>\203@\211<\237T \275\201\310f=\343AU\275\204\253\"\275\005~\212=\217\305>>^\300\n\274\324P\001>\232\\\023=\003jE\275D\241f\276N\022\335\274\253Y\336=\033\351$=\313\272\301\275\022\320\254\275\303g\275;\344\265)\275 \315\301\271\026w\331=e\002\305\273u\361\010>M\024\344:a\373\200=D\213\r=-\3605=I\013\t<\010\265_\275N:\037\275\266\206\230=\204x\030\276p\221\273\274\222\000\353\274\"?\333\275j\315?=\331/\336=X\215\254\275\000\304\243=\356\371\262\275\2605\334\275_\t\214\275\200\224\013\276\210\350\302=\271),\275A\262\336\274e\002@\275\033\372\265\2751\246\343=\225\007w=\225\367\026>\240?\030>\206\326\275<\227\023\301=\r~\211\273\304\323v;\022\334\320\275\241\220\301\272\212\355\357=nA\210\276\025\235\267=\3015\000\276B\251\014\276y\313i\275|]\007\275U #\275\257\017;\275\020\002\t>\362\272\024\276\312\232`\274\311\024\271\275\217ZK\276w\201:\276\227\207\374=f\346\255<\016S)\275PX?>\320~\267\275\253\222\214<s\31009\305\273\240\274]%\241=\315\324\2269\033*2>f,\017\276\305\335\251\274\303\023\330=?\212\035>)\2469\275Q\361P\275\206\244\341=\034\376\263=\2500Y\273q\256\177:\024\004f<\315<\034\275\017\225\225=\2305\211=\003{N\276\037j\220=.m\220=\'\222\">X%2\275\360~\336\275\214\243\311\2751O9\275\315\364~=\017\035\220=F\350\267<%7r\275\000\360\365\274\335\262\313<\241\t\302\274\241%\234=\300.F>\365\314\230>\356\266\017<\336\022\005>\337>\003>{\210F=\255\306\221\274y\001!=`\230k<\250\214\330=lL\240;\272u-\275\345\343\264=y$\257=\267\233/\275\2347C=\315\260\272=\223f\242\274q\017I\276@q\353=\306\371\222=-\221u=\352\"\366;\237??>\201\341R\275\3511(><\310\347\274\252\271/\275\246r\000=[\264\014>8\356\250<.\317\332=\243]\027\275\010:\225\275\367\275+=AT\037>\335\302[\275\333\031p<\333\013\223=\304\327\323\274\354n\252=\310\277\210\275x\320?<~\321c\275mV`\275\017d\342\273-\032\021\276`\323\203\276;\327\216=^_\251<\005\375\246\274[\330\241:\277f\016>\2214\250\275t\345V\275\353\322\362\274A\363\245=\355,Z>\036<\244\275\003$\031\274\376\005\001>\335\\\216=\245s\340\275\320\353\361=:w:\275R\216P=\230\257f= k\234\275Y~\316<\006\251!=|0t=\272*\257\275\313\027\270:R\212c=`\274\274=\301\227\022\276\261}\216=Zeh=\274|\003\275jB >dR\027>\207\307\r\274al\277=A\365\230\275\233\t\253\275\325\026\205=(\242\275\275\350\0367\275\'\024\036<\017l\232;\215\340(\276\357;\371=$\256\030=TJ\252\275\325\344h\275f(a=\345\351\323\273o\3252\274\302\rF\276\024\204\022\275dT7\274\314\273\002>\305r\245\275\r\343\025>\250V\220\275\277\027\225=\025\3178>i\022\352\273\344\220\237\274\323\265\252\2753\325\310\274N\323\266=\363\273F=S\027v=\361\r\366=e\275\371<-\\\t\275/\232\371={\010\016>W*\020>3Ia=\324\257\336<\341\210\240<\036\235\367=6R\240=\246\361\215\276\313>\321=\023w\247=h}C\276-%\013=k\230{=\002C\024=\002\340\320=\006\033\306=\321:\027\275\3401\211<\024`%=U\312\021\275a\333*>\221\252M=\300\215\253\273O\021\023>\214\273\002<\274``\272\304\274[\275J\206/>\2728\304=c\017\335\273)\343\020\275\373\352\215=\364)\204=\3553\346\275\301|z\275\'\352+\276\003\016\334\274\027\266k>\262\n\257\275@o\206\275+9\004=G\261\037\276\305,\027=L\276\214=?k6>@\233`\276e\315\240=\364w\324<\354\177l\275\306\027\026\274e\001/;\025k\215\274\021\244\371=<X\035\275\305\367\303\274\345R\241\275\273^\332=\346\2343>B\232\021\276\360\353\336\275\220\001,>6\013\017\275\240\022\312=\007=V\275b%\014>\3555\261;\211\233\307\275\234\203u=y\303\010>!\360)=\215\370\315\275\254\324\354\275\031\216N\276\350Y\310=7\362\345=\324I\002\276U\237\275=\373\352\340\275\224\267a<\250I\\=\026\304\335\275U\270\2379\\Y\013\274\225\266Q\275 X\017\276J\t\014>_\300d\275\260\375\023\276I]/\275gP:\274\367\227\240\274`(\356=m\240\035\276\360/\242\275\026U\201=\343*\217>@\372R=\037\005%\276\353\227\263=\343k\256;o\276\206\275A\3035>\251~.>\347\005\006\276\246\345\021\275\320\242\375\274R\035&\276\264\273\244\274=*\235\275{Q\177\276\326\243B\276\272\234\230=6\n\r\275\267\003+>\253\235\372\275\372\247\370\275\256i\034=\325\304F\275\311\373\002>=\375\211=AbH\274\376Y4\273\310\336y\276z\223)=\200Z\202<\026Y\213=\374NR>\270\2319\275~\347c=\321\214l\275\301\316)\276D{ =\2262\256\275\\\243\002\274\275\327W\275j\370\036>f\212*\276\310\312d>\367#\376=\2243d>\024\216\017\275\360\301\266\274\177\317\237=o\256\336\275T\331\240=V\251\031>S\370\255\275\3433\000>\272^9\276C\355\216=\003\364m>\313;\024=L\220\360\275\241\010:\275\303\303\267\275\321s\373\274|\014\226=\233\255\246=\ty-\275\373\304\001>\202P\330=\023\\/>5\230$>\356L\263;\371\365\236<\336!\227=\262\177_\274\177m5=\222\035\262\275F_\256\273,7\303\275\032W\024\276\306e%>\206\270*=\372\031\215>hN\330\274Q\027\204\274\314E\327\275\372Gx9\253\210\373\274\342#\334;\373<F<a\365$>\t\243F>\215>\'\276\377\327A=\325\235\214\275\010r\261= \211\020=\001\305\221=C\251\346\275\017\013\315=\327\376\244\275\035\'\301\274\2526\262\275\257\245\322;\231\007\354\275\032\250B>\007\357W\275\236\206\025>\030n\000>%\327\234\274>\247\"\275\022\257\r>\335x\020\274\313\256\023\274\'\226\215\275#S*\274S\347\232\275[\004\033<\354\032\316\275_\245\346;\n\352\312\275\3147<\275\330-\026=\341Z>\275\271\227U<5\315\212\275\240\252G\275o\260\367=\371\332N=W\265\262=\233g\177\275\203M\373\274\003~\255<y\033I\276\363\363\020>*\304\006\275\031\376\230=\266\321E:\220\343`>\345\271h=\r\'\315<\212-\031\276N7\356=}7\262<\022^\001=Z\237\304=\342\320F>[\236F\275\213-\201\275Og7=r\310\377<~80\276\331\256%\275\007\366\224<Jg\003>\227\220\213\275&\017\202\274\311\202>>\310\037\261=\032\001\247=Om\240=\021\261J=\017t\266\274f\2160\275\'\360&\276s\257\346<\205\002\350\274\250a\246\274o\364\017\276B\3230\276(z\237=}\004\344;\342z\203=\265O\014\275\275\277X\275\031\261@=\356\301\213\275d\355q\276\2630[=+Iy\275w7\357=r\374\034\276\336\251\n>bC\240=\033\005\202\274\303`C>\2257.\276We\347\273\261\030,\275\237\205@<\253\233\263\275@\233s\273\3646,\275\251\034r=\r;\213=y\263\027={5\022>\310\252\360\274\227yC\275g7@\274\033\rB>\376\241\250;`\215\"\275-\246K=\213,\035\276y\353y>\255\2726\276]\275\000\276\2353|\275\203\217\035\276\216\002\264=,\023\034\276QT:\274\\\2003>I \302=\352\261\014\276\252d\244=\206i\242\275\273\354]\275\014\275K\275\224\270S\275\000e\217=\250\363\242\275\000\332j=\021eD\274f\360y=\0213#\276#\001\274\274\344]\245\275\325E\263\274+{0>5\265\260<l\256H\275w\316\360\275-\341\330=Q]\277;\275\316\265<\377nR\275`\232\361=\346B\222\275\263\332\327\275\235\215\315=\213\221\031=\327\227\006\275\235:f\274=b\034=\031\331\003=(\254v\275\257\\\010=9\235e\274a\331\231=!\315)=\274\260\301\2711\343o\275C\022\274\275\272s\003\275 \007G\276^I>=\002[s\276\r\350\322\275\260k\t\276\330\001\224\275\004^\036>\037Y)\275j\314\222=\256\222\303=\010GU:\307\214J\275C\'#\276\177\202\000<\007\263Q\274{\027\251>z,v<\352pG\275.\345P\276\252\013p=\270\313E<\241\007$>\235\027&>au%=\266\242\264;[\342/>\212R\250<\013\'\032\276\363\021\260=\'\217\017=\334w\367<\314\245\211\275\304$\357\274\000\362\235\276\374@\312\275D\311\303=\240\346\024=3G >tD\020=\"D\037\275X\263Z\276 vH>K\217\210\275\024<\034\276e1\207;#@1\275\254\221\363\272a\3335>\362\303\356\275\312\'\220\275\002\010\362\275pn\272=J_\206\275\007\240*=\347\331\021>\337\361\331\274\372k\212\275\363 2>W\327t\273\033K`\275\361~#\276\217#\223\274\301\360\333\275\025\326\225\275\252SA\275%\370l\275\214\"-=\t\251\013>\n\224\327=\211\241}>\214\334\374;\211\344X\276\005\035j\275\3131\212\274\304\027I=\033<9=h\326S=\233N\201\275k\201\033\276\344\262\346=5\222\002=nv\000=\020\223\002\276\260\220\331=\2658\363\275\014\275b=p\317T\275\362M\261=v5\212=5xH\276\0316Q\276\356\322H\276\032J\306\275NiS>\317\346\034>\262\317\367=\354\267m=\211P5\275U\232\273\274N%[\276\275\206\202\275\265\263f=\313\367\231=%\331G<^\271\220=\255\260\002=\365\346\267\275\366\226\001=/&C\275\331\000\213=\021\274\221=\207\331\317\275\002%\022>\335\301\221<\207d\030\276r\001+=8ga\275L\256\024\276[\253{=\233\253/>\342n\363<\010f~=\016$K\275\0270P\276\314T\335\273\211&;\275\241\025\267;\221~\236<\362\034W=\215\323m=jh\004\276\257\267\'\275\002+\266<L\316\367<\001(\002>\024\025\026<\347J\324=t:V\275\257\352\234\275C\2273\275\273GP\274\345P\356;\n\221}\275\372\372d\275O|Z=\227\272\025\276\246V\272\274\032\304\327\275\251\003\244\276\316\225\371=\334e\267=\251\177W>\035k\214<}\002\246=\254p!=\366\323S>\025\302\350\275\205\326\276<\321\340\r\273OX\022\276\357\302\005<\026\301Y\273L\250\201\275V\377\227\273\251\3119=\360\337\200\275\234\037\224\275\022f\014\276r\2608\275\226Og=\027\355\010>#7\025\275\276\354\240=\230\260\032\276\307\037k\274\263H\253\275\254\210K>\316+\317=\036\360\207\274$\003\237\275Q0\375\275\336\006<\276\321\244>\275,/\010\274\330\037(=%\267@;\226\021\247\274\254y\206<e\361\272\275}\017$\275ZA\270\275\211\263E=\374\021m=&H\265=d\000\324\275T\337\333<\201\261\250;\356\364~\275i\216\377<\rX\254\273\252\315\342\275[\224$>\024\217\334<\274A\002>\263\026\003\275\000!V>\347\204R>\246\r]=\000\201\005\273Q\310\340\274\226\215\277\275\265\370\251\273:\2609>\230\206X\275z\242\032\276G\236\364=\233\364\250=\177\271\246\2756)\205\274S\225\231=T{\225<\036\031\031>\207\317%\274\350g}\272\217\206\324\275{XJ>\036f\351=|\363\325=\303\002\241\275F\317\035\276\014\241\305\275\237%[=\223\3174\276o\032\017\274\206f\025>\332<\331=\317\007O=<(\253=\243\'\t=\363\240\"\275\027\3550=\236\372\037=\310\036\261\275\223\036\205<\344\003\2579\005\241r<Z<&\275<@\220=g\0040>ri\001>\220\023\327\275\007k(<\n\356\252=]\225\311\274\221\005\350\275vv\007\276\261,\241\271\221S\277<\276\377\216\275\363\357\354<;Bk=\326\225\200\275\26732\275\310)\264\274\004mc\275\275\207\023\275\367\333\200<O\273\225=\217\007\206\275\334\301.\276cT+\275\210\211a\275E\365\245\274\032E\213=\3128B\273q=U=D\206\315\274\226{\204\274\001c\305\275}l\002\275\372#\022=\346\355\215\274bnc\275j\302\036\275_\263\252=h[\333\275j:\351\273\035\275P>K\345V=U\232\360\27493c\275\304\226Q<\277\302x\276\226\206\262\275\000\230H\276-\264!=\014\005V\275\021\2100\275\372@@\276z\013M\276wJ\242\275\344\252\323\274U\224\017>\250\013\31496X;:\252@+\275\240*\346=g\231\034>\340Y\317\274\023\307\355\274\220\315\331=\254\261e\274\365\354\241<\240\272\244=\316\245V>\210\242D\273\276\357\"\275\031\241)\276d<\214=j\303\233\274B\215a\275\307\021\375<\250\220\236\275\350\007\215\275:IK=\376.\246\2727\335\255<\307\320\233\275d\357\027>5\361B\276\344r\351=\343\322\034=Ll8\276\r\001\235\274N\337|=z\361\025\276\314\'2<\2337J=\333\257\205=T\237E=\027\024\r\275(\264\032>\247k\361;\370\212\206\274C\316:>\204X\237=\273\2728<\356\331\261=\021\270\332<\216*\335=2\361\267=\241\364\036\276Hd\335=\010\024\231=\371\342\330\275W\377b;?>0>3o\271\2744\200Q\275`\273\003;68\374\273\236\333\205=]\003\\\276\000g\227=\312x0:%i;9W\021\030>\344\035\002=\260t1>S*\215\275\367o\033\276\230\322\022\275\313\2057\275\271o\365\274\316\370\024=\022\360\376=\006+\275=+\036\t\276\220\006L\275va[\275&\003d=\202\263\206=i\266n\275\250\300\215=RB0<\333\251!>K\2005=\376a5=\250d\301\275\016\316\324\275\243\245\351\275\317{8\274\013\260h\275\313/\266<\262\266(\275\007U,\275\346.i>\027\034\240<\010O\236\274\365S\014>F\347!=\365J\327\274\036-Y=#\264\251<\351])\275&X6\276Q\202,>\251\251p<5\2162\2754\341`=xT\310\275\3728\211\275\333w\303\275RA\236=2\206^\275\356\203\007>\302\277f\274Z\t#\276\021\210B=\343\257\217\275\312\030\267<\270\305\227:4\337\214=<6#\276H\321\035\275_\236\361=\036\310)\276H\276\367=K\330\261\275@#\366<\2350\254\275\306U\244<\311\227\025\2764\2616>\356\345l\275n\244\t\273\001\324K>\340G\222\274\226=\236<n=\">p\326\334<\237\320\242\274\375\030\314=\324\016\032=SW\252\274ve\025\276@\234\326\272#\256!\276Rv>\275\226\013\n<\374h\203\275J\023\275=\274\361G=\021M\215=\r\206\333\274\2304+\275^\366\027=\377\330\272=RFc=\024\273\234<\375\006V<y \010=|\331\"\276\004\315\323\274\274r\203\275\0328\245=\371\220b\275\005\023\344=U\234\336\2755\206\276\274<\377\204\274\324\253\310=\220\217\350=\005\334\235=8\016)\274{\001\027=\343%4=\257{\310=\224-5\276rF~\275F\367K\275\0045)>\225\236\225\275?%\231=\277iG\276\345\372W\275Q\257a\275\205\346\027\276\220~\037\275\021\235a\276\306k\253=\0072\202\275\203\005\002>\021X\013\276\245\321\031\275\332\017\007\273xj\260=\300b\020>;\027\212=\364\324g=8\001\265<\221\242]=\2237\320=\267\206\026\275\312\341+\276MC\333\274\221D6\275k\037\242\275{\273\346<\211\373\224<\330X\200<Q\221\376\274\235\\B>\274v\030\275\372\'\250<\002\026^;Dt\023>e\334\364=\000\252D>\001\301\210\274q\343\246\275\257\212/\275\000\221P>\244\204\006\276\025!N=, \307=\362\362\n\275:\342Q\276(\335\262=(\360\325=\315\016\216<\346\222\205\276_\277\261\275\352\253\253=\210>b<\227x\207\275\3023W\275\257\305\256<!L-\276\342a\n=m\337\233=p}\265\275m\240\001\275tM\020\276\367(\211\276\326.\373=\244;\231:\213\237 >\267\231V\276\312_5>,m\221=\363\246J\275\344\247\210=\r\207\375\274Nj,\275\254\017\n>+q\370\275\314\335\371\274\366\025\003;\273\007:\275\223\342;>\342y\215<\\\336\004\275\355\021\243=\347eN>Z\232]\275zu\'>)\361\004\276\222ph\275u\367\215=.\026\036=\301\211\300=M\243\201>\257\265\274\275M\226d=\020*,=\2431\322\275%\001\t\276_st\274.\340\370\275\014\364\025\275b\021]\273\023\227r\275\024\223`>\3644S\275gO~\275q\001\206<,6%>\013\256\206\275M\230\000>\350\303\235=IE\016>\321\247\341<\271\311H\276\373\373G<Dz\t\276^\312\004;\332:\216\275\231\363V>\264\355\363=\313\375\364=_\007\013>U\261\234\275\303\306\215=\357\377\232\275\273\014I\275\374\372g\275m\206\374;\372Z\206=?^\022\275\361(3\275T\003\217<f\325\353\273\327bT\275\237\265J\276C\r\215=\007\316\353;\255\0377=W\312\310;\316\333\332\275\022\261b\275\030\311\315=-\256%=)\313K\273\330}\227;z\336~<\002\265\205\273R\251L\276\314\230\325=FM\002>\315\336\032=\353fG\275\271\354\273\273\242\3176\275\205\2643\276V;\273<\210T\302\275#\033s=\263\340\373\272\202\033\365=\235\315\360\275g\177\'>\000\';\275\245\211\245\275\324i}=\224S\305\275\336\326\303=\364\330\374=\210;\315=?\254\324=\323\362\224\275\344\325\346=O\202\340=\210\366\312\274\304+,=+\350+\276uP\241=\261;\224\275(\031\204<Z\367k\274\307\346\227\275\241#)\276\254\366\254;*\252\227<\302\003\306\274GH#\276|\346&\275\2349\356\275\353\340*=?\351\306=\007B@=\212\357\273=u+&>\223\326?\276\341I3;\211\365\220=\251\356\031=\024\223 \275\232C\235<,\351\267\275|\020]\275\345{g=\336\343\250>\263g\244\275n}\263\274\247E\207\275w\014\332\275P\274e=\027z)>(\367\362: \236\212\275\263@:=\257L\227=\356\365\207=\342\375\217\273\221f\355\275T\311\256\275\234h:\276\375|8\275\277\2761\275\\\301\364\275\323\245\241\276\\\325\224>\212\244\n=G\216\007\274\370\350\003\275)\277(\276\020\211\202=\305f\262\275/r\243\275c\r?=\362\323\007>\227$\353<\244\274\034>U\265\350\274\314{\205=?\270\t=8(\035=\004;\364\275\335w)>\2734w=H=\032\275\235\007\270=\300J<\276\225>p<\277o\315\274|3\200\275\025\3169\275f\227\347\275J\324s=\031\353q>\375V\346=\273\370\216\275~\325Z=s\2661\276\376\274\320;\n\027\277=9\335\303\275Ao\002\276\007\376\005>q\371\350=\347\017L\276\242\266\021\276[U\242\275\307o\037>%,V\274\242\232h<B\022\272<\235N\r\275C8\020>\350\376->\245<\242=\345\336\242=;\360\311=[I\311\274\262\352\037>\177\t\352<\314\240z=\340\252\272=\370\375\350\275\034\243\367<\032)*\275\366\017-\275\303\3757=\271:\216<\232P\241=\264\336\236<\205 \271=&\240\345\275}\221\217\274\'\216Y>5\313\3469\3733u\275\342U\242<\006\317\210=\270\354\'\276\273\327\231\275#5\326<\325\277\225\275A\024\200\275(*A\276\337\305\264<\314s\373\275\017RY\276\236\rZ=%\230\020\274\364D\205<\323N\350=\263qG\275C\025\200\274\213/\\>\304\327\263\275\302^\017=@\003a=w\223\216=+RG\274\001\201.\276\256\331\256=\037\302b=\013\002\243\274}\262\353\275\355x\024>fY\247\275\330\304i\274\361\335\211=\037[\271<\234\337L>w\017}<\367\322\037\275\232\216\016>\0009`=L(H>g\021=\276\2573k=\227\212\201=\212\230\027\276\302d\223\275Ep\267<\364(!>\302\3645\274\014\231\340\275\\\007\001=\273\262\006\274\034\250\376=\352\240\204<4\346\236\275\014\021\t\276\310\013\241=.\025\010=\2332\024>F\035\253:g\016+\276\323\2619\275@{\013<=R\240\275\313\003\306=\233\250\305\276\033\236\300=\262\212\317\275YO\316=vp\220\274\271\025Q\275\344\036\327=e\323\305\274\324\311~=\254\317\332\273\240\371#\276\205k\006=\277\325e\274\344\236n\275\277\262\206\275\243\250^=\300\273\257\275\2048{<\333\232\374\274\007\214\035\275\'\362\037=\016\312\026=\304\000\212<\313\010t\276\375\211\203\274\2023\313<\266\367`=\361\311}\271\351h\360=\372s@\275\275\241G\276 dU=\316\220\023\276\243|\271=*\222\360\274)\353\031\276\355\342\200<w=\210=\026\022\362\275\177J\277=\377\363\232=\326_G\274w\266L>!\215Y\275/\332!\276z\215\206=\t}\035>>\243\352\274\212\270\344\274p\000\337\275\304a\244\275O*\227=\247\234\033<\024\222\343=\003\200x\274\002c\375<\221\020\276\275\264\351\342\274\006Wi>\026p\274=\2434J\275\307Jk>\021\023\246\275\254K]=V\315\357\275\232\350\034\276\220\310\204=\263\274\030\276A#\016\275=\332\022\276\261S\031\275XE%\275\241H<\275\033\221q\275\026\353&\275\035)\307\274\376~\322=\031\020.\276\004e{\275\302\006\t>F3\005\276w\007f\276\t>\026>e\253\"\275\214\322\361;\036\024\274\274\254\355i\275\252\303R\275=\305I\274\327:\226\274z8Y\275\244U\373=\0014\032\275\003\264\002\276\016Z==\324HC\276F\343\010\275\224,\002>\371]\254=&\302\207=\335\005\253=\235J\323<~\027\004\276\244\354\333=\246aT\274\376\300\332\275\033k\306\275\364h\334\275\024\017\377\275\002:4\2745i\256<z\254\005=1\336\352\274(\371<=z\211\274\274\242\207\310<j\235.;\343!\345=\001\311V\275`\035\260\275cIB\276{\200h;\021\222\223<\2052U>\261\014P>\374*\'>\325\016\300=\363\227\231;Q\277\267\275\215\217\005\276\325\301\025=i)\247\275kh\216\274\357\371\214\275u\322@\275\244\337\371\274\364\300\224=\274Y?\275\346a\323\275\366(D>\275\014$=\365pn<\023b\3558k\242\365\275I5\340<6\3046>\227[l=w\317\213=\266\033\363\274qu%\276\224\335=\276%[C=\030\021\206=f\261\177\275\"\243\262<\353+/\275\275a =\376}\232<Vy\016\276v\206\020\273\320\337\257=3\014\230<1\314{\274:E\310\274\035\364\233\275{aS<9\316\030>P,]=~G\033=\262\317\331<[\037\216\275i\037{=s\300\312\275`\023\312=f\225\241\273\223X\244\275\313@\346==\332\023\275L\331\221\2757(Y=>J\202\275\236\264k=\004\237\263=i\373W\276\322\2056>\225\006r=\226\\d>\364\"\215\275\3103y\274\300\300\242\275\022\023\330\275\322\206[\276i\365\200=N\016c\276\030\333z=\243\365\271=\"\232x=%\223^\276bf(;\251+\226\275J\036m\274\224:\313\275\372}\205=\240@\240=^\021\362=\275\312x:\246\314=\276\266\271\005;K\033%>Z]\276=\327Q\235<\370\212\374;\036W\233\275\3651\270\275\355[|=\241\243$>7\225\215\275\000\275x\275\205\277\003\276\225F\014\275\\\010\321<\346\260d=\262x\025\273\323y\251\275U\206\260=\3256\344\275k\216\343=XM\312=f\022t\274O\021\340=D\221\022\276\224S%= \327\244:O\036?=\325%[\275F\352\000=k\220\226\276\025s\347=!\3672=h\232\227\275\033e\021=3a\376\275\tt\261=$D\347\273\312_m<\3243\361\273\004P\226<(5\217=$i\002\276:\245\226\275\006\021\341=`\325\247\2713\236a\274\013\375\205=\370z\177=\221:\022>\275\227\313=\316\366p\275Kl\371\275i^\333=\267)\277=b\223\003\276\266\376\316\275\217\315\271\275\3046\r\275GA=<\253j\001=U\032\254\275\321\001\314\275\024\021\271\275\'Q\322\275\255O(\276\243>\263=A\271i=\366\364#\274\312\311+=\031\346\266=%Q\017\276\003T\247=\2001\251=\177[\024\276\3358\007\275\257\2649=\364\t#>\307\017\034=)\242\340\274\020!h\274\370\026\033\273\371\334\333\275\003\n\r\276\217\232)\275\201\327\343=\0062%;\201\344\214\275\361\363!\272\242\t\321\275\r.[=\253\022%\276qG\365=G\333\337\273\353\005\323\275\222N\213<\037\276\014\275\364\322t\275\312\376\210=43\252\275\371%o\276\227\354\353<\350\377\252<\342\310\007\276r\016&=\235\256\352\275\216x\003>\253u\346<\226.\276;{e\005>\224\354\346\275\253\t\034=\321\310\352=\306\331\026\275\332` >t1\337<N\333\360<\316\222\031=\320\201\257\274q\315\375=\237\023[=\263\362\233\275\324\031\224\2734\251\354\273\321\222\226\275t\351\266=\351k\247=?\016\"=\321,\276;V\016\212\275wA\224=\362\250\363<\376\353\315=\304+\031\276!2\376=\255\t\231\275\234\325,<\021\020/\275\235k\234\274M<\031<\207\211+<U^ =\256\247\261\275q\0275\275\271\334\016\275\016\305?\275\250\305\245\276%\263L>\245N+=\321su\275\2607\314=jI\004=\275d\325\274P\225\r\276\276m\327\274\261\336\321=\311\036\256\275\332\"\225\275t\035\010>Sw\236\2759\260K\275\224\274\376\275n\233\267\275\227\\\367\274G\251\037\276R\022\026\276B@2\274U\372\225\274\243[\230=l\235\351\275\350\"\005>p~\314\274\007p\341\275\221d\002\276\265\251\253=\230M^\275\221\020\227\275\310\345\242=\325\026y\276l$\r<7?\261\275\261~\243=\006\266\344\274\302b\233=^\312\322<\265\301\200=!E\376=\001\325\022\276+~`\274\324p\225<F\265*>\203[\002>\260Z\205\275\362 \007\276{`\">Z{\252</R\007\276sq\023=\027\310\371<&_\014\276\004\025\366<\303c\331=R%+\276\361a\201\275gL\254\275\227\361\260;2\374v=\363!o=\236\221\034=\326v{=,:5\275\251vW\275\237D\323\274\340O\204=\024/]\276\301\260\006\274\350\226F=\020\211U=|\336\206=\201_\267=b\010\363\272^p \275\205\262\037=C\035P=p\315\311\272W\'?\276n\252\273\275\3009?\275\002D\014=\257\017\323\275Gs >L\343\023\275N\315\232=\374\026R<C\035\026=\026AS=L]\266=\236\026\334<=W\305=!.Z\273\034\316\205\274_\242\274\275\010\376\304<\230\006\355=\010\260\344=+\022\327\274s\201\364\274\251\330\236<(\344\302=\263\374\341<a\341\217=:\235#=\010&\323\273\225\036\364=\233\300\320<\200\236\003=\001^\236\275\237\270\030\276&I\347=\335\027\254\274W\223\021=\351qq=c\030\276=y\354\027\275\311\311)\276c\202\336\273G\211\316\275-f\273\274\242\275X\276\246h\035=; )\275-Y\300\275\3537&\276\361\354\243<\326`\200\274\227\014\n=I\316\371\274\033\325\330\275\375\255\246\274\223\2723\275\203\231f<\246\213;\275\364Z\315<\177o7\275\n\342\326=S(\036=X\324\271\275\222m\253\274\335q\303\275\232\344\214\275\235j\362<\263`u=~\203\352=\373-\023=\243\350\212\275\335hb=\035g\313=\303G\345=pt\314\274\007\324\026>3rm\275J\355:=\204\252g<\361\367D\274(\365\212=\004\344F\276u\304\236\275\321\\4=\353\356\251\274@{\206<\363\353\242\272Li\361=\322\246\242\275\010,\204\275!V\334\275P_\215=~\001\306\275\273>\344<\231\360\007\275\327\367\303=\037\351\340=\325\023;>\\\330z;\3504\367\275s*K\275\202k\204\275\214\350\020<3,@=v9\030=\030\346C\276\341\303h=MJ\022\275\236\273f=}7\017<\007bG\275!\014U>\220\367D>\230\272\262\274\361\355\"\274;\177\023\275\201M.\276/V\212=\001\357G\275Y\0175\2759(\226=hH2\2768\354\032\276\300\303\331<8\345\267\275\357\360\327<\324o\n\276\323eQ=\273\022\023=\230*\304\274u>(=\260p`=\3126#\275\301~*\275\023A\222=K64\275.BQ=\342\213\'\276\323\032\375\274\345\244\002<\356\270\273=\017nt=\003\367\023\274\226\321\023=\354\310\225\275\256(E>A\260\371\275\262\250\\\274F\213 >\202y\351=bW\235=\240O\275\275\247FZ\2751R\027=vO\363;\214\306\321=~\300\312\275CV8=\n\200\004>x\272_\274\"\227\367=\372m\242\274\331\245|<\362(B>\273\325\322<c\304\335\275x\205\275\274B\003\'=z\002q\275\033w\217\274\377{\326=-\017-\276y\374\360=\345\270\201\273\202\216\251\275O\245\214\275\274J(>&1X=q~|=\240<\242\275\2360\204\276I\030:\276\303\023\t\275\253\r\241=\021tp=t\353y\275\304\316B=\243F\203\275\375\370c<r\347\203<M\272\225\275\226\014\346\275\260s\306\274\332\264\024\274r\344\021\276\330+\014<f\010\000\275\017T7\275\365\347E;\367n#=\237H%<\236\224\003=\323\270\361=A\316\312\275\314\254\021\276\3359\261\275\360\355\251\275/;\335=\315\320\202\275v\2755=\022\354\n\276\375\370\020>\277\027n\275z{\324=U\363Q\276\373GR>\237\023i= \237\314\275\003\304\230<\267\236\307;\307N\243\275\224\347\317;D\247\177<\255\261\344\275\032)\204\275\265\036G\274\243\037\031\276vv_=\363\307l=d%.\275\357\216\303<\215Z\356=v/\031=\021\242\335\275\026j4\2736X+=%\332\010<\246j\037>n&\326=\356\352\227\275\327\326\256;\030a\264<\365\240\021\276\005\316\024>\223Z9\275\017\036k\275i\003\372=\253O\3759\305p\275\275l`R\275\\\207\024>\376H3=A\347\277=f\273\026\276SV\265\275\310\204\220<\247zV;\236Vh\275\365~\227<.\334K\275\205|f\275\375.\013\275\365y8\275O.C\275\316\243\322=Ed\243\274\240Z\256\275\177d\007\276\336\352\306=\001\337\376=3\020\006;5\271\243<l\327\322\275#\035i\274\017nb\275\036\0364\275\310\210\326\2745k\355\272\200\256\305\275\235\270\246<\2757.<\2673\351\274u\367\\\276\202\221,\276rvi;m\262\320=v\014e\275\300\266:=+\021U\275\3561]=8\244\223\275\023@(>\211\365\362\2750u\001>\025\'\016\276\307\214\346<\354(j=\216\033\021=\327\232\027\276LF8>\010\272\247\274\315\306\027\276q\252\006\275\2644\214<\024\353(;\300\017\307=\227yY\275\335=\'\276X\364N<\225\014\216=[\r9\275\202_\323\273&\032\251\273\014\366\037\276Q\265p=\324\314W\276N\"\036=\221\267\347\274/\225\374\274\336\025}\273\302\201\303<\216<\327\275\317f\300=vq\271\275\222\301\t=\260\332?\275^X\263\275\331^\266=\220\r\034\275r\250\r=\373(\010\275.E\\=\014W\244\275q\030\307<\372\367\000>\375\3205=\374\271\213\275\371\0242>R\304z=\247k\351=ub\212\274\362\330\241\275F\"\024\276\000s6\276\235\270\256\274\223G\"\275\331}\203\275H3\020=\t\231+\2754Y\020=\33108=4\020\311==\335h>~^!=\356JK\275\322\'\t\276\n\024\231\275\314G\337\274\364\224\010\276\377z\334\275D\2757\276\324]\364\273\024r\262\275\226\214\271\274\322#\000>#X\301<\375\260\021=\362WA\275\235\351A=\341\311\002\276\277\371\275\275\\\3665=\313\201\030\276\253\260\346=R\013\235\274XM\013\275l\345\332<y+$=6\"\303\274X\024\004>\306\205j=5/\311\275\372\016\307=\020\276:>\3325\317=\354+\340\275:\315\275=\273)\312:\332\341\267\275W\341\275;\255\300\370\274\273%\024=\004W\234\273\025\033Z=\273\026|=zR\"><WN\275\235}\027=\354%\233=\233,\031\276\036-\r<\354x>>\215\270\203=>A\034>\"\207?\274\252\020\031=J\017\013\275d#\350\275+\233\322=\n\254I\276\226\020\376\274\330\326\305\271\243\230\000>t\242\"\275l\267\023\275\241W\017<>c\340<\272X\272\272[\302<>\250\014\230=\367\277\264\2759l\213=\362\225\305\275\0262\214\275\013\257\243=\021\212\313\275d\n\226\274\201\035\213;\334\321\345<\262\024N=9\325\376;\274\323\214=\210dC>\232L\t\276\270dj\275d.h<\315\224[\275/\027L\275\310\032\202=(h[;\347t\360\273X\t\214=?\035i\274!\220\023=X\000<\275\3262\205\275\215bL>\272+\267=G\000\022=\321\016D\275\037T\265=\3009R=\010Y\363<\222@\242=\037|\330\275s3.=#\343\316\275\002\266H\275\021o\213<\376\241(>\370\365\226=\275\330\302=\240X\024=\255\005)\274]\004\251=\205z\334=\233G\344<Z\027\305=\326^\302\275\273|(>\031\236\341\274x\270c=\3744V\274V\037<\275\276/\333=d\275\264<\377\037w\275\240\240\356\275\002S\276=D\013\000<\\T\233\275\233\255\202=\340Jj=\327\327U\274O\300\234=\277f\034>\333\331\345\272\330g\270<\256n\030>\031A\r=\352U\002\276\275\363B\275\237\337\367\274\221\243\250=\320r\367<\236\304\205>A\003\022>z*\311=\207f\345=\250\242\302=^z\206=\257@\351\275\222\373\006=\372\324o\274\336\276\204=P\n,=\017\276*\276\274\016\t>\177\336\300\275\212\232\006\276IT\320<\004Pf\276o\360\366\274]\3729\275\251\225\037>N\320L>\251qG=H\235\316\275\323c\033\274]\372\360=\022s\007\274\346\251\210\2760\260\317;\0031\037=~\036$\276\302w\321\275\313o\032=w\214\214<\300o\256\274\243\206(>.\226#>\335$\370;L \273<!\372\216=;\275q;\333BO=\241p\034<M\310C\275[\241\"<Tn\013\276\013\332t=\253\037\377<\0140\277;\357\204I;\2506\251\274\341\223,=\270D\245<4\312{<M\033{\274)\321*>\320 \310=}TR=c\237 \276\370%\007<\357\331\211\274\226\310\036>\331e\213\275Az\222\2759\234\020\276\010C\222=\275y\326\275\010\264+:h)\202=\204\2523\275\261\343\275=\353\316h=\262)\202\275\203\244\201<M\343^\276\031$F\276\230\342\210\275J\243\222\275\000\210\370\275\221E}\275dp\234:\205\373Y=\361\246\204:\207{~\2759\3112\275\264\3152\274\005\315\241\275\311\360\360\275\301f+\276\203\367\237\274YB\203\275\251x+\276\214\327\277<\263b_<>\026>=\232\362\323\273B\312]\2769\0031\275\316\351\026\275\326e-\276\227A\316<h\322\236\275]0\223:\007\340\347\275\310\317a=\236-y=2\272\243\275\345\240\r\274Iq\202=\334\034\356\275\006\301\330\275\244.W\275r\260\226\275>\022\236=\265\024\277<u\366\032\276/\213I\274j[\203\275!\030v\275Af\016\276#\226\232<q\360\273=\0338!>8L\363\273\214\177\255\275A\177\315;S\023h=\347\212*=\004\314\335<\232\326\224\274az\354\274\206\254\373\275D\365\036>rK\220\275\260\373\200\276\203\024->\315K\025\2766\275\251\274\202L\237=w\364>\276\0035%=\313\344$\276\240r1;\227\354\230:\3308\211=\346\234\206\275\201\2764\275)\303\036=\2341C=\237@\333=\030\352\020\275QP]<\3202\213=\377\205\336\2741\247\200=\210\374\'\275x\340R\276u\215\001\275\201\216\322\275@\356\232\275\033l_\2751\313\220\275\254\377\343\275\205\033\010\275\242\3470\275y\n\353\273~\257%\275\027\257\342<\032\265\021\275\001\331\251\276\216\330m=}\320\t<\356\nU\276@\256\262=\020\353!=\017\310\344\274\2427\003\275k\252\336;\323\245\355=;\347l\275\007F\243\273\020\352\213<Tw\017>P]\260\275\364,\346<\261V\207=\004\037+\274$CB>?\274p\275N\337\205\275=\2361>\234\006]\275\365zm=|`|\274C\014\245=8\007\n=\227f\272\275l!\324\275I\226R\275:\"\027\275\320\n\356=\252\371\034=\255\373\030\276\221/C<\010\223\271\275!\374\314\274\004\314\"\273G\237\326\2759\306<\272\306\345i\276\212\0016\276\310><\275\021\027\311=\254\356\000\276?\205\307\274;<\325<\373\240\245\275|W\252=\252[8\276hk\336\275\353]\355=\306\004\223=O\240\251<h\260Q\276h\035\220\275\275\331\254=\262\3173\276W\302\374=(5P;vV\035\276\t\350\211\274\354\345\322=:\343\237<|+v<}\335\257\275\3139\301<9S\312<\330w\222=\215\330\022\276\336z\010=}<\237\275[\241\207\275\260\344\305=\311Q\225\275N\375r=\022\253z=\241b\205\275\314\343B\275\326\266G\276\007\327\001=\357\030\373\275\336\031\032=U)\373\275g\0030<\256\252<\275\030\035\377\274m%\026>,\013\305\275F!\351\274\017 \216=\2751x\275\260\217\321\275a@\032\275N\271\316\275@&A\275<\374q\275$\226\001\274B\332_\275\310\0017>$\231\330=\223\020\311=n$\014=/\324\000\274?d\212=7\333\242=\347`\220=\022i\343=X\\\016=\357Z\315\275\2775\033\276\241\"\271=U\342t<\rT\325\274\206\206\260\275sk\261<\005\256\272=\241\r\327\275\204\341\033>)\337\365\275\001\334L=\275\014C>#\006\264=_\336\202=R\353\267<:x\037\275 \006\030=$\377\323=Y\'C\275\367\217q\276\272\312\300<m\367R=\372Dn=\005x\376\275]\227\361\273\342\321\330\275H\223o\275\323\217\301\275\310\250\007>\200\305\014\276>U\264\274\370\363\250\275\030W\270\275Vk\301\275\3661\027>*\354\027=N\004\331=4\034\262\275\300\347\265=\216Dc\275m!\236\274%X8\275X\001E\275\316,\366=\357\320*=1\004\027\276F\017_\275\351\215\254=\005\225\276\275KB[=\364\014\336=b?\240\275\324\344\034>\271\242\036\276;O{\275\325%8\276+\2463>\340\363\363\275\311\265\371<\212(R\274\217\375L=(s\020>\304\030\021>^{\226\2755\340(\273\010hR>\2051\030>\230\356\236\2755,>>\204E\251\275\030\370\035\275Fy\"\275\014\t%\276\312\226\247=\206O\267=S\362\326\274(yJ>ke\210=\030\360}\275nG\'\275\332&5>\314.\t>S\346\316;\326\"\337;4\366*=HR(>\226\3404=sf{\274*\200\'\274\210\010\023\2741p\035>\234\321\247\273\363\220\243\273\316\306\204\275\341\'V\275\251Y<\274\227Y\312;\333\224\031=2\370\003\276\360f\000\276l\210\027>A\234Y>\240\261\246<\335\360\300= :\010\276hU\236=9W\351\2751\220\007=\224\233\317=\rW =\362\177\355\2750Sk\275\270Xl\272\325\260\270<O^\204<-:M=g\034\001>\300\371\226=~K\371\272\rv\226\275\210\213\014>\241\n\222=\005\352\330;\020\244\361;22\342< \3063\275\026\351x\275\271\324\276=\0306\246\275\211\026\016<\241\344\365\275HE\271=M.6\275\362-k=\334\212\006\275g\307\035\276`\312\223\275\331a\342=X\004\202=~\035\324\275w\272\002>&\276B=R\241\372\275LN\031<\376d\027\276\001\310\271=u.\223\275\000\223\314\275\037q$\275\317V\200>0\356c\2763\"!>\226!2\275r\030v=A`c\276*O\321\275Vi\034=w\023\327=\221\177\352;\"=\312:\304\244\000\275IR\367\275\361\353\034=\230\036?=+\3464=\013r\246=H\250\226=\027\022\205<\034\'\260=c\006~\274:\266\025>\361%\245=\006\247\204\273H\334\013>\232\031\264=P_+=z\365\204\275\376\"\034\275T\003*=\320f4\274\233{\343<\220hS\272\007\356\241\274\337y%=(\277\220\275\351\372\210=]\331\r\275\355\300\360=P\332<=\300\037\005\275\211\374\035>n\247e\273\te,\275\016\257\016\276&\212\010\276\344\354\367\275\231=u>m\226\253\275k\261u=~\347\311=O\2355=\231\222\343=\267\362\t>w\215/\275\225n\270\274\313\\j=\3774\326\27524\262\274\2171\217=\351\312\263\275\27736\276\326<\004\275\374m<\276\202\351\007\27451%\275\353\034\261=\014\211B>\221\353\271<\354\332%\276\362f\222=\3501\032<\323f\264=\326x\224=\256YV\275\2542\304=\223\005\023\276\372\"\226=\213\310\204<\226\261D=\273\350\207=b\320m=\325/\256\275\0247\">o\341\325\275\223,\257<\t\017\250\275\317f(\276\363\014\306=I\2612=\264\\T\274e\3603=\334V\207=\033\250\351\274\331\316\254<\333l\212=\243z\237\273\265\255\006\274\364\200_=\2442\031>\313\226\360\275\236\302\232\273\275}R\275\213\237\325\275(d\242=\242\005?\276\215\200|<\224\301\037\275+\214-\275\203\254D=a\363\003=\344\245\343\275\370\2546=\347kN<\326\320\230\275\365#n\274\301\024\276\274\006w\212\275F\272b=\2136T\276\025I\310=Rd\304\272X\315\277\275\221\037M=\033SF>\014\335\227<\275\336\223=q\235\260\274&9\302=\237\355\036\272\261\335R\275w\nV=\344\224\350\275\r\320\307<\301$\205\275i\' \275\336\271b\275\037J\327;2\253\201\2741\365\261=\261\333\315<\240\003\017>i\004\207=\334\024/\274\255=\005<\366O\241=\003\321=\276\320_\027>v\200\213=\335t\252\275\3049\310\273\026\232\037\272\254\372h\276*L\264=\024\302m=\344s\204\274 \212\031\275\276`D\276\010\002\226=*c!\275U\257\314\275\204\263\351;;p\000<\3538\376\274\356B\365=\224\225\323\275(\227\326\274}\330\330=V+\001\276\222\365\264=9$=\274\213\2448=\014Y\305<\363\306K>{`\343=\262\224]<H\303\273\275\266\030\201\275EF\227=%/\257=\014\"\035>q\212\031\275\027\321\251<\264\364\350\275\361(A<0\333\224\275f\304\257\275k\220J<\000\3303>z\375\330<\303(\216\274n\307\\\275\224\317\266;F\2603\275m$*=\277&\211\275\340\374;\276-\354\201;d\236c\275/\255\257\275\0278\214\274H9*>\363\335H>\235;\036\276v)\001<\274\374\322<\203\326p\274\364\025\327\274h\021\365\274\252$_=\227\"\331;\273\354\267\274\256\223\331\275y\232\344\275\270\017p=TP\211\275\243\027\267\274x\257\201=\013\313;>\2637v\275\240\310\303=@\001\220\275 \377\322=\257u\005>{\222\205=H\376\302\2747\207\203=\t}\216=\212z\017>z\216\010\274\305\005P\276\207+\326=\275z\230\275=w8\275\240k\331\274\201\217\n\276\330\313\202=XZ\334<\344\334\r\275\nl ;t\014\342=\337\234U\276\260\201\204\274\335\376\267\275\255S\026>!\364\240\275Z,\037\276\347\327\276=\315\270\360<\247\374\r=\267\236#\276D\231\377\275\347G\365\275Y`\225\275V\332\373\274\312\227\200\276\202\332\013=\330\304\247\275?\311A\274\226%?\2769/O>\355\264L<\306\213\317=\235!<=\022\211\322\275\316zs\274\243WG\275\350#\372=m\215g\275M\257\322<41@=9\257\356\274Y\252\013\275\357\322_<\322\253\270>\214\220p\276\367\034\030>v\301\224\275\257\321\177>\311\227\020<\253^b<u\216l\275@\037Q>\353\306`:\026\202\021>\341\333\231;\211j\316=\220{\263\275fI\367<\2050\010>\225\350\035=\252\243(>\275e\237\275\241\213\325<W\232\020\275Ea>\276\2421\013\273vnM\274\321|8=\367r\353\275V:+\275\341\013N=\275\370l=\266=\301\275\223\'\215\275\217\202p\275\352^\222=\371^a\275\213\276\320\275\\p\014\275-=\020\276[\266\267=@`Y\275J\010\016\276\242\354\232=J0A=\260j\n>\177O\265=\333\244r=\216\2328\275\357u\026\274\004\212\343\274M\356\341\275\362\362\321\275\231\005\014>\357*\026\275\233\272H\275\325\355\022\276)\036\200\275u\255/\275\260\001\034\276U\371E>|\247\364<Q\033\216=\371C\275=\004\230`=\004\341\212=\017\362\025\276QHT=\361\177\177=\024\316\334=\323\254,=\361s\337=\352\221c\275\212\325\026\275\225\206\334=\261\'X\275\023\337\202\274\311\3447\276\251s\271\275\304\364\241<\264\341\264\274\310\2662>f\004\362\273\024\001\002>\014\275\336\275Rq\257=\032\340\255\274L\223\220\275DA\320\275!3\304\274\206\004\324=\307\275%\275!\331\326<L\322>>\332\030P\276\316mT\275\177f\325\274\350\260[=\274.\260<\241\326\217:\371N\237\275\216\252P>\030M\266\275\003\003\275\271#\221\305;cZ.\275hHD<\t\340\255\275\275\221\023\276\231\340\327\275v\\\005\2740\003b<\221\306\177\275M\206k\275\271\211\230<\014Qy<\243m\014>\321,\347\275\373\224Q\276c)\027\275\213\347F=\362\260f<\032\031\021\275W\260\224<[.\203=7\260\205=ol\227<\376\034\027=\2702\353\275\273\331\016\275A\036\275\275S\350\306=\326co=\020/\321<\377;A\276\333H\343\275`^\217=M\255\372=\322\371\363\275\035(o\2759(\357\275\207\031\374\274\301\346\316\2752\304\222<\245\235\361\275\321\324\004\276\205<r=\374\215\337\275\000\350\274\275\322\355\010\276\002Qn\275\355v\231<\323\325=<\024\035\016\275z\265&\276\001\016|=&\247\332<\260\236\034>\260\334\342=vc)\275<\372\034\2768\002\256=\307\251\022\275E\253\332=-^\241<\010\267y=\201\213\202\276\353\345\311\275(d\265\273r&\231\275\364E\037>6\003\000=\25590\273\311\005\333<\274\246q\276\337\331x=\322L\323=O\013\230=*\345\031\276\")\276=\200\247\252=v\222\266\275\316\273\005\276\250\030\330=\314}\272<\243\345 =\350\335*<4\204\366\2744r/\276\034\377\361\275\220&\231\275\332NP\275\034\335\005>\351[\335<\261Z\246=\342D\024>\233\253\273\275\330\225\262<\024\236\302=\353\234-\274\313\220\366\275\327F\026\275%J\037=\365\355\372=\272 \304=\264\3325>w\005)\275\317y`>\261\327\237\275\351\357\351<>\356\000\276\211\200\205=>\232\200<\271Dz=$\326\342\273\212\004%\274\003\3567>\340g\345<h\372B\274C\227\230>j\340\324;\326F\221\275\362x\367<\326\016\005\276 k\354\275\222\005\025\276\335\326\240\275\256\263\037\276\362\026\237\275\017\274\234\274\314\301^>\304\300v>\312\261\376:;C\025\276R\236\034\2763\002\303\275\261\365\244=\240a\257=\"\263\212\275\2159\367\273\262\320\340<\342\325L>\371\233\377;\207\261d\275\370\352\336\274\301#\352=\220\207\n\276\265s:\275N\242\257=K9T\276\316\224\361\274\n\216\315\275\253\236\221=\315\021\247\275\013t\332<s8,=\3104p>\0279Z=\200w_\276\301P\324=\031?\261=(\264\"\275\0010\254\274\351!\213\275)\361j<\350u\271<\316k&>w\331\250<\255\036\265\275\235l\303\274\037F~=g\324\244\275cn.>kyA=\325\022[=\273\206?>\010\254+>\242\326\277=\333\337-=\245\366\211\276S\023\025=*\333\306\275\355\n%>\253\366:=\032?\326=\315(9<\235\304\355<\241ah\275\361\300\370;\260[\361=:s\353=\\#\335\275\245\221\257<\360\013Z>\221|O=-\231O\275\226!s<B!\262\275P9\223<h\240\023<t\376\273\275 D\222\275\223\244\025=\345\3574\275k\010\327\275\0171=\2756\266\301\2743*1=-\037\375:\301?\246<\372\267\352\272\024Cd\276\315/P\273I\246\354\274\332\256\304\274(\262\034>;)\215=\006\344C\274\264\003\017\275\367\367\265\275\037\033z\275\2042\010\275\"B\312;S\331>\275\264\304D\275\0378-\276&\205>>\212\257#;\030\261\263\275,O\243\275\005;\036=F\n\313=\006\266A\276\025;\313=\266\264&=.\357\004\274\260\\Y\275)\016<\276\240\374\030=$#\215=\247gC\275 I\221>\253\266G\275\240\334E\275n\345\007=]f\303\275\337QC\276!\321\023\276\364\351\001>y \263=8gu\275\r\223\225\274\335\0238\275>\360\240\275cU\260=\320^\033\275\224.\256=c\223\257\274\362_\023>\325R\214\274\221$\352\275UO\373\275E\003\262=@s\211\275\374D\316<I,c\2755\315\233=c\230\310=K\201\266=\314\252m>\332\246\354\274\203\352\334\275\360Z7>B\021\301\274\364\353\221\273\246\000i\273-U\237=\312\007\315\275n\332E;\260\236\342\272\313w`\275\261v\244=?\347\003>n\027\377=\211m\320<\322\356\016\276b\352.\276\032\211S\275\003\310\030>\341w\036>\356L\323<\257\026\365<\270\376\311<\251\347+>\032\324\233\275\'&\307<\220\234\331\275SO\207>\246\034>\274\205\351\302=\320\301+\276\"\356H=:\267\223=\336\257\331=+q\320\275F\2363>\017\347\346=\373\370\311=\3226\321\274\237\346\212>\331|e\276\026_\203<\203\002\262\2757\343\324=\001\340\242\2752\000\246\275/\353?>c\205\365=\340G\362<\272\221\030=kK\220=\326\245,=)\207+=\2200v<\341U(\275\366\276\004\275\007\234-\275\363p\372=h\3514\276\267\233W\275\361\302c>\266ID\275\237\314\032>\320\023\375\274;-@\276\334\223\215\274[,b=\341\021\003>\222\275\265;\332;$=F\376)\276 \037\005=\3677\215\274u\2433<\301\037\t>u\225\235\275\032\254\201=\266\024m>4\350\003>Yk\027>\357\356\004>\350UP\275\031)_\275@\343\333\275\221\253\201\275e\257\273\275\272\337*\276\371#n=\246&\350\274\272\255\326\275\351\003\335\2758\201\210\275/\302x\275\316=a>/z\252<\325\"\265\274\216bR\274\032Q\267=\340\206\032\275ok\330=\242\007\216\273nj\r\275\333\301\343;\031\247\224<\003IE=\036VV>54P\2767!\235\275\017\236=\275\250\035\202=\266*\035\275\321bz\275\376\t\\=-P\376=\336\236\024=(\002\177=]Ul\2758\305\255\273\256(\200\275~I\020=DX\374=\201\373g\275\007!\273\275K\345\364<\311\2516\276\257\216\361\275\225X\233\274\377\316\177\273\203\310h\275\276\255\273=GZ\207\275\375\257\033>.4\201=\020e\375=\322\276\r\276\'\311(>b\335\276=(\355`\275\007C>><P\206\274\244\3170\276\210R\213=\350HQ\275\332n\351<\331\245X\275\317\323\221;\021\376H;\020&}=\335\032\022\276b\364\020\276w\2057\275S<\320\275\252\035\037\276q\271\000>\251\261\004\276\004\207\236\275d\272Z=r\256c\275\225=i=d2\312=\326e\273\274\265J\033\275\256p\017>v\025\010\276\315\260\323<\300g&\276Ph]=\217\240x\275\336A\006>\002D\251=\0235*\275\0376@\275\345\237\240;J~C\2769\203\246=\327\264==M\307\002\274_\263\317\275\016D}\274I\024\265\275\234\263\031=\272S\261\275\rH\342\275\314\371\220\275CA\034=\225Q\273\273\027\026\353\275\317\317\243\275\376\334\344=Xw\000>\321\261\035\276\301w\277\275\214\360\007>\022\230\316=\250k\027>\347\362,<]\206i\275\210S,\276&Y\257=JF/\276!\274`>\3234\247=o\037a=+H\005>\r#]\275\350\305\347=\370\231\233<E\221e=\023\020\215\275v\0255>I\204`\275\242<\252=\345\307\267=\2704\256\275\245\311]<\022\327\037\276&\214\034=V\300\231\275\246\234\264=\310]0\275\007C\006\274%\020\217\275>/\375\275\342MN=\327\302\001\276\227\225\031\276\225o\325\274G\003\251=\3532\303\273\344\014o=\301\230=<\246s0=3<\334\275I\264\313=\232-\324=\264u\237\273NO\305\275u\267\037=\363W\253=z~R<\276H2\276\210(\034<>\321\367\275o\003M\275%\016\t=\351.\030\275[\362\032\275\314n\347<\355R\247=\372\263\201=\242a\265\275\037\027;<~\307\376\274w\225Y\276\217 \255=\'0X=\251\226\t\275^\314\007\276m\371M\276\021z\274=\231\204\271\275{v\'\274f\005\300\275\2312\003=\343\323\022\276\264\033U\274nPW\2760U`>\376q\247<\254(\274=}\004+>\247\016\002\276qEb=\021\312\320<\021\252\201=\365\250\226=\361\n\343=SR\022\2764\0178\276\333\nN>\326U\337\274\207\"5>\0309\325\275\373\351w;\007^\331\275m\204S>]r\331\275\204\307\002\274\325\016\207>\305\275\345;\242v!=\374\341\262=y\212U\276_X \275\374\363\031\275A\214\222\2761=\314=M\022L\275\r74=\257\007-\275N\'\033>\320_\037=\345\257w=\215\021W=\325\3501>\031\004;>\243\303\320<(\372\000=\344\341^\275\226\276\263=Z\244@=sjj\275\235\222\215=\322\302\323\274\353\317\350=\357\320`<\223<0=\\\325\357<=h\010\275\212\036\353\275\224\030\372\275 \030S<\277\313\316\274\023?3\276\347\016\006>:\037\231\275\347\013\324=\003x\226=n+\027\275\320F\t\275\216\035)\275\202\\\203=#\361\344=\262\311\007\276\240\n\301\275\206\033\256=\332\261\303=\320\242\027\276\305\016`=\020:\313<\300X \275\351\276\346=\000\254Z=\312\266a\275\234#,=\335\2610\275j\347\261=\371\275\001=\n\345\006\274\272\321Y=\t\317\264\275\026\353\205=x^j\275rj\245=)\000\243=\02111<\212\322O=c\217\014\276QV4\274\033\3570\275\306X\302\275\310\005\022\275\203\334\215<\302:\366\274\351I\315\274\266m\300=\253q\372\274\316\235\327<\237\345\303\274\273\216\241=\021$F=\r4\315\275}\373\375=\320\252\363=\242\346\240\274:.\352\274k\354\240\271r\230r>\301*\337<\234u\201\274\352\266\005>\234\004\030\275\344\025\276=\200\027\016>\326\006\000=P\223\242\275WN\272=\356x\356\275\242\364\223\274\224\035\377\275\366\207\334=\373\374f\275\314\317C<\221c\353\272\271\325\026>\310<\242=\333\036\373\2751\254F\275\363Vs=\352J\254=\344\251\226<2\243\226<\356P\264\275bz\235=2\316\212\2757\240\222=\0371\213=Cu\237=\263\245\264\273\342\371\007\276\222\205\217\275\'Da<\006\372\t\276\204\024E=\250\026b=\371n,=kq9\276/\342y\275\345s\201\274\327P(>?\244E=\3526.=\3525\347=\311p\206\274sqF<^\376\'\276\242E=\276\2554|\275\357\3568:0\326\250\2747\210\006>\215V\203=w\362\317=\245\205\010\275\244Z\321\275\364l\271<?\374\336<\000\016\216\276\321\234\220\275f\375\r\273\031\326\273=\207\263\277\275\212.\002>b\017\267=CP\223\274\2100\341\272=\253\r\276\013\t\032>\343\311\005>\362\325\222\2759\332\006>\362v\t\276c+b<\270\325\025\2763\261==J\304\023=\310\303\214=\2226V=h:(>F\310\003>\354\006\216\2758\251\227\275\204\337H=\316\363\261=\027\005\232=\r\023<>&\007+>8Q\306=\366\236\023>\272\373\247=8K#>\305\006\026\276\216v\311=vu\354\275\202\264\r\275\322\277\276\275;gH=\300YM\275\2642\260\274\020\363\024\276\010\221\246\274\320&\354\274\303\207Y=P\343\216=\336\243p=\315\220x=p\370{=\320C6\276\346\003\236=\0064\t\275\252\303\234=\373\357\216=.U.=\000;\t\275\215\267\267=KR\030>\266\261\006\276.\223\217\275Y\023\226=\330\275\246\275]\277\222=\275\265\355=Hk.\274N[\275\275\207#\023=\220\246\'\276\210Y\212\275\325A\330:\304\005%=\354\337\336\275U\006\005=\350\344X\274\322\216\334=\224\217k\275\343H4<U\312\333<\241\014\007\276of\246=\204\303\225\275C\035C\275\255\"\244=\270\367\303=-\340\217=\'Hw=\355:/\276\344\247\n\275\260P\276\274\rGZ\2751\335\264\275\371\243*<P\237\272=2e\232<K\202\234\275\367\2265\276Ti2=\264\252\333\275\374\304i\274i\207\234<\363S\234\275\304\301\025>z\240@\273\332\311v\275\030\003\223\275\357\234\202=\213\227\343\275#\231\262<u\034\274=\265\034\276=(\363M\274ec\271\276\0261\203=\310W\256\275\014\273\037\275p\315\311\275y\230\201=\312E\247=>J\330\275\265\376\"=\225\331\351\273\305\333m>\026\361\246\271\206\021\373<\243\030\037<\210D\360<\236`J=2\005?\276;\311\224=}\351&\276\315j\\\276\353\230\023>D\020\235<o\276\244\274w\020E>\244W\261=\351\352\362\274\374\235\353=\177\344\272\275\206\322\013\274gd\206=\233\256\361=Ps\365=\033\372\325\275\000\271\n>\n\002\244=\366\3217\275\327`\212\275%\314\240\2752&[\276\267\032-\275\023\265s\274\214B)=\243\222\200\274\313\001`\2748\241\252<\364\237\036=\277/\272=\222\331\376=D*#\274#\250\024>\264g\230\274\177\0269\273\0227\206=\335X\201\274\256\343\252\275^\021\020>\263\t\257;\352b\375\275\306\263\325=\364\300c\275\271\320\221\274\322\263\026=1\377G=\2254\207=\271\247\017\276G\254T\275\353p\013>\331\241\334\274\022}0\276\333^\277\274\334?\250\274\213&\301\275\241\320\221<v\262\022>\230\263\n>F\213U\274\203\344\355\275\303\301[\275\302y\247=\\\007@<\261\3376=\204\230\001>\354\024\251=\323\243\216\275sw\367<\344\036\264=\212\262<\275\343\323\321\275\\X\371\273\213\372\372\275\026j7>\320\366Y=(\312&>.-\315\275\204(\343\274\363\350s=O\014\013=-\214f<\010{K;\364\006^\275\275\222.\275m\"\203=\351R\237<\335\376\261= \362\200=\006(\020\276\305\257R=Y\237\344=\0007M:\312-\003=\361\275L\276}\221\336\273O\307K\275\224?z\273\332\017\205=@\317I;\323\201\275;\250_\242=\230\271`\274\223\211\362=F\007\305=\254\376\230\275\003\213\337\275=a\016=\031\273\203=\356\336@>3\367\021>\230\030\363\275\216\363/=\2306\033\275Y>\"\273\371\001\245\275F\000\002\275\n\3229<_\243V=\245\'\262=\013\253k\276\344\303\224\275\\~v=}HO\275\242\021:\272\031\006\267\274\272P\3629eu\267\274\361I\236=@R\235\275\007\236}\275r\310\030\275\007fj=\037\317Q\275&\335\014>Gc\000\275\204\240\014\276v\004\010=c\256\"\276\343\332\377=\032j\313<C\252\001>z$\341=*\247\227<\004\276\n\276\246\'\337<9\'\241<\t\364\304\275\254\324\255<DHS\275O\326`>\375\266u\272\271\352\262\275\263\020\335;\370(3=q\372\232\275Cak=1\333\253\274\240\321\235=\005\034\332\274\036(\272=\350\360n\275\336I\001=f\230\340:\255\343K=\364\214z=\\\377\270=\024\275\000\276\226\232\271=v\316B\273\373\233\013\274\254\341\005=(ta;7\351\233\275\374\260!=\335\250\016\276\243\225(\276\307\\\302=\377\227I>\026O\366=\2779J\276X\031\332<\223v\206\275b\207\340\273\225\312S\275\037\356f\275\312\220\037\276\034\254\236<\214\307\r\275(F\320=\354\377\007\276\325c+\272\354F\363\275\202[\314=Oa\302=WS\020\275\365\266\017\276\365\271\353\275\007o(\276~\364\307\274r\022\010\276\334\027R>\266\264\307\275\345f\302\274\343\322b\274\276\311\372;\203\243\030>\014\272\002>\2254\335\275\326i\r\276\021c\277=\r\212B=\364\234|\274\320\304\234\274=*H=\351\014\374\275w\236\372=\323]7\275\230\337\020>(\252 =aGg=\243\3040<`-->\375h=;\tr\231\275\217\207\277\275\023\205\234\273\3709\250=\353\310\236\274\235M\035\276K\rB>)g?\275\005E\r\276\267\261_<\372\324c\276\262\243\324=\271\211\017>\205\226\365\274Q\247;=\274TR\275\035\250o=\235\034?\275\021\347X\273\237Ic=C4\332\275\247T\220\275\317\351o\275ITP=\205\007\244=j\325\021>\321\031o=wh\004=\230\350\225=\373\036U<\217\214\337=\243\303\226>d0,\276\306\254\035>\007Am=\302\010\201=P\211\032=\354\365\315\275aR\352=m\363\301\275w\334\245=\335t\336=\341/\343<Eu\343=z\033\266;\270\376\234;%\250\200\275\013\234\265\275\031G\370\275\233\021\246\276\225\327\262\275\357\324\230=\242\335\021\276k\207\031;<\020}\275\007\242\253=\310\265\204<c\325@>\230\311+>+\354\203=\207Q\362\274fd\305=(`\261\275/\341f>\270\317\002\275\342\236\026\276\342W(>\177R\207=\022-\216=A\205|<\204\010\353\275\254\222\241\273,;\323\275\230\023\017\276;\220>>4\347\205<I\033\013\275\304\202`\275\027k\327\275A\213\027=\262\256\020\276K\201\370\2751{\212\273\221O&=t\200\210=y\025\256\275>,\014\275\225W\265;]\376u\275+F/=60.>\264\245\315=\n\3451<\350\336t\275\216X\223=\n\245\037\276\311\237B>\220R\333\275\235x\314\275\311d4=\376\323\352=!\316\337\275|\220l\276\300\361\350=itm\275\205\315_\276<(\206={\324\317;\364\254\350\275\3250\231\275\310B\254=\234\000t<B6i>_p\213<\035\031\225\275\237a\r\275c\222\210>\333\271\302\275\344df=\263>\217\275\370\232\224=V\351\253=\024\034\224\275\342\322>=\367\324\373\275$x\276=\241\342\243\275F\302\037\276\274\245\000=\277\305m<\373L\243\274\003\3729\2731\261\301=~\035\027\2760\242\275<\2656\270=X0\034\276r\020\312\275\201\317-=\374\204;>\316E$:\235\211e=\261\2717<\342q\212\275\244\004F\274\024\227\033\274/\375m=\355\333\007\276\372*\215\275qq\317\275\005\016\352\275\374\377\336\274\016\302\272\273\311\037\216=\301\\)\272\212a\354<c\374\330<\377H\016\275=\343\021><\350\224<\211?u\275\245Z<\274$\357@\276\322o\014>\202\365\327=m.\344=]uI>5\0251\276e\345\'\275\"\235P\274\264><={\022\205=\247L\010>\307\024e<X\037\231\275\311\306\003\276\022\271\007>\366uj=;6G\275\200\004\370<\222\002\313=\335\350\032=\225\350\241:\305 Z<\253},<o\237\262<\275\361H=]\257\222\274\027\024\006\276\010\270\203\276\177\206\331\271\370\034P>I\013d;:)\272=\264\3154\275\335\025D\274?\335\204\275\331#R\275,\035\247=\3128\r\276\262\337U<W\232\010\276J\260G=a\004W>\331rq\275\221\004N<3\340\222=\254\334\001\274\242\234\250\2752 \320=\205(0\276\214\267\006>\346\231\211\275T\247\205==i,\276\232\'\371<r\374\351=s7#>!2\243>v\362\016\276\264\034\325<\234)1\2756\232!=\320\007\257=58\315\275R.\302\275\204#\201\274\354\377\033\276hG}8f\206\"\275)\206\020\275S2\335\275(<\342=w%k\275\221\030\013\276\321\002\226\274a\277\034=4:u\2761\302\013=\221\214w\276\'\024\277:\371 *\274\253D9=\177c\355=\220\022[<\260\317\304\275\362\274\237:\323\242\032>\247!\301\274b\244W=\261\310\001<(\346e\275{\030\r\276\261:\234=A\300\022>\250\003\357=G\351\177\275w\023\276<\320\247\314=\320\231\345=\250\262z\275\243\323\377\275\341Gs\274\277A\230\274\264p\206=\025\272\247<\274\265\223\275\277Yh\275=|\346<\270\240\037;\237qE=\2774\t=\375\016\204\274u\312\225\273\270\346\n\276\324\031\252\275\260\252[\276\260\r\250<n\264\t>$#\220\275\340\377\220\274\021+\251=\003:.\2766\232\263=\357\357\000>;\332u\275\244\223\220=\302$\227\275\316\004\177=\264\222\334={)\274\275M\361\363=\364;\032=\363s\321\272\200YN\275\366u8=yh\242\275\327w\307=d\377\302\274\n\251\005\273vnn=\202@\267\274\337\335\341\275@\223;;^\013\352=\226`j\275\325\303\024\275\017\007\277\275\006b\n\276\2766\372\275(\027\354<?\367\t\276=\246\230\274\330F\241<[\261\031\276,\224\316\275\014\213\204;0\005\251=\\bE=\025\332\372=\004\351\333<&\263\007=[\3736\275<\233\\=\306t\035=0i\205\275\036D\330\275\'^\000\276\350\351\216\275\363\374\206\275~\205\256=9\362n<\"ic=n\274\311=\267\331\300=k\305\373\275q|\202\275\265J\336=\303\035\006;<\335\315\275=\357\234\275\204\346\364\274\236\025\336\275\316\014\002\276\254\022\006>G\003,\276F\200\343<Z\226\271=\361:0<A\225\210=mx&\275n\035\207\2750ln\2767!y=\314V\304\274\230u\234=#\313\206\275\231\312 =yV\220\275\026\313\337\275\021\260E\275cT\005<\343U<\275\277\315\224\275\0220\035\275\261\314E=\341\223\363=mi/>\014Y\246\272\265g\265=\206\311\000\275\024\013\227=\301\203\236\275\322Q\014\276(\257\025\274\304\r\251=%\364\225<P#w\275\354\357\002\276\255\353\001=Q\325\367\273\001\207\014>\005\211\277<\304\034\257=}\3715\275q\331K=\020O\326=\234S^\275%g>=)P\223\276H\212\252<\203~7\274u\361\311=X\033\310<<\327\t>\033\237D=R\337\271\273\320\247\241<\373+\334<\253|\301\275\251\321\021\276\321\356\303<sVA\275\360\340\021<\3537\024\276ei\350\275?\254\201\2753\2049>\321Q\322=U\311\021\276w\3708>\002P*=UX\251\274\215$\322=_\362/\276\245\242\032\275\010\026\206=0\217\253<\035\275\013>0\215C\276\276N\035\274\021\375{\275R\370\020\275\362j\307=d\017\264=\021} =\032+%<\010\017w;\333w\313<!\334\355\275\330u\030\276\033\377v\2750P\243\275\346\361\251=\226R\311<\335\227\001=FV\001>}\321$\2769\333\223=\230\367A\275\354s\021\274\r\037\361\2756\216\267\275\330\261\361\275\021\326\347\274C\266\322\275\036=\\\273Pd+\275\275$\352<!\323\337\275\302\201\206<\261[9=\271t\022\275B\201\245\274\370\310V\276\374G\204=\330\253p=&\2226\275\037\3465\275\300r:\276N\256\362=\\q\350\274\260m\030\275\301\213\243\275\231\257\004>\250\272\207\276\031 \211=\375\332\270\274W3\237=j6\260=\302\316\r>\214Y\r\276\265\374\004<\336\225\221\273\230n\010=\204\'\000\275\203\255)\274\0333W=`\261a\275\346\035S\276\"\375\">Z\353\343\275\227@\200\274\3669\017>\3709\347<\361\276\352=\323\010G>\217\327\247\274\001\302\030>W\371\243\276\304Z\343\274+\317:=\350~\201\275\337\354\017\276jwX\273\224-0\275\257\2666>\007[\305=\327\005\260\275S\341$>\361\003:>g=H<}\262\245\275\"*\264\274\241\360\235\275\320\177\031\275\037\034\355\275\233\323\274=E<\r=\333\025\033>g\360\365=\t\2451\274Y/Z\275@\037\345<\020Z\027>e\252\010\275\361|\013<n\201\033\276\235\350\271\275\343x\007>\252`\001\276T\322X\276d\257\226>\324\226\375=1\260\244\274\245;\307\275\260\016\'=\006\233\"=\345P\'\276\003\354\017<\274\355\203=\312~G=\322\313\325=\2604\307=Y+\262=bSc>O\235\216\276B\240\371\273!\211\026\274\"~J\275L3\034=\232\2072=\327\220\336<\334k\203=\334T1>\tmb\275\000\201\314\275\036\246\373\275\023\023T\275\314\234T\276\342X\260\274s{\200=,\367\376\275\337@r\275\374[$>\205\347\225<\225u\t>j\257\323\274\365(\037=\"`.>\347\316@=\035\244\202=\326\300\257\275Q\370\247\275\351\242A\272\261\2022\276\2506\027<H-0=\030:\275\274\264R@\2759J\002>\344\'\'<\1770\013>8\3521\274i\"\221\275D\032\343<\223\255\024\275\344.\035\276\301L\234\275\363\377\276;\023\310w\275TzV\276\356_9\275\240~\247\275s9%\275P \336=o6\032=\232\013r=\002:\r>\025Yb<\230\007Z>O\003D=\356\'\000=\232\201b\275V:\247\275[:i\274\354\326\316<\361@\252\275\n!(>\243\344[\276\367\277\006>\335\0054\276\023\314X\274\215\275\244\275\034\320N=\026y\'\274\257jF\275\300\3139\2729\273;>%F\370\275\222z,>|\267K\275}d\270\274rV\013\275^\264M\275V\027\016=\247Wn\275\342\275\265\275\304\347\036\274\206\274\206=\223\216\200\274Lq\270\275\212\302\030>\005\327`=\326\322L>\276\367j\275\364\326\335=\367\242\264<\346QN<\200\226\330=\302\205\252=\261\270\214\274\255u\351\275}\t\224=\244O\244=\252\353\031>\222,\241\275o\241r=?\334\n\275\024[\360\275HP\246\275\306cC\276g\322T\275\346lu\275\215\237\320\274\320\273\001\275\212\ra\273\304]!\276I\013w\275\243$\t\273\035\034\377\275\366\274|=@p\355;\023Z\365\275\205\227\201=\326\366\001=\035@\221\274:U\243=\334j\371<@\t\353\275\304\320\030\276\341\274\314=T\237[\275B\260\037\276\200x6=i\210\203\275\237\023\320\274Ts\357\275\362L]=]P\001\276\376`\376\274\'pH<?l&\276\3117\014=\252\336k>\301\235v\271\276\211\334=2+\023=\326\\\366=v\226\215<\220\004\020=+\023\211\276l\304\322\274\311\t\333\275H=\002>\345\353\014>\243d\356\274\254z\256\275m\023\016=\3508\330\2755\345\313\275\214\345\327\274\332v\324=\"C^=\241\271\316=\371*\253:f\257 =B\210e=.\036\031:`0\223\275\373d&\275#R\022=\306\262\010\276%\330M=\303\277D=\007L\375=\345\342\357\275\n\370b=\013D\006>\223\372\005\276\362#\032>\220\302\220<-\375\373<\273\304\016\276\231oI=\271\230\242<\276\003\025>\303\326I\274\0340\243\274\347\371_=\344\360\257=|\242\271\275\362\211\342<\221\353\254=\312\001\203\274\230\006\347=\252a\343=\350\3265=\266\252\266\275\350v\031\276\002\207\265=\342\322{\275\022>\\\274Kj6>\310b{=\200\312\321=\372\344\257=\000w\003>\034-\363\275(\202|\275k\003\273\275V\214\003\275.\272\305=\231=\216=/?\365<\254\357\311\274a\307\334\274\321-\024\275\005e\017=\002L~\275\340\262\t>\216\313\317\2742\025\224<\307\346S=\254c\221:P9\341\273\273<\254=@\246\316<\254m\233<\220\363\232\275\264Cv=l\301\220=T\034]\275\347q\333\275\347\375\001\276&\372}\275\313t\327;-\'\266=aD\342=/\213\017:\245;\035\276@\\\230\274\316\242\300\275\373^\373\274\365o\306\274\313\004\321<\031\341\214=G!m\274\365\317\362\275\355\342\374=\223\203\211=\316\353\025>)\300Y\275`N\013=\003\032\212=\201\2264\276F!\t>\324\330^\273\261\301\314\275\2270\341=j\020\033\276\357\222V>\\\355\341<a\337\371=\322\321~\274C\307X=&\341\365=i\3034\2753\243\310\274,\277\033\2761\261\031\276\201\376k\275\237t?\275\032\353k=\324z}\275V\316\324=\'E\037=\257\202/>\212\345\307=\260\305\214\275\217\364x\275\203\311Q\273\345\007+\275\325\271\205\275\270\265v\275\272c-\275\247\257\243\275$\200\274=r\277\"=\340\0107=zq\220\274m\262y=\351\346\320\275\0006\226>\207+\001>\032\035\202\275\n,,\275?\352L;\375%V;\177\254\255<\252by=\013\026\370\273\260\366\316=+\307\007>\223\n\265=@\363\334<\3024?\275M%\237\275\331-\250;\006\225\326;\274\322\244<\306\024\357=\\C\037\276b\245*=h\020\000=a\217,>&)\302=\242\014d<\326\321`=\033\337\022\276r>\027>\223\013a\274\026T\006>\255jY\275>\003\375<\350M\241\274?\200\307\275\035\253\232\275&\303\263=-\035\007\276\271\231n<\355\247\330=b\376\374=E\237,\275\344hu\275\336\030n\276G\354\271\275\177!\303=<OH>\313\336K\275^\240\360=\034\254\300\274\223\323\241<\244I\265\275\314\002#<\255\313>\273\034\275J=\267\247\274\274G\271D\275}D\351\274\005\306\374\275\262\232X\273\017<\214\275\327\272(\273\234\\\300=\354\356?\275\301\305\270=\210\363\234\274M:,\275\316\234\020\274}\261\257=\302e\224<\264\266\t\276\237\375\254<\0164\277\275\003\250\311\275\007ES\275M\350\244;\217\035\315\2753\027\301:\0076\020=\002H\272=3*I\276j\276|\274\223\241\256\2750\254\035\275\226 \315\274B\343\027\276z\347\267=!\332\014\276D\032\353\275\244\274\t>\005\377\246=\357,\027=\t\n\344\274\227<\342=\232\205\316\274\376\035x\275g}\220<\331\226\235=Xd\322<\313!\252\275\221Fp\276\243\2031\276\233\224\014\276\024\005M\2752\300/=\0223Q\276z^h\272\304\234\t>\227,@\276\333\351m\275B;\313=[\304\031>\030l\304\275\357C\312<\201Ff\275\334~]<\215\211\212\275\2359}>]\360\314\274\255\254\263\275\352\207j=\274~\035\276@>\321\275\200 %=\365\014\002\276B\355\313\2742X$\275\226[\253\274]\014\245=D\266\254=H\264\333<\245xg\274\002\005 >\006lE\276l\317\275=\326\3620\275\004\205\211;\n-\263<\206\036\004\275\344\037\'>\014:\242\275\t\214\356\274\230\373n\274\200]\375=d\312l\275\256\010\257;\023\014\021\276gmd\275\237ZB=\253`\203=\001\007\247\275\204Z\345=\257\340\370=\033\254\375=\342\022\275=O\3646=|\2439=\003H\317\275\312M0\276\321\200\271=\205\257*<\034\221\026\275%\234\020=\200y0\2760J\\=\357`\204=:Y\013\275B\\7\275\344\302\364=\214 \"\276\205\033\263;\307]\037\274\217\031w=\2335\255\275\202\352I=V\202K>\251\2058>\301g;<\210\0002\276\204h#\276\260\220\201\275\266\017.\276D\356\364\275\017%\252\274#\321&=\205O\255=\031\307\253=T\355.\275\214\'\354<\365\307\321\274\251\033\312\275Oh\222\275\232G\252<\321\2464>\235K\201=\035\007\250=\340+\210\274^\311\"\275\007\216W=\\\023\213\275\235M\257\273T\350\223=\357k?>Fs%\276X\025\236\274\213%\314<Zk3=\000\360\377=\'\026\020\276\303\007\312\275-\211\371\274\216\004\\=\365\024\006>\235K6>\207\212X\275w\027\331\275\323&\036>\251\025\314\275Wk\255;.q5\275\331)c=\201\250\215=TU\023>^\323\255=\240N\203\275\365\021\322=s\026\020;\r\222\346\275y\221\007\275\276S\374=4.>>\332f\'=\212\377\224=\364\005a<V\210u=(\336\203\275Uw\036\275\364\226w=%\321\363\274+PV\275\240=\357=\341\331\225=\323\272\334<\003\241`\275D\235\240=\03400=K\351z\275\356\225\t\274:\3710=\2442\241<\315\335\255=r\032\242;M\214\215\274\373.\276\275\"\252\205>\362~Z=\327O\216;\235Es<\3107\200=\227\314-\274\352\017\202\275 \013\031\275<\302\304\275\325\025\007\274\360U\206\274%L\255=!\216\356\275\220\357t\276\032\365\303=\347\371\244=\025\202\324\275V[R\276\315\253\240\275\373\021\352\274\325\324\241\275L\020\306=\355\344(>\217\262;<+U\362\275\331\010\267\274Lz\354=\006\035\363\275Y\274|=X*\350=\203\256\311\275\037\235k\273\241^\363==\204y<CIk\274\033\352\254\275\377l\363=\322=\253\275\364\300t\275\251,9=\246\t;\276\323&<\275(\014\t=\211\316\n\276v\236\'=+t\210\275\232Jr=LM/=PU5<l\013\311\274\351\240\355\275\276\242\025=Z\023\302<\031\024A;B:@<u\321$\276op\264<\367\n\250=\220U\370=\212\007\377=\373\370\310=dN{\274\211\002]<\024nG=\330\214\037\275\233M\267\275\331\"\364\274ha\034\276\230\241\361\273\277\201\235\274M\r\233=\344\327\352\275Mw\n\275\250\242H\274\373f\305\275\206R\216<\322u\013\276\026\014\313<\370[\303\275\321\334z<\303f\177:Z\315\351=\027\326V=\311\362\310=\014\177\010>v\\\201\274\2728\232\275\216s\232>>\324\276=\217j^<!n\221\275\366\334\225\275`\340@\273{\037$>\246\224\311\274A\216\002\276p\361\025\275\345\031\016<\253+L\275\327\235\200\275\230p\202\275cN\377\273\261\243\276=kM{=\007\253F=\371\276\253\273\035\321\227<G\220`=\344\222\027>\352\213B<\246X\200=\362`\020=\2319\312=\213b*\275a\244\215\275OdI\275F\223\017>\214\'\331\273\212u)\275\267\310s\2736RR>f\304\255=\031\005\306\275\202\000\305\273e\355\025>\t\336\273=\317\351\240<_\364\315\275\255E\371\275\231\242\302\274\032v\260=\276?\342\275p\n\244\275\277\264\253=\233\206\236\2748J\301\275\246c\337<\276\261\263\276&\275H>Z/(<N8W\273[3\220>j\246%\274\304\016\232\275\206\r\003\275\354\302\026>\304\255c\275.\246\344<\346o\321=\000Bu<\035yT=\344E\005\275\322r:\275\244\034\r\275\272vN<b\226\033=\366/L\275u\325<<\243j\252=\021\006\352\274\001\234\201\275\022D\025<\035\001\026\275Y]\364\275\267\021\301\273\205\320\317=\2257\017>\220R\r\273\337\216G=\254\342s\275]nT;o\225h=\035\272L=\371\305\354<m\010\343\274\201t\274\275/\014\317=\207= \2740\356#\275\276#U\275T\315\026>\\\242 <\354\235\316\274\224\235\010>\257k\266\275\202\204\267=\310\350\t>\244\273\203<P\234L=\205\263\272\274]\224\014\275\331\252\217\275\237\234\262\275M\017W\275\376\013==\342\223\213=X\346H>\313\274\211\276fi\334\274\322\256\365=p<\017\2744{\245\273\275@\212=\260rn\275\224\326\247=\315\364\276\275\265\366\271\274\361Q\341=\355\234\005>\327\357\266\275\304\204\244;/\245\210>\242\266\006=\363\231\341\274\234\257B>2W\344=\310\260/=\265\247\341=\203\255\254\275\334\215\024>\307\374\301\272^\231\004\275\250g\255=F\022\354\274v\362[=]^\017\275\247\243\264\275A%\234\275\266\357\246<C\244O<\356R\206\273Od^\275\343\014\022>y\307\373=\273\010\005>\364\346f<\304/\373=A.G>\237ZM>l\205\377=\323\017+\275\r\265\002<r\327\017>[\034\021=X\304\022\276\276o\205=\035 v\274\355d\204;EC\273=\312-\343=+T,\276\tvx\275\264\256\"\275E\370\333=\266\304\210\275\224^O\276\373M\260=\364J\252\275&\264\353=q\342\211\275\004h\\\275\0038\203\274O\034>\275\304\234\225<\275\017\356=\200d\231<\214dl\275\233{\217=V\003\034=Be\262\274w[\326=\366\031h: t>;\0259Q<\0312/<\002%8=\205x\335\275\327\021\331\274\254t\020\273&U\343\275\256s\034>*;\310\274o\362\006=\203\336\210<9\3239>\3139\302=\235\261D=e\n\221\275=\273\342\275\217\2661\274l<\322\274\204e2=6.\t\274\276\307\235<-\343\032\275\300\275\366=&\212\236=\255\022v\275\032\214j\2754\026\313\274\255\032\256\275`\272\005\276\225\324\322\275~\313\250=V\000Q=\371b\216<\333x\332\274ltn\275\333\033\256\274\254r\372\274:\215\214\275RHS;z\322j\273#J\365=Y\"\271<\314x\314\275\n\351\315\275\0348\216<\207\230\301\274\014\022y<f\322\246:3\352\307:\237\275\362=\262~\370\275\314\355\200<I\023.=9\272\221\275\210\364\217\275\021[\243\273\217\366v\272+)\033\276\3404n>+\215\310=v\010\342<\001\343\231\274S\344]<\237{\004>\217\355\013>\317\341\306\274\224\034j\274\240\234\031\274U\333\326\275\022r\300\272\214\372C>\337A\254\274N\353;\276-\024\236<>2\262\275U\003\326=\222p\365\274\277\010\023\275n\234\246= \014}\275p\337#>C\225\316=\202\267D\276F\3131\276\215{\013>\341\313P=\214\257\003\275\340\321\003>t\371\022\276\341\375\337\275\230\"\264=\315!\r\276Q\304\340=i\342;\275\365_\217\276}\022\375\274\310\006b>\2036\213=\275~\350\274\0263a=#\275r=\245\333g<\022\312)>\201-\251<N\265\244;h\321\035>v^\025\276\324lL<\327]9\275\261ZS>\031v\2247\205\2064\275\016\231\367\273\242b\244<\327\346r:^\214\033=\333\327\254<\261\3745=\325y\\\275k\2567\275(;\270\275@*D\275\230\264\n\276\262\263P<?g\031\275\274\037\027\275?D\264\275pb\014=\217\rB\274\312\306\253=K\367 \275\r\351\020\276\034\224\211>\017\007\007\275.\257x\275$\0324\276\335\273\242\272\366\217\200\275\330\240$=E2\344<\271\320\330\274\032\302\233\274\366D\245\275\2542\2428Y\234v\276\276\373\304=\315;-\276Q@\221<|\333q=\204\346\"\276\220 \r\276\337[\245\275\364\313\214>\344\205\005\275\263\304\266\275Y\313!=Z#\225<K\213\266=\213\034\023><\3064<5\'\241;\360\376\374\274\204\355\365=\360f$\276-e\257=vJ\276\275\261\005\225\274\361e\331;\326\3203=\274R5\274\316\341O\276?\221\264\275\030\216\276=\275e(\275_\t\356\275\017dS=\231\231\255<j\316;\272\\yi<H\216\030=\362\0179\275\314\351\325\275\020\201 ><\265\254<\346\354\234\274\213\241\232=`\235\'\275:\241\025=w\272\335<A\020&>\272#\037=3OH\275\241\322\213>A\364\260\2751\210}<H\304\375=T\342\276<\nI\334=\354\257\031\275\345\031J=\374\260}\275\313\1776\275\270\\\201\275\343\027\242<\310\277\024\2767(\017>\347\344\017=\213\234\324:IY[>[\215\022=`\307\300<_\002&\274\3211\017\276\341v8\276\207r\021<\351\204\034\276\262\224\223\275|j\330<\0322\205\274\316\"\256\275f\362\t<;\200\004> JI\276\360EE\276\354gE\275\2375x\275\"\001\230\275c\311\362=\315\262\322;\334X\313=\272/E\276\255\330\205\273\344\2508\276\312\210\310=\254\232\220\275\316\346{=\331\330l=\224\330\362\274\230\344\274\275\'\233\255=\263%\241=A\313\034\275\025\212\363\275\005\361i=\276\n$>f\002\233\2741r\306=W\376d\274\265\200?\275[n\266<\202\377>=\223q\251\275\241k\t\274\013\374\005>0\240\017\276\026\245&\276\302R\030>\300\357\361\275\230&$\276\355-\352\275E\256\303\274\272\341\242\275x\014\344=\334\223\327\275\227\307\003\275}\340\345=\227\211\236=\014\334\263\275\362\2339\275O\254\231\275a#<=5\214i:\210K\222=\021;\252=\003\202\246\275q\333\260=<PE\275\363\317\003\275\222\3414>P\320\";\323a\214=\2206\241=\021\337\234\275\321-\263\272\261c\005\276\333\356\256<\202\307\021>H\353\365=\022\244\000>\2201\014>k\220J=\303\304|<\272x\315\275^4\254\275\r\304q;_\314\226=.\360?=-\014\366\2750\315\022=\315\324`>\316\361\035\274=\322\276<px\270\275\204\354s\275Aj\007>N\016\032\272\356/\016\275\237)\245<\227\021\302<\220\344\037\274\316T\031\276\365\034D>^\002h=U2#\275\236X\211=\260\216\r>\271\346\260<\014\267\357\274\202(!>CWm=\323\217(>\300\n\362\274x\235\001\275)}\313;xN\264\273\370\377\354=\235\243\361\275a6\034>\026\301\360\274\306\237\335\2740D\315<;\304\030\275\013i[>\t^2\2757^O>\247G\325=\243\"\317<\027\252\220=\000#\177=\022\275J<j\367\005\276\337\t\233\275}\265\300=\210\030\370=0U8\276\267 \360\274\241\245\010=\317\236\003<\370\300\303\275\342\277\362=\004\332p\274+\350\314\274\246\363\333=\000\301_\275B\354y\275W\001\234\2752\262\253\275_uc=W\235\037\276\032\277\007>O\316\216;$\322\220\275\347\210j\276\026\227\361:\2669\035\276\361Bu=1\036->@\226&\275\372^\252\2743\263\364\274\342u\377\271\216\256\311\275T\360\271\274|\3645\275\030H\205\275\370\351\245\274f\365\275=\034Ys\275\357\036\351\274&\233H=\2233\272=\346\257\247=\2508j\276F\223/>\"\221V>\370\222\342\275\234\363\255=A{\305=MT:=\367\267;<\tF\370\275A\227\240\274v\"\353\275\206;\212\275\311@@\2767WX\274\021Z\306;\301#\335\275\037\277#\275\224\343\211\275\311\344\207\274\014\021\010<U!\305=KB]=\223\256\010<.\310\227<&\207\256\271\317\026\005>\007\274P\274:\261\346=\032\253&\276-\004.\276\2627\244=\343\014\\\275+1\314\274\255\371\003\274=\251\267\275{+\342=\344\263\306\275\313\361\221>\252\226\321\272\350n\310=\277\"_<}#k=\240\317\034>\300*\265=:z\002\274\"\n\202\275\363\261\035\274\315\300\024>\362k\310=\177\273\202=\233\360\254=?O\325<\274\250\201=?\277\307\271\213(\177\275Kc\007=\301?z=\227\322&\275\320\224?\276\310\320\205\274\036\341\331<S5\001\276Q\224\335\274\230\346\"\276\034\373\274=\022e\'\274\231.\014>vz\304=\257\371\246\275\247;\203\275\213\326\313=7\037@<\034\252\225<\313R\023\276\347\342F\275{i\311\275\237\363i>w\233\365<\260\300\361=L\233\035\276\246\307\">\360\336.\274\217\313j\275Q\253\023>\3656\025\276\307\206\312\275V\024\256\275$\267\217\276`@==h\273\000\275\2304\031\275\033\315f=\036\315\235<\3542\031>J\326\261\275\037\016~=\333^\265\274\257\007\340\274\340Qx\276p\377\213=$(\331=\037\370\300<\253\002,=O\240l\275\010\305\376<SE3\276\222\370\024\2742\362\246<\367d\003>J\351\035\276J\211\240<\305\013\301<\023&\275<=\256\255<\316y\306=\230\031\226=j\006\332=\000\033\232=\312\370#\276e\206N\275,5\376\275d\363-=cW\260\275\335G\202\275=\013\212\272\304&\361\273\213\320i=\273\020(=\260:\366<\333\210x\273g\202\014>\217<%=3\340\244\275\000\340\n>\372Q\220\276Ub\204\275\371\263\006\276T;\350\275\033LO\275\220\246\316<MF\352<\312!\246\275\003\376\024>Q\220\252=\317\316P\275BW\364=\310%X\275V\371\034>\371\n\212<I?\337=R\374\361\271\377\365\354\275<\216\215=\007\273\021<\300\306e\274\"\274\014\275\036\340\211=\343%,\275Bax\274C\273j\275*\262\215\274 \034\004={\374\010>\271I\347\275W{\242=\260{\324\275\257\371\017\275q3\004>\211\t\257\274E\351\037>\347X\037\276\214o\367\275\274\237\336\274^\276\021>p\2474;\313R\211\276\030c\203:\021Z\307<\314\226>\276\010\234i=\030\216\005>0\350\322=l\3654=\363\014\235\2752\227\200=?\033\214\275\037\3268\274\025\020\010>\254F\271\274;\247\266=\310\026\257=\204bf=1.\020\274\302\004\026\2765\377\022>\365S9\276\230\223t\275 t\002>\233\251!\275\273b\217=\305\273\373\274\343\373=9\364\377\212=\335\033\240<\177\270\270<\362\247\r\275v\363l=\206\352\022<\0261\310<\207\002\226\275\372\315\367<p\032u\276\305\333r>\262\235\376<\264T,\274p|S\275\010\271\301\275\304\247\324=\341y\375\272\277\267E>c\313\r=\250\0160\275\354r8\276Nr\032\276=\305\034=0\223\037\276\373\365S\275\177\335\376=+B.>\312Bw=\223\216\233=\333>y=\305\220Z\275\033t\217\274\321\234\251\274\326{\344=\254\256\021=\235\230\360\275\364\310\223\275[\246\013\275Q\345\322\275\002\352\325\274D6x\275\014A|\276>\005\234\275\343U-=\226\225\376<|\302\275\275\033U_>\331\023\032\276p\204\364\274,\036\264;\3621\002\273<\360\374\275\352?\203<\354\264n=\204f\370\274\212\232\353\274\247\353\205<6\330\237\275\367\310\315=\366\025+=\037\032\336\275\332\312\367<d\256\345\275\366\302\034\276o;l=!\r\305=\363a<=\236H\211=\264\353\271\274\320\204\022\275t%\310\275Q\006Y\276\202\310\366\275\000\367\2758\312\302\276=\333\261\010<\263\231|\274\254\340\001>\373\357\301=\340\2128<\002\374R\2757\022~\275\351\010\212\273qD\000>\025YJ>\326\256\023<\323\366\225=\001m\030\275\234r\304;RvH<\274E\276\274Mrf\274 \247\031=~\352d=\024\306\017=\036\264j\275-e\216=@f\333\275\002\212u\275\327\362\252\273\301\215\203>%\331\363\275\350\034\244\275D94=\352\001\372<i\232\336=V\254\366\273\333\363l<h\226U=[\226\002>\247\0353<\210\363\334\275\237\273\034<9u&=t\315\216=e9V\275u\355\310=5\360\n>\210A\321=\361\036Z>T\350`=\264Yd\275\367\272\214\275|\277\371<\217c;\275\375\267\224=\311\372\314=\2377\031\275+\354\213\274\360@\036\275\337\242\367=)\325\366\275y$A>\247\367m>,\n\202\275\340\211%\274\302\326\021\276\261\002\330\275av2=\337\347\354<\311\310\354=\314\025k=?y\221\275\314O{\276\021\020\014\275\235\202(\276\227\276\200</\000\024>\335\227\261\275?\035\273;ze\321=]\2613=\206\001\350=>\243\r\276+|:>}\265\014=\022\237\254\272O\314\255<\020p\021\276HN\035\274.\000\306=\270\250y9Q\355\240=;f\264\274N\337\234\275\026\232\273=Rn\211\275\222\343T\273\313^\325;\0061\202=\177\032\026>\tC\320\275P\344\027>\336\257\206=\026\345\355\275\327A\272=5\357\001=\3712\'\2769Q\236=\260\004\253\275%d[=\275\"\354=\253\340\243\275X\325j\275^ \010\276\177\247\221=\"\002M>w\311\244=S|\013>\204\243\210<\253\202\221\275\242\231,=&E\267=h4\237=\3511\311\275\032\'\302<3;\305\275\216$-\270\036\370)\275\306\037\247\275\320\220\303;\362\233\r\276\317\321\221\275N\353\264\274\262S\307:E)\224=x\n\262\274E\276\225=P\276\006>9\312\377\275\367G0\276T\323\014\276\201\0327<\353\231\216\275T\340B\276\333\3621\276x~I>\236\356\037\2767\304\255\275\310\025\035\276V\254\234=\0000\030>\265\216(\275\227]\373<\205o\323\272\2061\237=\242Bq\273?\337\216\275\365\316X=~\320\347=\346r\021\275\215bE\275\362P\\\274[S_<\366\030\001>q-\007\276\325\250\226=]V\264\274\3355r\274\0055\031=\025\376S\275\000\354\314\275dXU\275\242\345\330\274\246\211\347\275yQ\345=@j\374=\3076\025\275=\371\">\320\257\021>I\354\014>\243\000\031\276/\266\'\276\336d\t<~\3670\275\007\305\005=\377\264\202=X\254\235\275y\267\002\276\300\016\264=e\236\263\275P\335\301\275WN!>\354\213C>\221T\003>f\r\372\275\027U\355=\013$6;\375\033\224=\201\317\306\274\333:v<\276/\037>\205\226X\276\210\303:=\321\204\232\275!\315\262<>\305d\273$\360\010\275&\001\253\275\363\372\254\2755\014\"\275m\220\304:S]\354<%\000\345;p\230\225=\372\200(=T\317\357<\035\367\233=\253\270\354\274j\336\023\276\273\027}\275\241\341F>\024\365\t=\203A\321\274\0246\233;6\331[\273\240\337\260;\204\371\221\2757\004v=6\361\337<\306Jt\276\356hE\272\027\244C\275\020\240\331\2737\3277=\323\006L>J\340\356\275\260\020!>\014_\r\276b\016\267\2759\246\014>\257q\372\2732\264\361<$W\260=\261\362\203\274I\313\332=\361d5=\311\342K=\207\341\225\275\221\344~\275\354\017\226\273\367\320\256=S\023\351<ez\310=\254_\'>3\037\021\274\250)\210:\251\373\003<\034\243\252\275\361\273\037\276Bs,>\326H\200\275\"\215\241=u\335T=\206\317\000\275\023ID=d\2524=\276\343\221\274\231\360Y>b\332\242\275\234\2641\275\330\352\250=\340/p>v=n\275\265\355\035\276\366\371{=\234Y\254\275\316F*\275\210\372\311=\313\020\375=+4|\276\312\331\240\272\032\000\234=}N\203:\317:\177=\203\202\030>.w>=\311Q\314\274\310\226+=\213\3337\276\217X\244<BG\262\275\2529\247=\032l\010\276\177+\215\275@\376\202=\t\370\231<#\205\244\275\t\362\333\275\370\226;\274\251\262_\2766\202\343\273}\202\005\275\350y\330\275o\243\206=\263\355p>\257\360D>\004\322\264\275\227}\030=\320V\034=C\215\003=\231Kc\275\365\246M=\276\274\n>\237\223\341\275\273\311\t\276^A\325=|\252\250=\303m\205\275\370Mz\275\255\346\225\271\023^\031\276R\204[>\022\352\334\275\207\037\231=\3017Q>S\007\302=\033\273\212\273x0t\276\364^s\275\272z\023>B\001t=\013\210\224\274ilE\2762\252\342=\232I\256\275}\220\r\276\205\371\240\275\'#J=}\373u\275\201\331=\276\263\006\037\275g\354h\274\323k\203\274\306\346\357\275>,\250\275k9Z>\221\272\301\275\372\"\014\274\236qw<\324\341\007\275!\267\002\275\374\371\233\275\347\213\221\274\036\355\205=p1L\275\220\203I\275\235\231\371\275\036\006*=`*\375\275Z\357\206=\350\237<>\024\204\254<(\232==7\210L\273e\215\230\275;.\203=\363\201\177\275\326\335\201\275v\315\247\275t\315H\276\375\016\332=\211\325H\276\257\026\246\274\251+\377\275\221\337\221\275XC\244=_\300w\275\356\271Q\275\315+2\273,\025D=/\235\306<Ym{\273\265\337`\274\221\207\210\274s7\247\275\"\310\247=\245\314\007\276u-\004\276\356v\265\275\316\245\206\274m\374Z=\357M\365\272\254\016\367<\021\373_\275\224{\220=q\321\363=\237M^>S\376;<\264\t\366\275\252\366,\274\256\301b=\224\354\220=\353\263a\275\007\0028\275TI;=z\026\007\276\316\270\024\275\025T\225\2756\241\361\275\006u\202\274\211\3308\274\236W\n>\246=\313\275\235\224P=\323\265\230<i\217\302=\224\\\r>\300P\t>\370\025\254\275y1E>\331\305-=\312\346\251=\033f\014\276OV\213\275\264\314\005\276\212;E=\276\235\240\275\300X\037>U\373\315\275/\207\006>C\356\203\275\227\274W;+z\341\274\003}>=\240\264\n\276\357\336\037\275\3543\033\276T\377\'\276\327\260\321=\362^\330\275?!\004\275\223\331v=\241]\204>?\370\377<U=\337=~\250S<\266\252\301=\020\265\030\276v\362\251;\333K\256=\230m\311\273~\340\325=\353\031:\275\265\0373\275@\303\016\276E\350k\275\361\352\213\273u\236q\274\370P\356=97\256=p$\277=\261\300\001\275\334\004\030=\273m\223=\357]N\276\352\326\330\275\266*\244\275\373:9\275\266\025~=\354\235\303=$Z\r\276q3\n>\217\\\207=UFZ>\002\224\273\274\341\325\020={T\007\276\013\234\026\275|3\225\274\264]\200\275\345a\365\2751E\271<D]\376=)\3445\273\031\336\211=\327\334i=Kfy\275\031\321h\274\332\277\024=\216\357\204\275\245!\367\275q\217\366=\004\264\200=9\005\252=\353\342-\275Z\344\366\274\024\307\013=\273d\302\275\025$}=\222\010F\275\331\256#\275\332\205\222\275\317&\367\275\253\364\n\275\336f]\275[~\033\276\272\354\373\274<\216\245;\177\221\235=\255S\303\275\036\0302\274\257\376:\275\221/\366\274\200\257\271=\030g_<\220k\266;\323\310\373\275u\365w\276u\220\003=\240\024\031\276\031\257\211\275C\331l=\202\245\222\275\257@Z\276\210`q\276\334\230\'\275t{\227<\213:\031>u\310\214\271\"\341\367\274<{&\276h\033\211\274(\212G\276gDP>/E7<=\270\373\274\205q==\350y\032\275\rs\243;\360\377\374\274\357\216\277<\360!\234\275\315\373s\275\025M\224\275\246|\267\275\377`\307<g#K=\3246\225\275\352\251\260\275\352\200\345\275!\3436=\322\003/\273\0274\335\274\013I=\276\307\004\036<N\341\241\274\376\222\017=A\336m=\034\343g\275P\332V\274q\347\206\275@\250\240=q\270&>\331\365\006\276\nw\026>\332\271\205=\275\334K>\005s\242=\216\260\247=\267\031P\276\331\265\214=\026\232\267\2752\177\333\274D\255\226\275\376\344S>,r1=\266\177?=\356k&\274\304h\274\274Q\027\245<\224\234\325\275\010\342\223=~\010\362<e\335\262=L\020\272<\213\354\270\274qBo>\214\356\304\275\321\360\307=\025\317K\274\366\364\254\274\245x\305\275+\227\025=mp\022=\002\232\223=3\022\345\274FOG=s\000z\276#\360\337\275=\223^=\362\224`>\025\n\n=\215&\032>\031\224\352\275A\t3\275\310\325\265<\004j\202=\r\365&<\335\232]=\264\345;\276\375t\n\275N\244\221=\027)\342\275\231\0214\275\275\233_=\035\'O=\365g\376=\274\260A\275\322@\304\275P\216\240=\220\230\310=\262\200\205=\325\211\303\275\253MS\275\024\261\335<\313\013\352=\310\021?\275W\224-\276\316\251\204=\007k\373\275\337(\347=\277\245(>\2044\273=\246\016\n\274\270\206\232=\002\317R\273\211\273]\276L\230\204=C\335\272=\010S\317=x\264\300\274\307G\211\275\026\234<\275\254x\243\272>\033\000\276\006\001\007\276(\314 \276\337g\004\276uE\"=\246h\321<\260j\001>\276j\234\275\2049\233\274\002\232G=\3577\253<\252\311\032=\242s`\276\215E\334\275\\\204\004\275\003\320\215\275\316&)>\330\245\270\275i\324\222\275\233p\250\275\307\230}\275\215\026\326=+\262E\275\021\373\005>\224\214\260\274\0368\263=j\231\037=\332JT\275\001&\346\275;\213\004\276&;\241\275\0011(>\nD\017<\006.\261\275\250\376\231\275D\261\355=WA\221\274\212E\362\275I\376\222\274\346\371\276\275\252\200\222\275\200[A\275\013\262e\276/\340_=\020\262\334=+\266\345\275\373jt=\226\353\242=\003y\306=\241\264x\275\205\324\277<\337{H\276\224\202\003=\216\361\243\275\350i\214\275\025\210t=R\344\210<e\030\032=Z\r@\275*\007\314=\245\347\r>l\244\007\275\0223F=d\226\334\275\022v\202=\023\217L\275C\375_\275\254\023\005>j\027\242=\274|\252=\237D\356=ad\007\276]\355H\275\354\254\274\2755\304\001\276\362\345\010==\233\035>\342\221\250\275+d=\275\026\315.\275c\251=\276|\'\235<\310\340\340\275~\365K\276\330\227\345\275\244=\254=L\363\275=\024\036\357\275\365U)>b\2408\274\035o\230\275\3147\233=\334i\351\273\222\272\317=\310-\340=\360\300\235\274i\266->\235\201\236\275u\266\235\275i\3750<p\003)>m\n\322\273\022\372\234=)2c;\032\352\030=`\2745=\257J4\276\010Xr\275\376o\256\275\320|\"\275\001I}\275j~b=\343:\027\275\010\247\025\273\325\220\027>]9\021\276\025\372\220=\341{\367\274|SV=\352p\027=z\203\322\275\\\325\314=`\314W=P\356\367\275T,\360\275\250\240\'<&\023\323=NL\203=\220\326P=O\312q\275U7\t=\006\300C=3\262\337\275d;,\275\272*\014\275\315H\024\276AS\205\276\\\335\345=1\014\276=\3117(>\n\342\327\275\207kN\275N\302\023\276\370\217\000=g\270\261<\326D*\276\207\353/>w\241\255\275\226\227T=\261\256\352\275\243\004\310<\277\321h\276u\035\003\275#\236\014\276; \030\2765C\233=\022\307 \276;\231\346\273=\267\214\273b\233\251\275\332 \247\275\327\345\301\274\330\361\311<\244\364\316;P1~=\300\303 \2757\037\024\275\n\374\334\275\024\371a=\301\004\221<\202\335\020>\340\372\014=\330\2242=8\330\375\274\216\330\256\275\271\335\261\275\204\2330=\206Zz=~\000\325<\246\312\340\275\300=A=\215\335Y\275"
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 90
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer0/Assign"
      op: "Assign"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer0/read"
      op: "Identity"
      input: "deep/weights_layer0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
            tensor_content: "\360<{=\352\327\362\275@I]\275g\023\300\274\010D\020=\312\235\031=\264\014Z\276\273\357\310=v`\002=\t-/\276\317(}\274\350\333\362=\266\006\001\274\205j\235\275\366cc\275\271\326\t=y{,\275\277\300+\275\002J\256\274\325\0347\275p\022*\275(\206(\275e\361\257=x\261\010\274\034\327/=\350l\022\275H\336\301=\216z%\275\305\340\305\273uP >3\204 \275\277\311}\275\000\311\310\275\226\013\320\274Or\177=\331\257\021\275f\317\017>m\315\200\275\352`\022\276\211m\337\275\221T\304=\201)\027=\261\307\274=\177\360\233=>\326\312=\006P\370=\235D\251\274X\342\256=<\t\355\275\260\'\263=\001V\021\276\'\310\255=\271.\357\275\017\257\273\274\373z\207=Y\r\312<\317A\264=\303P1\276\267\t\260\275\355\362\002\276\323\1777\276\261\327v=}?0\275\271\020B\275\204h\271\275\016\342\322\275\336\301\032\273\021\2763\275\323\241\257\274\2755?<\273\307k=`\377\231=^\327;=hu\006=8\272\357\275\221\373\366<\301\276\227\275\250\212\256\274\236\261f=2\026\306\2748\t\r=\321\002\205\2755\"\233\275QK?<\336\230e=\300\274\273\274\203\234\260\275k+4\275\215-\222<v\256\275=\t\036\324=e\332\000\276\206\014\323\275\276\0055\275\307\374^;\316\265\006={N\001\275\353\361v\275H4\223\274#m\016=>\037s=t\205\201\275\014\264j>fb*>\013\020I>\016\305e=]@\264<\250\204A\276\t\315\t<\276\215\001=\235\007;>r\031\004\276\305\231\225\273\212G\302\275mp\362\274*\252i\275\262\r\344=\3128\235\275\360q\025\275g\007\305\275y\013\332<\362\375$\276?\215\273=\373\034`=\0045@=\341\214S\274\367\3209\275\314\221\017\276"
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias0/Assign"
      op: "Assign"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias0/read"
      op: "Identity"
      input: "deep/weights_bias0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
            tensor_content: "\305zE\274\311\024\313\272\325\223\314\275\331,6=\357}*=\021\377!\275\022\207H\275{gR=J4\007>\006\332 >&\236\354=\226\t\332\272\343\373\340\275q\202l\274\032YH=\"+\n>\037\264d\2752j\241<\177[\327\275\n:\023=\230\236\377=B\211\025=\342\354\261=\261\227\333<Z\344\221\273\010\322\001<\272\004%=d\222\220\275Vu3\276\024[\245\275GE\307=\266(\032=U\014S=K\351\021\275\341\\\n=\014\324\"<^\256\001\275\215\345\210\274\267J\266\275\261_\003\275\006\022\343<vp\005\276\026I\200>\"M\351=m\0277\275{\312\340\275\\\354\005>2\214|\274\245]\237;\377\211(\275M6\006>\314F\035=\214\264c<\014n\366<\25618>\273\301\315=O\235\323=Zc\007\275\347nj=\026FU=o\325\312\274\354\250\022\275L\2518<}\370w<\331\372]\276;\375\225=\345\'\360=\253@\234\274`\315\014>\241@\256\275%\245\377=\325\357O\276\241q\335=\372\010\355\275\362\".\273\232\237\033>\3158\201=_\313\203=\244\315\211\275!\200\322\275c\374i\275\272\267\272\275\331=\030\275A\372>\275W\333\234=`\2543\27608r\275\337\346!\276\314\312\273<\330\325\266\275\367\336<\275Fd\350=\32593>\247\255\302<D\307\320\275.r]\275\025%\n>5\033\013>\341\211\035>\213D\232<\225j\201<\222\361\021>n_Y\275RX\000=\013wO\274x\367\370=n\237\305\275B2\250\274\224k\014>p0\231\275\252\234\355\274G$H\275rv\207=\302\334\275\275\364aa=e\271c=\266f\211=\311\310\246=rK^\276\027\351\010>\2267H=\244io\274\3242\213\275!G)\276\\\235z<\345\3552=\334=\026>v\344?\276?\364\203\276\330\335\007\274C\307Q\275\004g\213\275\273\177*>\212\260A=1\324\302\275r\256\371=\363}V\275\251-\017>(\036\322={\223e\276=u#=8\nJ\270*\276\323<D\232\344\275\037\003v\276\347RD\274\024\311\t\276\010\215\013>\033T\323\274\025\274\235=\236\376\001=\326\330_\276^V\374:@(]=<\321\022\276\324n\247\275$\345\357\275\216[!>G\245\256\274y\342\"=t\271\200\275\034\020\321\275\004d\277\275\325 \242=\250\244\266=(\363\246=o\341d\274_\026\323=IG\361=\251\257\n<\007\273\224\274\217W\r=\241\226\006>-CG>7\331\344=zb\374=Jw~<\023\2023\276\313`\017>V\303f\276\357\305\033\2760i\206<\256\353\314\275X\014v>\033@H\276O\340\013=&\2778>\260o\027\273\252\212\261\275\211{\217\272B\013\212\273\226\251\263<\355\254\215=J\317\236\274\270\264\033\275\260\333\247=\340\005x\275J(,\275ii\277=\270c2\274\005\243M\272y\301\263=\031J\224<M@C\275\006\365\354=|\352\216=\016\007\'\276C\013\256<9\341\257\275\2149\303\275\203\234T>{q`=\220n\016>\330\007\201\276\372^\026=\236\347F\275\246\016 >\302\003\"\275\241\014\273=\265\373\207\273\222\353\251\275Wc\211\274\317$\206\275\315\304\025\276(Kx=\277{\333\2747>\030<8%\003>\221h\324\275\366*\361=\211\031\276\273e\n\345\275{Y\014\276\033\215\330=\036\234\276\275\356G\234\272e\204*>\302C\246\272\307k<\274A\003\234\275\335\276\254=w\342u=y\202\313<\334\'G\275\226\256\367\275\257\203:<\305\2618\274\206\363\257\275Kn\017\276\351\353\260\273\361\r\034\276)x\221=0\250G>@\274x\275\241s<\276 \261u\274\037\217S>\326\312.\276\003\333\326<Iy{>\'\331\320\275\247s\304\275Q\322\330\274\324\240\267=\267\223\245\275\231\3560>3\257B\275V\356\233=\247 \022>m\'\224\275\240\002\003=\266O2\275\032\334V>A~\273\274\377n\374\275d\017\235\275p\020\200=\345\002U\274\271-\357;\202\034N=>H\220=\312\250\216<\261\242-<\005\017\017>0\363n\276(\237\220=X\260\277\274\325I\000>\245\342\366=\004\204\233\2752\007\014\275S`\024\276\2752\200\274\343\274\355=\310\307\020>\301\226,>|\271\252=\352E\275>\004\312?=\031rX=\035Wg\275\007\366\361=\024S|=;\213f\275\250\327z\275\317\016\274\274\235u\377<\355\'j\275\204Tj\275\375r_\275%\007 =\342\354\n=\005\347\325=\265\233\343;\226\364\376<\031\337\010\276\205\260K\275\001\002G\275\243\325\301=G?\030\275\306w\002=\246\230\244\275\330\363\r\276X\307/\273\367\n\223\275J\235|\275_\203\007\275\204\344E\274%\250\227\276\322\002\243\275\330u\003\276\334\2272>\227\210`=\335l\355\275\374!\"<?\254\202\275\357\370\242\275h\207\032\276\006_V>\203<\360\274\322\352W\275\341\010\246=\001\336\255\275\256Y\035>{~\253\2743\315\n>\376\330\301\275Eb\340=\377(-\275S\232\005\276\227\005\020=\303\252.>\255oD=V\343\026\275ng\000\275\2307\022<\344T\226\275\372\243\331\275\352\3139=x|\n>\377+Q\276y\365k\273\033\020\323=K\312\330=\203\210R=\251\234x\274\226Sm\274\264\rl=\216\212\241=N\375\001\275\n\226\032\276\033\224L<\027\225::\221\347,>\333?\305\275\221\000\340\274Dg\256\275\2158\366=\037\304&=s\022\016>\262I\256=\226\306\320=\370u\003>\373\0020=9:\263=O\373\034\274\001JR=\204\320\324<\316e\203<\225\301\213<\016\203i\276/\344\242\275b\242\242=\341\260\212=n\001s\275\267\tM>\036\260\003=\257W\030\276b\246%\276^e\354=\016N\305\2758\231\203=j\301\257=\n/\201\274\331\253\261\275}Do\275\373\227\200<\224\226\227\275%\017\033;\371\254J\274\303s\000>\216D\210\275\374$\356\274D\020\215\276\227\224\341\273\237\363\220=\276\254\311=\322\345\313=x\272\t\275u\222<\275\245\202\325=\270\374H\274O9\375;\331p==S\220\246\275|]\266=\337\337\276=\230[#\276 \032\237=\021^\234=\262\351\254=\200\250\313;q\236\301=\370\017+\2761u\t\276\331\n\226=R\026)<xc\035>~\212)=\340}\220=iF;=\273\355\372=\023u\347=\314#\320\272D\254\005>VB\225=\365\n\267>\277\263M=~E\345=\257\334\306=\032Ic\276\212\242\371\275[\000\032=\345\355\273\273\025\215\346=:\362M\276+]\201<\362\233\036\276\004\201\322\274j\205\024>\206Z\317<Tq\020>z\356\207=>e\273\274\352F6\276U\304\222=\n!\022\276\225\313\302=\230m\n\276\036\220\370\274\202=,\275U\206\345={ks>3\224\375=\345\256}\272\200\236\216\275%|\347\275~\351z=^\312\327\275H\035\221\275\3477\345=\264\303Z\275\014\305V\276r\204\003>\334\373\\>`\227\375=\300\030\226<\301\'+>\013m|\275p\277\'<\222\303\263\275dF\003\276\036$\352=\244\306v=\3221A={\326\031=b\364L=F`\204\276\220V\342\275\3246\010\276\212?H\275\207\361\212\275\210\027y\274\373\306\\=\313\306I\275\237\320):\207|8\276\003\017\277\275\215\2706\276\306\022\260=0c\321=\'\010\307=\220\323\353=|-\360\275\222\337\032\276\347\346\324<\3202\216;\231z\362\275g\344|\275\270\334\036\276\336\324\210=\322%R=\224\311\211<\322\321\234=\265\021\t\276\272\014\262;\313\273\355\275\345\314!\275r\355\215=\211@\034=\302m6\272%/\027>\217\275\323=\366I\006\276E\211q=d\361l\274\217p\007\275\304,\037\276\224\240q=\031Y\271;R\2650>\213uW\275kCq>\315\005/<\027\222\334=\316;\311\275\314\344\355=t\2451>\213\203-<R\317\035=S\260\355\275\263\226\340=\264VZ\275\022\035\031\276ym\004>\300\327\231<\375/\312=\244|*>\t^\307\274\214\225\001\276\205\210(\275e\005\'\276*\273\007\276\344\323\311\275t\377|=\">\237\275\352W\324\275W\316\252\275\223\270\226=\344\324\224\275w\325v<\362\233\361\274\353\245\227<\310\303\367=s\317\206\275<\210\200\274\361\266\357<kz\355\275\247\365\367\275=\014M=Bh\263\275 :\t\272=*\312\275\273\333\273=\001\037\307\275\\^2\276<L!\275x&\266=\206\246\202=%\353$\276\"Z\243\275$\3449\276\224\355\\=\351\322A\275\252\253w\276L\344z>?\235\342\275\247\351\204=R\251\025\275\254\014\214>\321\340\276\273\346\r\025\276,\034\372\274\257\373U<_\037\021>\353\264a\276\361\217K>5\222O\274\232ho=\372\310\276<\'\215\370=E<\005=\251\246\361=:\307\275\274>\203\\\276\367ZT\275;\314m\275\320\006\005\273!\334\206=\324K\345=9T\023=eb\232\275D\222\346\275>{\255<\024\340\261=e\271\245=\250y\002=\275\304F<\365]\276=\337\275i;8\226#\276<4\002>(]\334=V\330\250\275\2063\336<\332\211\247=\366\356\314=\005\004\265\275\003\204\335\275\201\234\003\275kJ\243\274\016D\377=JD`\275\333\274\356\274\260\372\220\275\232\237\372\275$J\255=\237\305\367=zu\310=\3615*\276\331V\322\274\236\"\255\270\036#,=\\\014\250\275\307\210 \276S\177q\272\277m&=(\203\033\276\307\264\336\275\235\3054<:\337\245=0\312\205\274\003\027\002>\354\255\030\276\034\n\021\275F\322\'>\300\202M\275\020\231\031\276\2416\022\276\302p$\274-m\020\272\317H\030=\370\325K=\3219\331<\373\372\301=\263\261\212<\177\023\261\275\300\027\303=\323\032\001>G|\372=\224\316\240=h\0246\275\201\\><\277\221~=\220\324x=z\213\272\275IR\266\275^\301\316\273\345\200[=&x\277=\213\370\373\274\354\001\r\276\022:X>\275g\026>s-\230\275~\365\273\274\3277c<\310\036\327\275C\304s=\206P\227;\021\002\312;\026|<>\271\021\016>\221\024:\274`\357\267\275Y\272_\275\363#\212<\016gk=\037`\246=\321\2049\275\246(b=\243\352P=\336\360\330\274#\005\261\275_cE>\321\2074\2762\347\026\276\202\261-\275\021\374\332<z\031v\275Y\226\251\275\355\325[<W^\347\275\025\335`=\302\355\213\275KW\007\276R\374\330=\275\323[=\001k2=%\0260\276pI\275=\250P\257=m\"\356\274a\222\375\274(\244\247\275u\306\255\275G@\213=}\355\010\275\035<\352\274?<\025>\342x\306<\231s\270\274\013\250\217\275n(\352\275\224t\237\275\376ep\275O\010\235=\347\365\201<\022\014\241\276\231\222\373\2728\273\376=\024\324\342=1\231\204<\312\2707\275\346\376\274<2\0003\276\274\021\021>\327N\337=?\250\265=\016_\002\276\2464,\275\264\353R=\032\306\365\275\322\004]=U5\000>(j\\>1+\003\275\204\335[>n\276-\275z\216\345\273\366&\202\276\314Si=ji\335\275\371\313Z\275\"\333\027<\245D\007\276\244\254\247<\024\221\324=\3672\017\2764C\226<\027J \275 \273z\276\336\235\215\274\263\022\215\275i\272\257\275\207\331\010=\357|6\276\347\253\347\2752L\022>\311\204\241=\210D\363<k\375G=?\340s=\257\321\002\271=r\232\275\321U\241\275^\010\007>\002\366O\276K\371\365\275\267\324$>`[\202<\037+\367\275\232\000\351=V\303\t;\315\364q\274\342A2\267:\202\251=gz\245\275\232\2755\275\313]\260\275-\233\362\2750\256\033>\2154\351\273\211|\333\275\347\351\021\274@/\202\275>\273O\275\306\242\244\274\357\203\370\275\231\356\002\276\034f\004=\010[\301\275\233\021\312<\301\343\035\275J\364\201\274\206\013A=\323}\n\276\234S.\276\325\263\362\275\"\225\251\275\014\234A\276\270\374\000>\t\322#=A\252\332=\036\203\026\276\202\352\201\275[\350\213\275\271\035\035\274=HU\274@\223\301=1\360\371\274\360\334:=\264\365\025\275\230/\014>6\306/\274\206S\302=\2136\250\2752\024\275\273\207\300\210\275\346\262:\276\300^$<A\016\224\275<IB\274\206\325Z<\211W\267<\026l\330\273\213\251\240<\340\014\227\275m\026\375;&\232\217\273\026vg\276\242\250\t\276\271s\236=c|\004>\211)@<\255Cc\276\323\233\231\273\263\327Z\275v$\242=\202tK=\177\254\277=\030\005\220\275u0/\273\'U\267\275\216\363\357\275\351\346\204=\016\261X<\004(n\275p,==\216\204\t\274\004pi\275\010\321\352\275\212\320\213= \303\005>o\224\255=e\206\025=9]q\276Fl/\276\320^\300\275\251\206W\274\030]\301\275\330\326\243=w\303\303=\337\373\344=\340/\225=\273y\303\274\332\021\375=l\271\331\274\204V\302<G\317^<Q\305\005>\352\200\n\276\034\315u=\314#\034\2753r\010\276\310\334\270\275g\304K<\362\022\341<\312\207\352=]\276\246=x\374r<>\341\254<\007\n\006\276\304\035\267=n\305\022\275\276\223\347\275\331D\010>\026\201f>G\216\216\2741q\363\275\205\007\260\2761|\374\275`5\022\276a\245\020\275Z\213W\275r\025\030<\350j\254=\3063\247=\005\322\201\273q\243\206\2753:\356<\\\341\242=0\376\007>@IQ\276\247\2740=\335\207R>\364\375\310\275`\325:\274B\010|\275\352\262\234\275\332\271\320\274\346s\225=\271\030\207\275\303\332\232>\245\235\320\275h\331A=\346z\020\276g\207\322\275z\233\247\275+\022\355\275\000\242\021>\255\313\252=\256\023\002\274I\272\007=L\341\204<\235y&\275\242J\036>G\353\n\274k\237\360\275i\026\304\274\274\\\266\274\300\334\210=\025z1\275;\266s=W(K\275:/\244\275\270\314\307\275\266\0210>\306\212\201=\265\313N\276\352\3701=\310\340I>b\344\036<ow!=\030q\204<\254}\327=\372=\205=\363b\326<\204WX=\367\204\215<Lx\260=\032<\340\274\235[\325=\"\232\003>T\240*\276Z\367\340\275\240\315\273\274\036\226\027=\276\360\247<v\233y=SA\304<xP1>\237\306Y=\010s\230\2752\373\004\276l69\275\264\205f\273\354\370!\276+\273\210\275\250j(\275v\201\037>\337Ad=\204\341&>\221j\331\275\371\007\333\275\210\216\024>x\246\037>\200\013\000=H_n=$1!\276\370\311\367<\214`\013>\373\361?\275\004w\214\273\320\370\332<\230\245\336:\224!<=d\256\257=\275\013\r>-\277\r\275C\351\264\275\202\031\355=&\334\\\274\271\025=>\301\303\370=\036\252\211\275\242\307\037\275\332:\311\275\350c\372\275\000\275\014\275\272\201\220=\344\030\206\275W\3330>P\013\r\275\200%\t>:\\\236\276\246\260\340=\234\307&>{\343\230= \202\230<\245?$\2763-\017\275\245\320\274\2749\266!=&&\342\275p\354I\276\004i\275\273Z&\372\275\201\274/\275\240\223\033>\nq_<\227\036\270=\364k\273=\323o\203\274\r\342|=m\220/\275\246\036\312\274\337\221\325\275\2634\232\275\325\034\344<R\353\001\276\331\326\'\276\200\200X=\352\360\001<\373\010\265=\231d8>\030\247\016\2769T\001=\270u\261;\017\254\254=\200}i\275\255\315\001\276\263C\004>\207\022\213\276\253\242#>\315\363\354=\300QW\276\"`\014\276J\013\215=\032\254\\=BD\315=2,\014\276\326x:\275\243\264.\274\220Q\327\275\352\343\227\275\203N\203=\370\202\006>P\270\274\275\235\033\376\272J\327\305\275\010YD\276\354\250\037\276yz\021>\006\237\201\274rv4>\\\276\332=\323B\001>\025\244\267\275K=\351\275\367H\337\275\306\354K=\237\255\322\274\324\237\203=`* \275+_{=o\306\033=\355\247\325<\247\302\310=,\205\303=\323)\006\276p\233&\275g\223\031\276o\325\002=UAB<p\343\364=\036\213\203=6J\246=\3405/=\"\r6>\332O\251\275\000\263\214=m2H=\023O\240=\177.\306=\240&\024=\326G\265\275\356L\202=?\331\037>\235\246t\274!\225\010\2769:<\275\270\311\253<\224\314\260<\245=,=\033\310\002>\366\370i\275\256p\r>\022I\021>\314]\t>\202\250\021>h)r\275\\\351\225\273m\236\367=\317=\320\275\221f%\274\263\330!\276\276\276q=\035\027\372=\006\\\252\2753\232\214=+_\314=\312\370\275\274.h\031\274V\266|<\014!\026\276\331o\231<\035G\035\276\356d\202\276\005VC<{\0252\275#\267>\275\234\366\270<\014\231\367=5\336\023\276\002\254\334<K\261:>A\027\241=&\374\377\275\304\361\331=Ce:>N\021\375=h\307\320\2743\267\001\276x\363\357\275H\352h\276\320\370\360\274\372\035O>r%\014\276\331\216:\276\371\t\200=9Z\006>\346\203\035>\341}\017=C\354\026\275\325w\035=\272\221\226\275?m\300\275\337\312\271=\215\271\207\275\3229\212\272\324Z\220\275\265\206\335<\026\235\343\275dt\255\274\013\177\357\2758\344+=P\344\260;\274)|>5Hc\276\360%%>\301\344`=\362L3\276@\343\003\275:\3321\276m2\001;(\343\001\276\337\024*>\331\314\255<\372\227\021>yJ\016\276\030Mz<\276?\306=9\001\355=+)$=\264\301\334\274.9\220\275x\307\241\275\347\204W\273\245(\r>\032\034\241\275cC\210\275\203\361C\275\272]\256\275\r\272&\275Z\362\247\275]\314\263\272\n-<=\275\021\003<\330\177&\274\376\353m=\3041\211=\005k\246\274\005\337\366\274Q\3624\275Ag\210=h\273\021\274E\272\246=\235}\027>6H\026\276m\203%>\310eq=U\245l=\363e\022\274,:&></\302\274\021;\222<.l(>{\375\370<\023C}\2751\032\204\276\327\0327=\375\240\217<\337I\204\275e\247\212\275\330l~\275^,\336\273\327\274c\275\261\370\377<.\366c\275$C\331\273>\334j\275\037|\315=,\242==\366C\024\275\210\013\310=\031\266k=\364r\225<\013\346\331=nH\206;\245\266\332=\300M\022\273\000\367\210\2747e\253\274\'d\201<\251~\205=T<\031>\036\322\211\275\276\032\335\274Q\324\264=\000\317\365\274\310\243\027>\245\"\374<\301W\234\274o\250`>\264oQ>d8\214<\025\353\340=y\3200\276\233\240\034>t\323\020\274\237\253Y\275\225\333\000>\217\215@\276\032\016\002\276wF\370\272\177\246\315\275\366\254\335\275\221\243\031\275\352V;;\371\366\202=\267^!=5\330\323=Y\223\270\275\027p\027\276\005\\\214\275\036\335\213=hF\357=\'\212\016=\231\034\327\273\222\307\220\274\271\021\223>\266\342\365\275\321r\010\275\246\356\215\275\243\267\r\276\025\273\220>\277\245\342<5\257r<hb\250<U\235\027\276g\316\022=\332\372\221<\363\242\375\274U\376\002\276K$\207=\303\365\223\275D\326\r>y1\243\275\327(\327\274Vv\323<\007\356\255\274\217\3040<GLS\275\3278\323\274\235T\t\276?\207\202=\250\2456>\212\233\346=0\200\017\2760\222\370\275\212\232\300<\320\227\344<<j\206\275\247\250C=\251\364j= \242}\275\220\177<\275l}&=\031\234\336\275\031\216k;\326\276\206\275\257c\207\273S\265\000=\246\2752\274\277\341\357\274p.\271\275\013\247W<\237\003\222>R7h\275\250\341\213\275\325\316\202;\316\177\016\276\036\t\301\2740\375F<\371\310u=\314*\242=\234\336E>2{\262\274\215%r>\002\305\300=HW\353=\243\350\334\275#\027\204\275\225*\260\273fP2\275\303:\035>S\007\272\272G\270\372\275-\346\017=P\022\206=\311\232\220\275\365\016\220\275\001\365\027>\373S\256=\3723\250\274\221\212\030>\275H_\276\237\271\266=\366E~=\252\362(\274j\254\025\275a\244\346=\326{\267\275;\032\263=k\304\325=\355\272\336<\307\246\r\276\030n\357<^n\322;*\007\364\275Z\340=\273\226\274\002\276\310\363\357\275\000\336{=2<[\275iP\262=^bw=\335D\215<$\364\036\276\216\212!>\374w6\275\276\262;\276\254\376\001>\246\370\347=]\207\271\274 2;>\002\365\376=\310/\007>\355<\203<\002\373\332\275\2306$\275\022\370O\275Eu\312\275\255i\002\275r\216\200\276\365\250\340\275\035\024z<\210\326\020>\372D\326=\026J\034>\335\331\361<\367\014\345\275\313\360\003>\3324P\2750s\003>\177\\]\275+\307\333=\022\344\271=\320\205c\275\224Pm<\370\346\030\274\373f\332\273\312o\360=\303\200\361\27428[\275M3K\276\004^\023\276Ys\036>\317;t<\344\005\231\275\352\256\302=\017B\223<\005(P\274\336tn<\234\374\235\275\202!(\274[\213\273\275\264\333\022\276\310\323\007\274\017\007\037\275\"U\226=g\013\005=\326%\024>\002g\223=\266\226\321=\347\200r=]\313\332=\0326D>\336\010M;z\334Z\275!\371\216=\024n\206<\025\361\205\275\200\270\340=\037\370\335\275\021S\216=\262K\345=\r\017\211=:\350\216\275\310\367\007\276wZI=>\257N>i0\024\276\323\377\305\275\324\337\014>\357A\036>\004\025\243;[\316\361\2732]\346<\233O\276=\264M\332\275\256\331\020\272!\330\237=\177f\307\275\223`\251<3\014O=\223\3133\276\n\261\212\274\312\004\227\275\250\225\315<\2667\246=<\266\347=\3439\300=\246&\004=\345\242\r\276S\246\232\276z\202L\276\307\332\214=\350J\257=j\230\300<\355R\306\2749\t\377\273\205\302\367;\340\032\301\275\031\311\'\276\205\223n>\334\360\262\274\177yk<\215\337\225\275o#\t\275j\264\366\275\246\031\023\275\324\210\201\275\r%[=#\260\002\275\010\335\200=\037\320\202\275p\220\230\275\307\001\203>\225\202\215=\202~\274\275\307\251\245=9\307f\276\207\353\313\275n\005~\275`\330\354\275\032d\216\275\352\260m>\211:\364<m\254\036\2751%s\275iP\224=\227\355\213\275\351\367\201\275I\322(=?\207\221\275\001\020\030\276\366\243\t\276w\271\225=\277\342\025>\220)\006\275\277\302q\275\237\212G\275\365\300\027=\"b\254\275\006\016\340;4\321\350=\\\2622\275\245\006\362=W\333\013>\213E\215<v\345f=\036\307\032>\310\301\364<\1779\003\276\230\214<\275P\321E\274*\305\351=\325\374\035\276\352\247\354\274\2418\212\275\272\025\200\275\036\246R=\203C\241=\330\317\253;\203P\306\275rx\337<\323\205\034=\346\246\r\275>.6=\223E#<\342Rb<\207j\004=\341\2730\274\251\373 \276}Kh\275xck\275A^\025\276(\347\340=\027G`\276\311+\r\274vM\016>\030\003r\276=\363\207;\360U\017;No\273\275xp\013=\3261<<w\251\276\275\271\321\010\275_\014\267=}\253!\276@\010 =HgZ>\322!\256\274\241\036\003>\370\350\337=\247B\246\274\301\211z\275l[\206\275\317\336U\274\215\256\234\275\377BW\275\330\t\031;\350\344\210=\362\033\220\275!\374J\275\225\227w\274\014\035\246\274\236\346\326=\266\213E\275\225\005#>\236e\020\274\206\265\325\2750\331\213<\032\025\313\274$\030\022\276\004\204\261=!\313\300=\344\222\033=\377\324\344=\225\235\353=y\202\014=,\210\234=\243\330s\276\306\005\001\276\347\354\200>\264y\035>\003\267\375\267GH\204\275N\3764>\262\335\004>U\225\000\2757\317\177=M9\006\275\200\234\335<\032\237\331\274\206\315\332\273\202)\t\276\260\254\333<\264I\211=\361\255\325;8\267r>2\352~\276\363\270\223=\024\336\256\275D\260==#=\323=\370\323\030<\020\360\030>\263\307\362\275\313n\003\276\222/\025>A\362\244=y\312E=\365\203|\275\224\211\313= I\360=,ry\275\232\367\361\274^\230\262\275d6}\274\370\025\343;\003`\304\275\032\027\244\275\334\227+\276#v.=\037]\203=\317\271\034\275\325H\254={[\322\274\000e1>\315\264\333<D\265j\275\300\375\264;\377\312\275\275j\353\321=\251\253\000\276\346\244!;j\020\374\275\343\217\237\275v\223\300=\013\262\235\274\257gE=\001\270)\276\334\010\217\274\027><\274\340\310|=\215\210\247\275\3123\273=\245\321\367\273\227x\340\275l\007\010><\325\027\2759z2<TD\356=W\000\231=\035\250\211\275\240\203\364\275\207\205\275\274\300z\232=\023l\376\2757w[\275\366\306\231=q^\352\274<\364R\2759\333\376<B\216\206\275\360\0074\274\334\0224<\265\035\032\276\331\005\303=f\310Z>\332\263\326\273\236gA\275Mb\027>\210\243R>\025\030Z\275\010\322\315=4R\261<v\\\200\276)\355[>\367\261\350=\352\361\243\275\007n\365=PQ\251=)1\274\275D\207\334\275\353<I\276`W\237\274_\005\231=\010\206\222=k\367\211>c\360~>\313\223y=\226\227k<\372T\"\276\027\227\006=ElM\274W\314\366<\320\240&\276\371r\362\275\204\377\034\276\010\n)\273\361\263\270\275G\002Y\276\234\242\327\274\272\317\004\276\201\212\256=\353&\372\275\002\374\264\274{\031i\276\026D\006\276\363\300+\273V\034\031>\034T1\275c\025\212\275\274\'C=\310\3448\275\226\322\345\275\216\2248>\350$\226<\370[\026>F\365\242:\300\345\211=\375\256\001\276\360\335\365=D\322\326\274e0\366=\310\200\231\275\301\3306=i\232\204<\224\300D=\\\201r=\324\213\003\276\300\020j=7\242u=\200\037\267\275h7G=;\336\246\275B_\376<K\347\227\273\254\2162\276\340S\t\276\342\224M\275\375\033\352=\217\t\230=G\207%\276f$Y=\303kd\275\266L\033\275\315U\356<\355I\366\275e\324z=L \021\276\025\227\322=[[\371=F\200\327<>\013B>\006\350l\275&\332\037>\235$p\274\251\324\314\275 \355\220=\221`=\275\206\322\027<\215}s=\335\350\306\275\222Im=\004\000\020\275\223j\304=\223\366[>;\301\352\275%\000\373=\265\302\343\274\343\251\232\275b\266\313=\205V\202\275\370\262\217=`J\032\276x$\272<\246f\037\276\001\254\357=\357I\023;&F \276(\2470\274+\372\035\275\353\241\330<?j\365=\201`\220\274\256\330\226\275?\343\262=Z\270\344=\nei=n\217\216=\213\017\302\274p\t\000\275\035\027\371\274%\332\271=;\325\344=\000\364\002\276\201\333G\276\005\363\310<\211vi=m\266\">\350_\306<\371\243\201\274\222\362t\275\336+Z\275\350\356\231=\356\375L\274\376x\254\275\037y\350\274\271\350\360;\265\007\345=5\006\025=\277\235\322\275\037\376H>]\254\250\275\326\211\217\275\r\026:\275y\232-\275\374\264:\275oZ\226<\216E\001\274\366Z\250\275\226Q\354\275\333\257\030>\357F\020>_\211B=\221\244\030=\026\025\333\275\266\016\223=y\326\023\273\264\2005\275\324\036\327<\243\221\327=;\336D\275\313\265\2439{Oi=\370fC\274\336\251\313=\327\022\357=\3609\263=\207\263\204=\367\216\031=4u\212\275\262f9\276u\321\341\274k\032\225\275A0\217\275\372\324}\275\271\251\200=J\251\016\276\223\341{\275>J\360\274\225U\252\275\242S\316=a=Z=D\201\315\275o\311!\275\371\252\030>1]\354\275)\031\034\275>\267\241\276\221\347\030\276j\317\014\276-\020q=\025!A=\273\327\\\275 \036\245<oS\271\272gGT>9\256>>\264\340*\275MO\267<\223\212\206=\026\333\357\275a\230\000>C\240\014=\016\210\341=\023\200\233=r4\243\275\305k\034>\312\031\014\275\005\032\327=\346R\222\272\035]\201=\313}\003=?\271\340\275\216\230\327=\n\005W\274\233\010 \276t\033\345=\205\033n=ui\311<\'\275\210<=\2315\275\236\356\004\276\214VQ\276\264\212\256<.4\223\275\201f\363\275\266\312*\275^|\002\276\315\302\257\275\2602\033>\363\3270\275\325\0257>\022\037|\275\365\021\221=\342\324\377=\240V+\276\360\375\211\275[\250\373;\256\371%=\0010\341\275^\010\024\275\363\365A=\264\347\323\273\2074c<\005z\360=LX\240=G\376\013\276\031\037E\274r\020\227\275\237S_\275x1\'\276\366D\245<\360B\327\275\324,\234\275)\342)\276i\333\017=\210\310\264=\220\320V=7\023\">\273\363#\276\300\017\021\275\225\334s<~\315m\276\376Q\354=\261\300{\2753LJ>\375\275i\276\240\327\006=p\335\244\275\235\217\007=U\013$\276\357\255\310\275}8\373<R\310\233<5\r\222\275\022A\271<\362\035\026\275.P\177\274\255\'\035\275\362\202\340=\203(\313<\327l\375=\021\200\235; ?\275<r\336&\276LS\024>\013\347Y>\3024\306=\013\260\221=i{y\274\357>\235=I\026^>\261\232\255\275\330\2016\274A\034\035>\237Je=H*\n>U\362V;\355\237\354=&\226\227\275s\236\346=\307f\204\275d\352\335\275\300\312\333\274\364\257\236=\356u\263\275\335i\322<\236Md=CI\350=11\344=\241O\233=\340\377\037<\334\316\013>BA\266=f@P=\177\020\231=\201\274\327=\022\315\207\275([x\275\232\240w>R\261\232\275\350\206=\275\026\005\250\275\257\336\263=\026\323\276<\374\317\235\275\270\245\227\275:\234\363=\205|\367=\010\257\313\275\026\371\241\275M\373\324=\300\263\361\274#1\221=\327 \322<<0)\273\341_\223\276\017O\275\274g\272l\2756\257(\274/N\330=\377\'\256=\311\344A\274\317\357\337=\372Lu\275l\023b=\357Q \276\303\026\334;}\006\177\276F\206\005\276\247[\231=gU\352<\006\251\010>\313\305\272\2741\315\n=\362V\234\275\342u\313=0\033\272\275\345\251s\275\250\270\222==\301&=\325\\\320\274\240N\200;\227\217\r=\304_\014\275\213\315\253=\271\256\344<\261\373\022\275L\t\361\275R\316\000\276\342bS\276s\013\016\276\000}\317\275\230\332\224;(\364\235<C\323\275=`q\302\274\313\341 \276\360H\326\275\007\017\376=\252\006\245\275Z\017\267\274\000\304(\275I\246\267<Oo0>\212Wt\276\322\302\024\276!\177g\275\264\025\223;n\207\001\276\257F\246=fv\232\275_\242\000\276G\334\013\276\177\211\373\275>\016\221=ko\257=ak\205\275\353P8\2758,\031=\003L+\275\275\232O<M\305\211\274\324\"\351=\266E >M\205 >\306\247\311<\266A\206\275\310\204j\275\256e\344<\264.6=\007u#\274S\335\267\275\203\2302=2\257\234\274s\315;=\2011\326\275\361\202\037\276\353\270w=\205\371\236\275\363\2041\276\021\\\263\275\3637\346\275Z\346`\275\0229&\276\226\274\005\276\220\004\214< \377\240=\326\367#>\3760\025>\033g\233=3\301$=\017K\340\275\343\215z>D\2271=\025\242\032\276\342\326\020>\223\304\310\275[\230\224\273JE\324\274p+\031\276\245!\251=Oa\261\275\363Pj=\337NE>=~\345\275\337\"\237=\030\224\023=WI\007\275A6\260\275\332\255;>\241Q\244=\000\376\\>G\2510\275\372 \324=3tT>\034\307\307<\367\t\365\274\241VI=\307|\033\274\303z\022\273mW\004\276\256\272\206=\'x\214\275\323\212\206<#\243o=\207\361h=\237\241\273=C\375\236=l\210\343=sg\270=\216\362V=-\356^\274\274\"\r>n``=3\200B\276\201\201\334\275\324\306~<\230Q==j\214z\276\020\202|\275z\034\n\276\035\267\317\275t\n&>O\0170=\366\316\305;C\211\030\2767\246\243\275\0350\354=\233\220<>\336V\001=?\341\334\275\254\236\253\274\314\261\343\2753e\013\276\371\355)=\004\213\305=\202\217:\275\306\310\233=|\265\230\275u\223\253<\036\306\330\274\025b;>/{\340=/L\032>\r\r`=\351X\035=\2730\231\274Z\271\307\275g\257\245\274\324,\0069\340\003\025=\3423\203=\224\267\342\275\306~\305\275(\367c\275\222S\033>P\314\266=\340\336\271=\354\302\213=\201\347\251\275\025\n\004\274\343p\302\275n\321\372\275M}\005>\306&w\272\303v\354=Mx\204\273\272\"\310=\273\000\220\275bo\336\275\233\263\206<;Z\010\276a|\323\275\220\016\351\275\321v0>\272\215\220=\320\000\245=\311\",\274Z\221\312\275\237!K\274\036\224\031>\2544\374=\353\237\302=&\372\315<\250\005\221=D\031\004>\247\320\353;\300:\201\275eg-\276\247y\007=\035\262\275=\034\331\215\275B\242\026\276]\306\225\275\2725!<2\001\303\273\344\354\243=\302\220>=\014~E=a\367<=`\007\304\275=\006\207=\215N\014>j\370\257=3\336\211=\243k\355\273-2\375=\331e2\276\3503\007;D\275#=\317\024\241=\021<\303=9\337\217=\217\030h\275\037\021\347\274;\205\034\275\255\257%\275\0322W\275\304B\232\275\364w,\276[\272^\275%\211_=\212\245\242\275\372\363\341\273A\252\315\273\230\373\020>8O\243\273\345j7>i\231\r\276\246\2464=\372\353\240;I\247\215\275\031\317J\275\347\t\320\274\030@\317=J\356\357==\t\350=\253\007\341=\312C\214=\302q\037\276\313\207\264\275wt\232=\2334\215\275\242jb\276\002}&\275\031\345\270\275H`\214=\250,\270\275\t\367+\276a\037j\276w\247\242=\205e\227<\323<\220=\033Ms=\317\322\033=\303\352\317\275\372\331\024\276l!\202<<\327\334\275\274\335\025=\214\254\370\2746\256\017=]\000\021>\251\354\374\275\215p\330\275\037\'\205\275\022\271\320<\222\276\004=6\214\212\275\354\337n\274e\303\331\275\350\352\252<\271\277<<J\325\316<is\377\272\200\200V\275xe\027\276D]\306\275\266]\271\275\310k\317=\010;\316\275\2510\323=\362\366\250=\032\350\230\275d\356\356=\253\275>\276\36147=\006\262\326\274\376U\225<\335\334\362<(\307s>\202\212\213\275k\244\344\275\031\243\333=\251\342Z=g\233\371<p\272!>\345V\000\276\232\022\224=\307L\363\275\233{\317\274\0139\247\275\034\322s\276b\017\230>\333\240\022<\332\226\307<\356.\323=\352\327\251\273\273\332\363<6\224\004\275j\252i>\332\262e=si3=\343\230\216<\364\366\233\275q\017\025\275I;\034>\357\257%<\264\245\227=\035\234\216>?\304\201\275>q =?Y=\275NJ\334\273Z=\r\276\007f\014\275\274\340\022>\2713\017=\240\\\217\272\230\025\205=\331\005\r>\261\351\255\275\t\006]=v\357m=\315\265E:\266\265|=cX0>e\210\274\275\212\277\370\275V0\201=\217\243-=\271\226\004>\"\273\242=T\232K\274g\201\211\275\352\227K\275pq\205;\247\3148>\336[\232=\326l7=E\257\277=\274\272\236\274\203U\203\2744\346\206\274\r\031\244<\341\247\202<V\212\223\275\377\330\310\275\375\254\267\274\347\207\002>J\216\">\340\364y;\224p\210\275\3172\030=w\"\247=\237\3426\275\362\020D=\253s\265\274q\230\200\276S\235\311=\031\202\213\274\222\217\214\275\n\304\224\275\363j{\275\347\220\216\275\013\204\241\275d\274\243\274\366e\000\273\227\330\346=\017\025%=!\307\325\273\237\033\330\274\314\003\326\274\343w2\275\355D\220\275\262g\224=Z@\360<\"E\\<a\223\202=\177\014\202\274Be\321\275\337;\210<T!\374\275\222\303S=\036*\026=\360\313x\273\355w?\275 \026\307\275\231jk=\002\375-\276\214\374\373=\036\201\214\275\326\315\322\274\001U\223\275\223\037\264=S_\345\274\276\234\300<\'\317\364\274q\351\002\276^l{\275\313\236\264=\017\006\000<I\356\214\275\037\305\305\275o\272\177\275\363S#\276uk\270\273\304\366\014\275&\037S<}Sf\276\016\267\251<P\035\004\275\353\035w\274U\345\020\275v&\236=\375a\256\274+\263\233>Q\311\367\275o[t=\022\306\257<\010\017\020\275\303a\245\275\002J\257\275\326\211\003>\247\200\225\274\326j\035\275\233\243\300\275\323\340\035>\324z\202<\006-\225=8\355\272\273\321\237a\275\266*\321=V\357\326=\326\216\335=u\305\361\273J?\215=\026\004\226\275\277\314m=\342+\223\274\340\317\240=\311\351<=\003\'\321\275\373N\276=g\032\274=\366!\236=|\305\255\273\325\227\320=\241\326\022\275\003\201M=\226\245\030=^\275\342\275\266V8\276!n\250\274,\001T\274\001\r(=\211\2171\276\350\\&\275\\\035\211\2762d1\276cP\240=\025`\225=\313d}>\264(^\275\3236\314\274\207;\007\276<\"p\275N~\253\274\214\363\321=P\352\207=\n\332\213\274\230\356 =\350,_=\305/\355<G\370\277\275\225M\014>0\264\235\273\302Fp\275\273\355\206\275a\"\242\275\261U\375\274\273\334\035\276}\245T\276\215\340t>Z1x\273N\032\317\273\324\202\017\276\330\213%\276i\350\312<\223\022s=\243\372\023\276(\336\036>:\224\216\275\266\030\177=e\036%\2741?\327=\243\377\027\276%\340\205\274\026\rA\275\riZ\274\306n\316\275\310S@>\232w\246\275\025\342\343\274,\355K=\355\336\341\274\333\222(\275\027\345\361<\206\215Z=\007\376S\276\334\321\360=\276\351:\275\233\tc\274dd\265=D\001\004=\314\257\014\276V\2531\276\233\022r<\351B\271>\223\373\215\276\024\374\301\275\327\321\226\276[\270*<\222\303G=\370\251\214\275\n\205\202=\266\'\277<\033\rz\276ICX;\252?-\276\303\236|>\271\262\326\275\356_#>\243\230\260<J\272\022\276&\n\315=Ed\373\273\225h\357\275{y\345<\366\032\362\275\256``=\246\271+>\346\233\237<\344R\362=\323\273\345<k\214\212\276\301s\314=vZ\275=(0\272=\317T\341=W\320\033>\202\360+=\324z!=\353\027p=\205\0315\274\344=\007>\257\341{>\325a\177\273h\322\305\275Hn\005\275C\270V\276(\221\004=\t-.\273\315\002\251\275s\307[\276;e\305\275H\026,>\303u\021;Z\315\313\275\003\2472=\376M\t>\310\357\007\275\314\253g\274\010\214A>\327\230z=\345\337`\275\002\221+\275w1\323=(m\033<Wj\200=\264\245\002\276\204V\270<`\364\324<\331\321)\276\313\344\237\275\353\274\\>ivf=\252\332\245<l\342->Ik\372\275\256\267\255<x\214\306=i\244k>\227\210\265\2750&\262\274\210\211+\276aj \2751}\005>\317\351\352\274\037\3240>4\010C=\032\341\332\275\271\214\327;\325*\004\275\035r\"\275\205s\222<9&\253<\177\007\363\275\327\017\357\274\2355\035=\034uj\2766\022h<\355F=>\026\3749\276\22019>~E\\<\350\017\004=\000=\033\276\014\005_\276>yD>\304\3341>\315\265\261\275\273_J>\262\325\376\274\227\233\031>l9=\275\0264\357\275(\272\270\275\356,\246\274h\211\311=\002m\374\273q\275\006=\201\033\014\275s\003\002\2751\224A\275\225\305\221=]\004P\276\315\325C<\034O\017;\234\365f\275\330b!\276\360\211\030\275.`{\275W\363\357\274\256\254\\\275\366\023)=\212e\262=0\335\037\276\353\261\006=B\277\304<\2435\030>\322\303\024<v\'\206<n\016c=|\347q\274\272\204Z\275\013\243<\276\243\374P=\250\007v\275L\341`\274YQ\030>EM\354\270b\276C\2756\335\353=\203\314*\275\320\312\361=\301\377j>\237\242\000\274\347M\030>lD\033=\301T\024\275\376\273\371\272+\237o=U\200.>\375z!>;\345\343\275\364\030\201=\002M\326\275k>A\275\342?\320<{\363\017;\350\305\226=5\372\030\276\251\324\344\274\372h\023\276KC-\276\"\227\271\272\004\022\224\275\356\210\315=\204\376\266\275_,\023=\240n\342<\'\362\244=r\211\017>4\211\257\275\330\261\277<9\207};\177\254x=\356<\"\274`\206\021\276\3752\306\274\272\2508\275;\2428\276y\277^;\247w\220\276\031\262\362=\364\245}\276\253q[\275H\261\236=V\255$>\375\177#=\206s\204\2749\030\230\275L\340\312\274[\367\350=n\035\035>5\263\313<kh\220\275NO\310=n\300\025\275+\213\313=1\006O\276 \211.=Rs =R\371!\274\276\3428\275\272\000\322=\034q\354\275\355\314=<\340V\342\275B\2032=S\177)\2742\277.=\361\217\337\275\037\326\232\275\0023!=-\034\206\276k\232\027>\271C\363\2756\353\321;2,\210=\264Q\312\275\"MZ\275\261\366\213=\200e\034;\227M\365\274\254\354\275<\027\'\003\275\226\323!>\017\346\330\275\344\250\367<\204\260\"\276\231R\300<O\377\020\276\325:\214=\270\272\273</\263\254=9\235\000>/W\350\275{G\321<%\000\270<\340\3525=\277\216\013\276\r\207\327=\313@\225=.\260\033>>\252W\274\254\242\203\273\373LM=F>R<\211\234\022<\2562\274=#;\242=\032\217\020=\202\206\017\2762\275\363<\027\234Y\275\016\t\334=U\375:>uVf\275\221\205\210=\265&\236=\302:\205=\360\036\333=\226\203@=\355\326\260=ZC~\276\321\246\230=.\257\036\275\372\300+=\231\247\200\275\357\241\324=J\270\276\275]\351\004\275\363\325U=E6j\274\3334\014\276\303MD>[-\246\274z\312d\275L\367\334=;\376\006>\210:`\275*v\362\274\216\315\032\275`\266\270\275\3033\266=N\222>\275\352\264w=Y\273\006=\3633|=yk\030\274[o\313\275.I\264=\3042\220=`\330\241<\376\300\342=\26587>\365&F\276\340\2550>\363\'\177\274mi\267\272i\013\231\275\337H\330;\202zm\274\003\nO>\350\212\"=\247\205\376<\323v\013<\263\210\243\2741\254\233<w\0323=W\000\253=\334\"&\276\007`\036\276\307\264\344\275\247.\227=\276\277\221\276\357\377\211=_\005\215\276\204\007\326\274\221y\022=\\Iv>7\177\260\275\273\273\373\275\244\302\021\274\206\245\211<\240\001/\274\326 \203\275\210\262\004\276 \246\004>7\373t\276\022\355\344\275\357!\304=\247r\350=s\320\340\275`\037\316\275\357j\032\276\362\3733:\261\265F>\022\347\r\273\365C?\275\311\004\261\275\312\200\233\274.\346\334\275\272n\222;\t\353\262<\260\226\023=;\371\327<\3047G>)w\264\275h\025\214\274\016>8\276P\2313\276e\227\327<Z^\024>Rx\274<\347p\375<\330\357*\2766\213\367<m\332\373\274Ig\271=cO\220\275l\211\355=4\014\346\275+N\351\275]B\211=\024\320\360<\237\330&;1\211q=\304\n<=\003\251\244\275\0344\202\276R\321\304=\023=\252=p\307\303\274\312\243\006\276t\326\326\275\230\210R\275\003\241E\273\005\364\022>\3239\374;\227\253p\275\213\277\312=\023:F\275\021\233\030=E=\r\274\333{\337\275\366\351)\276#\231\337\2721\337\215=U\367\263=\301\254\341=B\337\210<\316?\256:|&}=\231c\006=\027\305\224==\347S:\365A\321<6\221\362\275\214E\247\275}\001\007\275\201\310\370\273\300&\253\275\351\240\007\276\013An=\331\254\212<\320\0316\276\212f\365=\267\357\206\274L\362\351\275@$O=\3073\363\274<\243\024\275N\227\240\275\';\371\273\350T-\276-\0068\276\235T\005\274\005\331w<]\325R\274z*\353<\273\003\025>\277\200U\273\341rW\275\232;\240\275\032\367\024\276\256&\302\274\004\335)<\241l\262\275\262\211`\275\207\367?\276\003!+\276*\351\025\275r\332\022\276\345\331\026=\'.*>\371\234J\276\224\204\027\275x^\245\275\022\300\350=2\'\361\275\346\203\243>\312n\315\275\037\254\004\276;\212u>\354\323\201\275\275 L=\341\257\371<\277\037\365\275@\263v\275\314V\344=\364(\017>\033=\035\274\212\035_\276\356$\304=\003\212\334=\n\353\330=\005:\202=V\024\020\275\354\377\017=@\241\252=\310\357\335<v1\304\274\035\030\252\275p\r\225\275\364\246->\3120\367=Z\223{\2755\303I=\t6N>L\331\315<3\235\025>\246\261\014>4\036x\275<\357\343=\344\227\263\275\014$\361\274\002\307\313\275)|\310=,m\313\274h\213\214=:6%\2738\037\246=\364W\240\275\035C\273<\346\013u\275\013l2>\357{]=\342J\027=h\262\032<\362-X=\344\372\310\275%7\025\276D\013G<X,\232=\234Z\200<hY\016=\251\371\250\275I\275\004>\024\343\336\275\002\361\001\275m\3314\275 \035\005\276\342\002\327=-,\306=\365\205\242=d+\223<j\200\335<\020\305l\275\230SZ=~\261\177\275\332=C\273\351\320\201\274\341\230\311<_\303*\275\'\025\362<i\006\226\275K\210\312==\334\271=\000\317\216\275\313\261w\275\322\257\n\276.\257\272=\0067.\2757t\221:tk\026>\352\236\325\275W\036:=\306A\200=\003\337\312=)\335\021=Q\305(=\270Th\275\"\365\203\275\303C@\275B/\314\275\255\322\325\275bf\240<v\267\347=\264\277\252\275\265^l\276\235@\200\275\372\321&;\366\022\376\274\372\034\323=\217\210\n\276B\023g>(%m\2743\242\203\275L\3771\275R\371A=(,\257\275^7\313={\220\260\275\205\322\r\276\341\353\243<\371\244A\274k\362\245<mk,<\346\014M\2759}\037<\247\213n>\256[h\275\254\276\255\274w \343\274u\004\340\275\254*\001\275{\224\262\275_\232p\275e\336\321=r`\230=\214\204\217=\247\006\207=\t\306\320=5\007Z\276<\360\375=\021%?\276\317\010q\276\312\361\301=\320\370\221<\266\361\024\276\203\252\264\275E\225\232\275%\355:\2757\237%>\374p\374=\000`\305<\313\271I\276]XO\275\032\200!=QH\204>\370\360\277\275H\274\376=\322\234Q\276S\316\360<G\365\014>OXJ\275\013\313G\274S=\207\275(-\245=V4\245=r\227\233=\336\275\254\274\232o7\2751@\010>\255\274\337=1\016\277\275\220Z?\276G0!<\007z\375\275\3525\256\275\312\211\212=5\355d>\301\305\220=\317ff=\234\362H=&sL\275\237J\214\274o\034\314\275E7\213=\316\017\223\2742S\004>\257]\200\2746\313\013\2748`\004>\r\326\036>\327\254\215\274\220\315\010\276\356\331j=\307\"\333=j\354\257;\021\335\242=CTX=\254\347\336;\237\335\307\275#\374\206\276\306\033\026<M}Z\275\311\227\006=<4\245=N\2773\275\244\227\217;g\236W\275\342\027\030>6\351R\275\354\267$>\022\270-\276 \315`>$\261\254=?\306\326\274\331\321Y>\342+_\276\342\004(\276l`\001\2761\t\375=Z@+>\274\275\316\274vxM>c\270\206\275\346}\361=q\371\005\276\240\356\331=E\027;\276\223\243\035=\t\202\010\276Pr\346\274\355w\241\274PR+\276\303\302\314\274\326\314\033=\264W\335=\0233\200\275\017#\205=\371Cp<\021\344\240=\033\262>>\374\257\021=\016\331\220\276\273\354\030\276-\262\310\275\373\\\210=\306\'\370=l\020\272=<\016\016>\205\245\237=<\006\021\276/*\327\274g\271^\275o\312\370\275\317c\206>\007zN\274\315\270\355\275>\305\020\2761?\275\274S\204\344=]\320\361<\327st\2758\302r=\243\275\227\275\017\352;\2757**\276\247\007\314\274WI\351=`\257,\275\3633\336\274\220\241\221<N\305B=\260\276[\276\315\314\227>Ax\270=z\262\377\274\036U\032>\227\326\263<:\320\352=\340|\334\275\305\235E>24\223\275\232\237\244<\004u\355\275&\270\243\273_\233\312<\332\013\245\273\230Z\235\275\250\256\325\275\317\025\265=\'\335\206;\370\0276\275y&\214<\364\276\321=d\214\001>GLq\275o \206\275\2023\301<.\273\223\275\211\304\240\275T\276\324=\342\2066\276\003\230\034>8\254\354\274\3036\003\276\226\215\010>\273\330\020\275\234\032\217;\365\211\340\275\r\n\245\274kP\315\275\354q\031=\2238\335\275\'\037\300\274\224\242\275\275p\t\312=\346\234\242\275\237\177\214\275\265.\215=@o7\275\205I\262=\000\014\277\275Ey}=W\020+\275\356\2711\275A\224d:JX\361\275.\221\262\275\234\\\227\275\373\327\245<\356+\237<\376|\265=_\266\234<\030\234\013\276\213/B>\217\222\277\275\t\352\325=!\317\276\274T!\002\276\312\007@=<J\206>\260\323\005>\235\275\361\274\214\324O=\017\013\031\275\230\237\242=\255\031\336<\220\263C\275\230^^\274\313~\374<%\270\"=~\313 \276\234\274E\276\364\230\023\275e\346\337\275q\226\313\272^\261\246\275\264E\243\274\377!\010>\217$M\276Ok1\276\376\235\000\276 \364`<\205A\351\275\313\215D\275\\\376\326<\017\256\034>]\327]\274\"\377@=\373\217\246\2743o\316\275\273\350h\275\322\035I<\364\026X\2751cs\275G,\030=%\373\225\275\377\\\347<:\236\345\274)\310\214;\336kB\275w\342F\2754\005\306=\322bN>\020V\312\275\367\246;\276\260\233\352\275\270\214A=\213\365\006\273\235\210\351=\205\310\360\274&\266\342<\360Z\211>Z\'\202\275\224\177%\275\326K\024<\343\325|\275\354\225\277<\330hT=\355\256\001<\266\270\236\27357\217\274\n/\003=-\226\033=\237\313\242\275\021j*>=N\262={\307<\276\270\235\022=D\030\230\275v\204_=\311\260\200\276/K$:j\267\246=\237`\343=@\332\016\276;t\347\275j\010\002>\262\220\034>\374\271\346=\013\231\226=\032\001:>b\323\234=\033\253\225\274\002\317\026>\313\232\200=\376b\031\274Y\004\220\275\032[h\275<\005\023\275Y\267\246\275\247\016\026\276x\001:\275\237\014\225\274:\277]\274fU=>\367\354\361\275p\022\013=\326\250\030\276\355\340&\275\0262\020>\247^\214<\210\303G;;s\301<\321\2035\275\2552\367=\312\214\333\274\241\004\033\276\307\254B\275\n5\251=m\262\204>\362\364R=\266\274\031>\261\271==\213\273\211<\2278\017\275\322\323\241=!\022\232=`\216N>\210AJ\276F\347\364\275t\313\263=+\247\376\273\214\364\231\275\230\030\'\275\2232\247=d\037\371\275\353\354y=Vp3<\0367o<\243\323p\275\212\010S=z\203F=-\370\357=\tP!\276\\\351\237=\247\271\341=\352\305\355\2759\331W=\240\010\215=\227\3332\275\304\224\205\275mM\232\275\335\243[\275\310\031\t=\013\017o=\034N\350\275\207y\303=\3674w=\232\016\303\275o\023\227\275JXM>\343\347\030<9C\005=\355\314\002\275/\244\233\275\014l\n>l\332z=\310\260I\273\207\343\035>\302\005\001=H\006\226\275\340\216\272\275\252h\301\275\334\3331\276\0204\307=%O\324=\231\013\034>\362\200\347\274\273\024\250=[g\314=\353%4=;T\372\275\247\336l>\370\246\374=n\013v=Nh&=&\273H=Y\252\313\273\\\371\327=Kx\243=\305\035-<\343\227\230\276\035\227J\276}8\211\275\323\333\004\275\204^\271\275y\344 <\303yF\275\231\240S<\324\270\331\275E\212_=*\335\037\275H\247\365\275\024,\336\274\265qT>\010q-\276\007\\\340\275\211\272\224\275\257\036\221\274\240s\025>\322\275}<,\244!\275\336(\351=\251\372\241=\003\353?\276\177_\232\2752\034b\276i{\245=#\316\000>p\227\207>\033\257\265\275\317u\"\275\007G\037\276\313\336\225>\250\253\374\274\025x\021>\344\370\313;$\276P\276+5\241=\257\300\256\275\366\037\244\275\001\324<;\313\0145\274\272\234\336<We\007>!\275\327\274a\246\213\274@\344a=^\254e;\356wZ=\373\246\205=m\324@<)\035\224\275\366\336\331<i?\002\274\366\375\023\276\321\221O>\363DL=\304\014\006<\205!\257<\343\360\3209_O\212=)\\,\275\036,\'<N\373\030=]7o=2\350\371\275WZ\200\275\'\374\270\275*T\315\275\216hK\275\001\223K\275\315`\025\275\353\273\362\273\030\346\021<\231\027#=\360\327\017\276\216P\275\274\264\215\t\275\201\216G>[#\324<\322\n\023\275R\254\241<\214\375\261=\320\2720=7\0175=|\256t\2746\325#\275\307u\233\274\340\021q>\323D\316<\206\212o<\376\331J\275\213\te;\023\274\372<\317\352\267=\373\303?\276\323\220\232<\334\267?\276\245\314$\275<#7=\350f\004>,\322\t\276\022`\220;q\377\313\275\353\372\365\275\333\252j\275\357\300\021>\237\251\241=l\340(>+r\330<\362Jz\276\340\024O\273\022?\244<\327(g=\300Vj\274?\307\231\274\021\302/\275u\230K<q\355[\275\253/\003>[`\366=\ns\247\275AP\240\275\222A\004>\366\363\375<{\177\322=\210@\241<a\315=<\215_\273\275\3308\342\275\316\260\305\275r7q=\334\367\221\274M\3003\274wF\260<Fx<=\036\365\307\274\217\315\017>\200x\263=R\356\221=n1\206\275h\234\241<\242}\365\275n\3454\275\304\305\370\274\357w\242=\317\363X=B\2613\275\302\222\332\275D\3712\276\305\242\006>\226\r\300\2751Uv=F \323=\002\037\230\275\207\024\324\275o\177#\275\217-\027\276\014R\203=\242M\005\275u\307\004>j\206\216=\354\276|=\244\227\353\275\366\350N>\336\2470\275\342\007\266<\273\267L\273\361\251\000\275\235X\026=$\213J\275BSA>\361I \275\t\212\001>0\205\\\276\243\223d\276\316\212\236=\036\201\020>7\014\'=l@\340\2742g,\276\350A\325=\235\3409\275?\321\'=\364\230:=\"\025\014\275\266\335\\<V\305\260\275\313\336\217\275S\021(\276m\3073\276:\252\"\275\356\030\254<#+\305\275\261\211(>J\036V>1I\022\276!\2047\276\207\2453\276\254\223\016\275\027/\024>[\035 \276\320\311\301=\270\305\243=\346\037<=\344L\275=>l\337;\013\202\023>\226k\030\276=\307\002\275\030\340\246\275\255D&=5\262M=\333M\246\275@\3527;\013\232\247\275Q\201v=\023C\202=K\233d<{\227\254\275[\203\246\275\272q\226\274\007oJ\276\231`\006<5\223\307=\323\315\353\275\360\350t\275\313\246\242\276\t.<=gGj<\370\306\244\274>I\361\275+3\223\275;\324\230\275A\026\342\275\351\307\375\275\334\345\005\273%Z\245=X>:\275\016\307h\2756](\275\320`\"<C\346*\275\272\247`\275ir\327\27585\236\274\231(\237=I\367\267\274\321\221\260\272\001y\236;\006\237\311=\233*L\276\351\260\353\274\374Q\303<\351O8=\227,\273\274\231\343\315<\027\265:=\247\333\221=\312\334\343\275\0014\017=\263\016\267=\356P\346\274\250\250\024\275dIz=\241\311\025\275\316_\030=\235\t\210=I\213o\274\206X$\275\301\334\335\275\312\211\001\274q\351\320\2756\205\343=\036\340\212>\304\250\226\275\010\2003\276QW\255=6%G\275zi\n\276/\355.\276\031\344B\276rnn\274\014D\325\275<\234\334\275D\303\346<\262\324\244\275?\t;=* d;\257\213*>\322t\177\273B\nR<\337\264m\2764\020[\276\313\3510\273\247\022\272=\357=\342\275\374\034\240\275\034\375Z\275]\265\032\273|\240\233\275\265?\362=IV\376=\037=\255:\002b\005=Y:\337\275\276\252\262=\000.\370;\t\322\260\275|\217e\275}\206\036;\355\215|\275!\361T\275\0375\374\274a\026!<Y\361`>FQ\031\276\362\204\t=6\224\332;\232c\333\273\344\224\017>\3348\026>\363\322\221\275\002\027p=\243\246\351<\344\'\"\275u/\225=\224\343>=\341-\234=\241\2477\276A\272\021\2763-\326\275\t\246\227\274\3534\337<s\332j\275\350\230\025\276\370-\220\275-p\016\275\016\272\253\273r\\\367\273mVa\2759\266\004=\025\275\032\274\233\303\362<\201\023,\274\216\274*>\344\'\254<\007#\203\275\255,\204\276xU\n>Sg\273\274E\030\357<\352\t\357\274O\307\370\273\253=\'=(\027\225=\037\217\025\276\275A\t>|`\005\275u\273\232\275\240\001\241\275\235]\326<,\375\204=\013^\307=\242\217m\275\024\326\214\275\333\224\212<\246=x\276\007\003\313=\277\nf>1b\302\274\212\033\234=\245\006O\273<\334\361\274\373\330\t\2767\342Q\275\343.w=\250\036*\276\337\343\232\275\000P.\274\346s\021\275]F\214;b\nz\275\217\244\217\276\031\327\264=\325\256:>\343\346\243=o\264\037>k\264\223=\365V\226;\232\017\261:;y\034\274\360;k\276\254u:\275\245i\214<\324\323!\274+G\277\275\232}\203\273\252\247i\274\265\370\341=:\324\367=\316:\265\2757?1\275\246dp<\322\373$=\375\014\200<\374B\212\274\341\001D\275\272\264\201\274Q\030\252\275\213\323\004=\307\224\204\273\316\305\356\274\302\337\273=w\207\345\2757\322 >kr\020\275+\373\304=\267\210\030\276Q\216\002=\273\336\000=\022>\265=\342\226\244\275\304\371\177=\304\007\036>d\377\336=\2010\310=\006\311\264<{\305f>\350\003$=\371\302>\276\213\260\034\276\006l[\274\347/\002\276\014\226!\276%\347\256\274\013\360\255\274\351\207\027>\227\022\374<|\3274=\2169S\2750\305\020>\324\036\231=\201\2725\274\347\036z<\327\312p\276\367g\035\275\032\313[\275\304\307\363\274|\360\311\274=\314\350\275\021\033.\275y1u\276{\357Q=h\203g=\272CJ>s[\006>O\370@\275\257;\220=\r\020\333=m[O\275\330\233\304=\343\217\177\276\332\314_<\235t\345<\250\2463\274\345C\300<\037K\364<N^\023\276\324X\201\274a\350\030\276\006\367\'\275BFE=\222\367[=\262\352\321=\020\321\032\275\327\202\341<\t\003,<E\244\001\275nj\316<\343\315\272\275PP\243<nwF\276p\306\254=)\340\305\275\034\260f=.{&\276{q\276\275\357\032\025\274\261!\222\275\314\004\206\274\256\315&\275\223\207\345\274\032\301\274\275\372_\004=Gr\310\275\001\345\237;\376\275\007\275v\305H\275\206\363\244<s7\375<\243.\026\275\230\001\272<\2239\004\276\255+\010>\\,\247=\002\334\216<\344\265\316\275\205\311\360\275\355[\335=\242\026F<\272\273\266=\344\364\363\274\3513\3669d\177\233=\261\3029\274\230Y\241<\245\236\361=\237\327\210\276\315\336\027=Zq#=]./\276\334%\'\273\224J\034\276\023t\305=\350\372B\275O\311\304=\232\267\326=&:]=\312\021e\2759\375\001\276\004\235\227\275\331\326\000=>\304\346\275}\177q=\233\3443\275\025^\370\274\346}\335<\235\356A=\022\035\024\275\354m\237=o\217(> H\3519\352\251\336=#\ro\275\223R\345\275\275\2728>\333\373\262=\372\357\340\275\347UP=\315$\256\275[\225\354\275\r\360\263=\344\304\014>\014\020\316:\022\210#\275\364\004\332\274\221\275\225\274\025*\327=;\227\250\275_\317\342\275\377\327*=\205j\216\275\222S\252=\351C\n>\303\221\027\276\320A-\276\372+\355=\224\207\225\275\025\346\352\275\344\035\310<\032\351\366;\360\246b=c\276M\276`m\274\275v\263\305\271\345\223\327<\030\327^=:8\252\274G*\317=\354\206\333\275J\254\242\275\nw]>\304V-=\"\236\267=5\355\t\275\324HQ=\363I\207\275Z(B=r\000I=\262)U\275\2071L\2767\252;\274-+\334\274\275io=\222\243z\276\244\266\\\275\345y\013\2765M\372=\214\321\244\275\321\026j=wd!\276@\276\200=\270\345J\276SG=\275L\346\307\274$;\255<\313\213\304\275\2063\201\275+\234>\276\300\177\347<\006N\242=( 0<\246\245\326\275\310x\006\275t\037\264\275\t\241H\276\355,\022\275h\323V\274\242U\355\275\344f\256\275\010`\036<\300Lp=\376\3124=\203\006H=\373\241\246\272\2142\262\275\344V\325<\266\233\312\274\275\000\360<!\360\225\276#\230_=\250\003%\276\r\006\207\274\231\200\347=~\310\244\275B\363\363\273;6 =\\?g=\305j\345=ELJ\275\355\\!\276\022\345\270=!|\007>d\337\227\275\3070\376\274\362\030\016>\016\364\276=\342\273\207=\235U\353\274\241\232\227\272\351\033\343\273}O\233\275\023\\\017\275\344\331/\276\332U\351\274\214Q\242\274\304\235E>f\201[>x\277\222\275\306\370L;\001$\323=\003\365~=\225\265o>\215\352\237=\261\335\021=\364V\326\275\0277\306\275\223`\033=\221\224\242>\353\254\260\2755\304\306\275r\234a<\020\362\376=_\317\030;Aw^\274\320\035\375<\375\262\016\274\332V\225=4*r\2750\250\341=\t\240\273\275\336\372\322=4\346\004\275\205\262\316\275g\334\312<.\326\026>\323\344\">\006\356m=\257\035,\275>q\263\274u\245\014\275\237\333(=s\215?=l\032\320\273\365\221\352\274n3\307;\253q\031\2754\211\216\275\267\332*<\345\211\020>R\0100>\344n\264\275*\376\343\275=o\352\275<$\233=\217~\261=jQ\305=\214\225\002>o<\357;\274\217\036>\357\356\362\275\273dk<\376fW>\036sd\276\254\272\274\275\277\024:=\014\256\000>\254\321\237=u\331,=\200\203\213=\376\266\375\275\3513\027\275\341\261\215\275\370\372\374\274\367\351\016>\227:\032\276\304\020\360=\337\246\351\275:\017\330=\336n\033=\2105\026\274\207{\243=\000\315h\275\357\261\301\275g\356G=\330U\215\273*>$=J\243h\275\302\212\206=\272M\001\276\265M\035<\031\270\023>3\364\301\275\305\337w\275{u\017=\246\313\316\275c\342v\275\207\205\347=#5\306\273\363\266\303<[a\270=\336h\246\274\370\326\250\275/\315(\275\321d\225>\276m\016>\257\227\253=\326$\237=\n\200\370\275\373\251\355<\227\246\236<\330\033\233\275(\247\004\276\332*h\274\277\034f\274&\013\304=\262\304\301\274%\257\313<\261\201J>L\356\376=&q\243;\332\331\017\276V\021\272\274i\014y=i\274\335<\264U\356\273>\313O\275%\020S\275\233-n\275\237a\n\274\251\031\023\276Y?\261<+t\203=\nO\315\275[\336\322\274\013F\321<\021\001\321=\332\367\216>^\002s\275o\366\336<\000d\307\274_\t\352=|\322\345=\201\375X=\005\311\327\274\177\241\305\274\225y5>\n\005m\275\310_\"\276\343\301\265=\317\246=\273\375\257\232\275\363f\021\276\004(\342\275\301\234\233\274^\253h=8-\250=\362\317`>\255#\311\2746\201\270<\360\271;=\031\375\244;$\330\277<\221[\260=0\225\207<`\243\"\275/\307\277=f\367)\276\272\275\t=\311\254\330\274\201\010s\275\262#\016\276\334\220#\276\217J\032\275\312\226\204\272\252E\010=\322\005m\271{Y\030\276M\260\373<\355\225\364\273u \210=\215?9=\361\n8<+hA=\205\323\376\274\334@\203=1\0045\274\277\355\232=\036)\324\274\000,i=~\002\001\276q3^=\273\212\377=\212\271\320=\001l\036=\214\256\324=r\342\006>\211T\261=\331\304\372\274\"#\323\275\336\225\033\276\217\255\345\275\240\t\327\275\217\327\000\275\345\260\217\274\353\216\317=<\245\023\276\333@8\276\277\351\321\275B\017\004\276\340\242N>\214\335-=!tH>\303\221\002\275\273\373\213=\314\002\254\274\272\261\020\276G\366\356\273\317-\317\274>\233\207\274\255SB=\002>\312=\372\365\250<l\204\216\273u\222\352\275\023\r\006\276\267d#>Ei\223\275\024W\334\275\271<\211=\256~\244\274\023\255\213<f\255<\2754\217\244\275x\025\255\2757zm>PD?>\377\221w\275l\222\243\274\341\376\341<\322<\243=\025\021#>\266\340C<Y\337\023\276\372\325\274=a\240\013>{\355t<\323\366\004>EvN\275f\204\250\273)0\010>\372\333\014\276\303\232\273\275\026\252\247\275\301L\027=h\276\251=\006\243d>^\007\241=\310\361\274\275\342%i\274T8\315=\336\235\253\275\310L\t\276\001\003\246\275\004V\255\275\351\262\007\275\364x\033\275\354\220s>\023\323\025=\341\376\306\275\366t\211\274fT\266=d\354\025<C5\022>\036*v=\250\036\005\276\345\206,\2758\322,\275p| \276U$\240=\242M\243\273X\031\252\275\323\262S<\017\360\016>\220)\306<\354\363i=\r/\212=Z\333\245<\034\227\221\274],\271\275\350\373\342=\241\025\r\276w=/\276\331\310\031\275\013/\200\2750\272\202\275\204\'F=RD\377\275\322\215]>\302?I\275\356l\037\276|\"\313< \267\317\275m\276\350=\374\312\222=\201\276\226\275\004\366M\274\037K\314\274\223v\010>\263\006 <\353\265\350\275\020:5=\277~x\275C\340\373\274R\317C\274\026\234\235=4\273C\275K\316M\276\301\262\010>\374\276\004\274\222\325\232=\315\2609\275\367 \344\275\345\253\035=\325&o\274\375\323\024=_K\336=\207\225B>\322O\277\2751\255\243\274\311\024\220\275>g\t=0\374F\276\001\030D\275\273_\233;\300\031G\275\251-*\275\240\220\323=;\213u\275\252$\365<\tJ\030>A\217\360<\027\026v=ee\007\275\310\355\213=\247\234\360=N\361\030\275\024\251\204=_\237h\274\001`h>\242\344\371\275\242\242\216\275\277?\216\274k\226\350=za<\276\002>\365=S\025\371\275\361\340\247\275\271.?>@\337=<\336\371\206\274\355m\212\274\334\374\321\275\220v\001\274\003a\202<\304\377\226=\3450\321\274\347\035M=\264\240A>\033\3615>\3731\000\275p\263\335=SC\266=Z\373O\276\"I\300\275W\375\256={\306\250=\342r@\276\024\241F=\241\016\325\275\260\356\323=?\237\204<\333j\376;\305\302\001=\026x\312\275c\267j=p\360n=\037\030\364\275\205\220\026\275\310\'\223\276\177\267\266=\247\261\r\276m\355\265=e\334\005\276$\251c;M\330\270<\214(D\276R\030\335=\247\271$\275\337\016\303\274\315\333\213=\273\3726=\217$\206\275\376\271\t\275\367&\373\275\217\204\361<F[\243\274\347\244\022\276\032\275G\275\320\323\225=\260\356\021\276\013B\207\276\225\240\304\275,\256~=-\256;\275\211\307o=\005\334\316\275\017\275\016\274\2052\330\275g#@\276&SV\274\366\224(=/\256w=\n\232\234=]RB;\010\332\300<\237\351Z=A;\350;\340i\332=\003\0227=N\371\344\273\300\210}>;>\201>q=\201=!\221\324\275\266\375\002>\001\202H=\307\350N\275\226:\231<\244/\n=\201\352\212>N\351a\2753\350\010=\367\010\017>\260A\031\276\026\254\027=\326\232\033\276\355\345v\276*\221\t\276\307\004f>\277w\376\273\202\030\374=\025\001\343<\034zU\275\271\"\032=WaM>\210M0;\273\013\334\275\310\272`\2766\351y>\241\340\272\274\215\0037<\322\375/;\0071\203\275\'\240-\275@{b=m4\205\275\223&C\275u]9=\0030V\275\004\211\346<\310T\007<8\263\264=Mu\035\274\007\214\010=\022\001\005>\317(\331\275\024\375\216=\340>\252=q\305\202\275FF\222:\302\260\n;k\347\374=\202\337\236=\005\336\205\274\330\277\212=\226\220->\013yh\273W7\272;\330\330\232\274\021(r\274\221`a>0\217\201\274#\310.>!S}=\313\3555\275\252Jr\275q \263=G\360B\276\230\337,=\t\247\240\274\266w#\276\0377\033\276g/\357=\251g\211=R\356\215\275\344 \004>\227D\207\274zm\027\275\352H6=\355\242\334\274%\234\220\276\010\221x\274*\240\263=\333\013\377=\323\201\345\275\3634x=\313\316\024\276R\014\323=\300L5\275\220#!>\324\377\002\275K\315\305=?\252\020\275Lw/\275h\213\032=\032x\277\275s\242\371<\035\312;>\327\006\366=v\024\367=\351@\030\276\034\3261\276F^\013=(LE=\"\376\236\275\352\342\302=\036\323>\275\003/\000>\024|\257\275\177\266?\276\362\275I<\216Y\244\274\323\355T=\227r\266=K\365\035>\216\317\355<:\024\344\275\370\372\216\275/\016$=7zd\276ji\226\275\2353\027;\306\212\262:\370\014\020\2764q\250\274\005\361\001\275\022\234&\276\253\376f\275\317:\321=N\254\023\275\010\303(\275\327I\333\2751\265\323\275\3358\002\276@\252\351\274{N\007\275\031\002\374=\361H\222=9\301(\274B\344\353\275\266\350L\276\236\243\251=R\244,=\373\363\225=6\250\273\275\007Y\315<*\237\347\275\226{M=\265\260b\273\260\345\202\275K\345Y>\320#\256=\204\254Y\275\036;\305\274\347\222\002\276\253\243+=\246z,\276\023\376\327\275?V\352=XF\365\274YS\265\275:\032l\275[\264\354=:.\304\275\311\357\325\2748\000\243=\027\352\255<\206\244\266=PN\327=\354\276\006\275D4\264=.\304~\276\352n%\276P\030\224\275J/\261<-02\275\345\033\033=\353\341\305\274\371\330\227\275\377\374~=\345\014d=\241h$=\262v)\276?\243\257\275&\312\353\274hSE\276\206\367\232\275\360\'#>\260\324\265\275\036\3074=\376\372\t\275\252`\242=\231e\325\271\307\210\002<\367\323(>\272#-=\014\341q=\023e\326=P\t\227\275\210\231y\2754\345\312\275\rMi\276\235\256t\276D\315\366\275OL\330\274yn6=\247\254L\275y\334@=\206\346\222\276\215{,>\316\373\273<\270\304\270=\220\004\231\275;\320W\273NF\212\275\266<\334=Xs\336\274\216\244\377\271#/l=,\375\262=\305\210\254<\332b\221=\220\003\322<\354\2129\275E\211 >V\302\022>\347\025->)\2052=\216\272\201=\375<\346<_\311\200\274u<\237=\237\341Z\276\305\270\360<\371#\227>\245|\274\275QI\266\274L\n\260\274\320F=\274-\002q\276\312\376\032\276\201\212v\275\004\233\r\276x\326A=\235\253\206\275\354\306\315=\367\375O\275\204\020<\276U)\224\275\315\351\254=\363\377\006\275X\242e\275\"\037\306\275\271\237^\275\033X\371=\3538Q\275\253\253\027\276k\202\222<dn\243\275\177E\306<R$\206\274\313l\303=\001\361j\275\325:$<\361v\022>\331`\320=\242\207\370=\200\360\222<q4\000\275|8N=\032@\364\274i\260\237=\325B\327\275\236\326$>\231\302\026\274\264\273\232\2757\350\365\274\322[\001\275\355\327-\276\024\232h>)\363 \274\271\177\254=!j\237\275\374\355\207\275QQ\201=\251\222\377\272$\265\223\274\263\313\325=\240\207\003>\25616\275\014\351/\273\307\0366>\034\325\335=A\003\023\276\337\3500>\255\003\010\2766\236k\275\304wX>\372\226\241<\325\0334>S\221\324\275n\306Z\275\322\311\212\273\030B\030\276CK\251=\300\243\207<\267T?\276{<8\276MeJ\276\334\215\317\275\205\2347\275\016\270+\275\304\303x\274\010\022<\276\274\254M=\365\216\t>96/\276]\004K>\236\201\236=\315s\024>k\244\260\275x@\230=0\010\213=\331\345\246\274>\224v\275\253N\004\275lp\213=\357-[<\030\375\337=B\024\324=i\315\323\274\216\323\336\274W\377\201\275\265\212@=\324\037\202\274\0305\356=H\035\350=\031\360/\2752\314E=;\217\213\275\241\"\336=\034yZ=\252\361\270<\271\247\031=1r\002\276\311#\241=\327\211\203=\314\370H=gJ\343=\215z\210\276\230\321\223<s\036)\274h\232\275=nI\226<\271\234\332=\317<A\276\302\\c>\000F.\276\032\274$\275\354>h\275sU\304\275W\017==\275!\252\275\271HF=\002@!>\200\2628=\253\237x\274*\330\254=u;~\275\022N=\274\364\277\235=\036\242\0228\342\334t=\t\377E=\035\365S>\352\355\321\274\250\312\005\276B\340\304=\346B\316\275\265\021\237\275\030P=\275\225n\230=\271\354u=\231\263\326=\\\352\345\275;\263g>\351c\264=\224c\202\275$pd\2745\031\020\275\313\tu\275z\326\256<j\311\200=\"\177\247=\367Z\371=\316G\372\275\316]^\276\200\027\177=V\017/\275\201\263\360\275N\311\262:-\362\227\275\\*\225=\261\033\273\275aS\003=z\371\204>6z\311\275+\250%\276\212\325\023\275\212\351{\275?W\351\275\232\357\274\272e|\270\274 \323\211=2_\005\275\220m\n\275\372\031\330\275\357\300)\275\303\367\202\275\371*)\276\372\222\001>\025\013O\276\216\325\255=\302\025\036\2752\354s=\276\355\214\274\366\313Z>\274\r\027\276c\205\'>0\235[\2754^\277=\262\025P\276\016\215V=\212\361\\>p\030\215;t\"n=\261\375k\274\312\023\261\275\207\250\000\275\361\345\224\274\226f\245=\376s\032\274\322\215~\276\240|\326\275\337\320\022>\324\242\347\274\377\265\220\275k\332\234\275\027\207\020\276\375\010\367<\345\231o=\245\215\004\275\270\226\266\274\2434\235\274\233\345+>,!\221=\216k\262=\000\317\256\274\244\217\201=}\240\355\275\224\345\317\275qI\"<\026\331\333\275wL\033\276>Y\277=A=\256\274\323\255\373\274i!\030>\275\342h\275\\$\010\275\336G\025>\2642`=\260@\230=\001Q\266\275a\227_<\2755\243\273\241\225H>\356\273\022\276FE\247\275\323\3312=\215\005Z>\022\365a\275\026\361\361\273\265\271\306=\356w\203=~s\035=`\023\367\274\241\277\224=.w\022\276\030\262\315;\364\344Q\274\004\372X=\272\371e\276\030%\036\274d\242\244<}\324\374\274}\331\366\275\032G\306=\357\274V\274v\231|\275En\215<\362\tx=\237\366\275\274\346\362\243\275\347\235]=\031%\025>C\347\207\275\273\005\205=R\241:=H\232)\275\361\235\252<\037\273\366\275\212\214d<\357`\260=:\333\003\275(U\007\272\262\362\325\274\253z\004\275\343\007\304=k\233\362\275\037(\226\274\376\3050=vG\216<L\363\200>g\320\324\275b\267\245\274 \033I<\202\327-\2762\327\034\275,\033\306=(\331\222\275\343\231\004=\364\244\252=K\301X=\374\374\022>Y\r\237=8\364\313=1\354\241\275\345\000w\275\241B<\276m\233\222\275\244\210\277=\231\305\234\275=ij>\364\024*>\223\263\204\274\0360[\275\313\362w\274\310\244&<w\322\017\276u\374\r\276\"\336\017\275\225\004\375\275\256)\014=\267)\303=\315\n\021=\262\351\231\275\254\215<\275\037\0356\275\0362I=\357\303X=%\361\306=\316\224\036\276\r\315\251=el\220\274\001[\243\275\017\233\203>\246\021&>\301\266$>\257\213\210=\023\314\224\273\036\345\305\275\001\223\211\2754\256\312<\010\337\201\275y\260\021>\330r.\275Ae\004>\3518\256\274(f\276=\2650\027\274P\213\357\274N\270J;\334\3574<\332\001\370\275vt\302\275\377\313\337\275u\002*\275E\307\201\2747{A\274a\325\244<@\n\304=\343\212\024\276\347\273\265\274\002\"`\275\rl\263<V\371\367<\234\212J\276\214\314\003\276\004\301\350\274w\3131\275\241\ts\275m\253\001>\305]\325\275u\343s\274+\263+\274\350\251\254\274\234g\001\276\010IE\275\005\315\362\274\3400\314=\323\330\325\274\225d\217\274^so=\230\363\031\276\252\034V>\303v\271\274\356c\237>\335\245\206=\200\233q\274\321\276\222\275\235`\250\276-\244d<6\n\026=bJ\306=\327a|\272\373!\310<\330\277\033\275\263\365\343=\375y\\>\307\355\036\271\003\334\276=\305\2707\275\006\260\335=}\r\014\276\203\203\002=\376\247\206=E\036>\274\211\035\321\274!,\016;NG\006>\003\336\373\275\312\030\352\275B8\021>(b\314\272\330\375\237=b\n,>\254\314\365=\265\002\210<(\r\252<\217\017\020\275\237\243\303\275\224\311&>\003\243\032\276\272R_;\346\005\206=oD\375<6F\251\273\261\365\347\274f\250r=\232m\245<k%=;\017\243\364\273Ii\r\275Y\2111\276.Q-;\370\356\325\273\216l\325<\302\356S\276\333\314m\275\215\202\311=\225c\324<zzY<\217\227 \276t\256\022\2761Fr\275\200\375}=\2037o<hG\265\275G[\337=\276\341\224=3\205$>S\324\004=\'js\275L\252(\275?IM=\235j\326\275\311\346D>HGr=M\315n\276J\376=\2760\034n\273\031U\340=\342\010\014>d\246[\275\315#m=\272\236A\274\365\316\023>\237\343g=\177\312\'\276?\025\223=\177\013\264=C#\265<\254_m=\310\216\243=\364D.=>\034\275=\022\260^>A\376\304=#\001\007\276\322\004\313=\306\314\024\276i\031?\273\331a\356;\221A\253=\327\211\024\274\233\032!\275fq\211=\306\360\022>\272V\021\276\\\303\222\276\355\003u=\215\305\306\275\207io=A_,\275\334L\350<V\252\265=\033\005\361\274LC\225\275_\177g\274\363c\346\273&\216G\275\266\236\327\274\244\220m\275\266Z\231<\211\273\365=\341\222W=\251\342\244\275y!\010\276\210\013*\276m\336\263=\330\010{=\237\217M\276\267\277\257=+_\255=4\\\351<>R\204\275\250\005\253;\245\232\203=\376\210\004\276\2347r>\276Y\017\276^aE>\324\235\031\275\366N1\275\245X\223>\267\027k>\003o7=\n\204\237\275U\337\336=\346_\355\275\266\271#>\341\273\314\275\017\\0\276<\376\216==\353\006\276\377\337\026\275\316!\260:\n\360\244\275\247a\336\275\220\252A\275D)\n<e\n\310<\205\3732\276K\253\007\275yE\030\275\326J\032=\234\345\013>i\271\256<\022U6>\332\0069>\021\235\r=d\260\266<Mm\312=\264\311\232=\303\201^\276af=\276\232\0166\275\206\243^=n\232\273\273t\333 >FW0\276\270\304.=\004\021b>\017\203_=o\360K\275o\355(=t\201\327=\007\333\002>A\204\331\275\\\237\240\275\247\276N>\037\256\316\274Y\326N<\\@T\275\224\326]<U\307c\275\304\223\303\272\200\2535\276=\321x\276X\352\327\275\355W\003\276\326\031\211\275\027\235o\275j\002_\275\300\325\007>\322wz=\347\303\270\274\343\030G\276\014nR=O\337\010\275}\227\026\275l\035d=j4\217\275\3436\244=\227\262\270=\277\242\227=\263>\223==\221\266<%*\376\273sx\212\276+\205/\274\344\376\265<\336\027\226=5\337M<\266\000==\333-^=,G\207=\330L{>\220\035\211=A\210\324\273]`\022\276\244\206Y\275\255\341\217\275\203(\365<\264\037\367\275\340\034\335;\200J\371:\314\221\237\275\265D\211>\360\210\331=\025\362\264<<\1779>\273\312\244=1q\223\275\371\203\351=\n\200\216\275\031b[;\021\231\001>\375\221M\275\253b3=\345\264A=\350Oz=O\270\356\273\370\026\374\274\325\371c\274\257B#>\304/\304=\213\317@\276gH\371=0I\n\276\233\004\354=l&\274=\303-\232<\374*:;\212\024\204\275\026\241\250\275\271\274\234\275\371\2108\275\374\257\322=;.x=\344\300W\275Bc\272\275o\235`=Z\276\257=.P\304\275<\2363\275m\334\033>\363%&>\216;G\276?y,\276\346\214\335\275(|\363<k]\346\273\253\004\255\274\257\304Z\275\032LY\275\177\006M\276\017+\023>\372K\261=a\214\275\275C\241\221=:Y\245\275Sx\t>Z\326\243<\030\253\266\274p[\344\275.x\017\276~\236\201\276\321\311\363=p\363&\276\177q\347\274\035\316\354<\013&\362\274\313\263\214<\204\263$=\014\002\334<\310\003Q\276\254DX\275\300h\001=9\366\241;\216\377\317;\253(\"\274\300\376^\274\034\376\337\275\317\251\037\276\223El\275\232;\300\275\315\330R\273Z\314\206\275|v\006>M\253\267\275\343\374\352\274\037\210\203\273zxb\276\032\257#\276\3616(>\357\213\250\275_\260\322\273\330\206H>F\017A<\021=\255\275\361\247\335\274Z\203t\275\203\201\203=\254\250@=\004=\236\275\221\343\026>\201\272\327=\277R\022\276\302U\221\275?G\360\273\177z3>\236/\006>\221\216\206=\275e\'\274N\361\t\276O\350\322\275\205a\301\275\325\335\t=\220i*>s\231$;\365\320\t\274a\\\246=\301\001\235=mdC<\370w*>\215\261\334\273\003\257\252=\037I\212=\031=\346=\223\372\036>\232\374\003\276\301Fk\275\232\324\021\276\221.\240\275\020\310f<\201\016\036=\313\035\360<\215\202\351;7!&>\306V3\274\364\201\247\275\004\321\'=;\005\245\275\343\006\023\275\336\233u\276\n\014\204\275\227E\027\276\364.\027\275\322\221Z\2757L\267=4\035@=l\275c=6\217r\275\304)\362\275\225iw=\021\017\223\274\362\307\226>\341~\375=+\245\306=\352 b\275\205\222P=\260\\X=\030!\273=\364\n/\276\233\274f>\204-7\274\214\304\207\275\210\357\376\274\347\340\334\274\266\273\276=\256\344\345\275\376\262\375=\031\235\256\275V\265$\274\010\372\264:\274\3040=\001\271\013=>0\257=\306Q\215\275\274\351\215<\346dp\275)\0338\275\357oC\275*\"\346=\271\232\003\275C\021\354=\200\345\266=1\3445\276\343\362\315<\022\220\235\276%\001]\276Jr\021=\253\270\351<\036\272-=\t\337\275<9\213\314=!9\243<\016\223\275\274!\3541=\235\032\360\275w\022\030\275\302\243\363\275\307;\264\274J\007\006>|vf=_\303&\276\312\363c=7\3424>\177\\\263\275[Fw=\r\233}\275\302^\336\275\217\213\206\275\026=8>\3311d\275w\t\355\275F\2577\275p!\025=\3579\007\274\335\025\203>\316\233F\275[\213i\274\230X\356=8\320k\275\351\200b=\t\006\326\275\334\t|<\025s\230\273\002>\362=\354\203\200<\343\250)\275H\342\273=\216\317 =\306\005\375\274\361U\031\276\241\247\372\274\207=\303\272\035-;<%c\223=s\202\335=\373w!>E\242\253=\027\034J\274<2%\275\201\221z\275]\2161=\037\245\233<\336}@=\246\014\260=\320q\316<\2315\300\273\356\224\r\276\214\242w\2766\333\301=(\032\206\276=\233\262;>\331x<\232\300\n>\007\271\225=\244,\315\273\373p\025\276\320\251\300=[\237\272=\363\246\005>e\242\004=\204\345\216=K\366Y>N\327V\276\003G\034\275\337\321?\275@h8>;\270\253=}\000\023=,\306\340<\t\306\265\275\211L\330;\311]\270<\371^\207\274E\335\351\275o\002\365\275\352g\213\275U\343m=\202\364}\276\372g\022\276\312\'\221\274\337\n7>q=\373=\222\232\214\275\025\223=>\227>\021\275\357\300`<\0364\030\2747\373;\276\no\204<3\025\323\275PX\033\2748\337\330=\030Xm=\277~\335<\365\347\346=;\333\236\276\311\360>=\023\340\203\275\035\223\"\274Q\026\245=mi\332=\222\232\027\275w\200\257\275\311\244\313==-`=\377\373\210\275t\242\036>~0\344<\211X\237\275\023\354&=0(\322=\037fV>\226\327\343<\330\"\"\276uf\004\275\265&\025>U\300=>\273\252\212<?_\215=/?\214\275y\205\314=m@\030=\357\037\314=\267\271`\276\373\355%>\336\250\352\2754\205\234=\273\206{\275\202y\263<\316s\210=\213\344\250=6\000\247\275~\271+=)\324 \275Z(\364\275\230\305\351;`\241\177\275\366$\226=\212\017T=\243\247$=\274\257\035>\022\200\022\276I\270\027\276\354W\366\273_\307\250=\352\214\351\275\026\232\002\276\23420\276\217\246\267<N\351`>\tv\350\274x\355\036>\210\031\353\274\230GD\275\327\340\310=)\366a\275\323\264\220=\247{\261<~\232\025\275\330d\363<dI\366<\023]\215\275.Z\010>\275\267]\276_\025\315\275r\027\013\276\336\311~>\202\270\355\275JLg=\004\207+=r\357\035>_d\"\275S\242\273\275V#\345\274\347@\251=\177m\001\276H\301\'>\341\222\030>\243$\020>K\256z=c\220\244\275\364\017Z=\306B\237;\201KS=\233\303H=\376\231\320=\307\255\273\275\337\374J>\3412\022>\311U\220=\237\202\007\274\313\372;>\222O\377=\307/\313\275\303\231I=\260\031\303\275\316\274q=cP\002=\323\365\032=\t\236\233\275U\345\307=\241A\307;\217i\230\274\030\030\222=\356A\231\275\025\247.>\033\235%\276@\250\032\274\237\342,>\354\346(\2757H,\276{\275A\275Q\327\237\275\257\033\203\275\024\325\277\275{\351\007=\325\243\371\275^\307\270\275iB\272\275\352Q\204\275\336\202\233=\345\000\353\274\200\320\005\274v\321\326=L\333\251={%\231\274O\320\272\275\305\311\362=\236S\355<;\371\024=\035p`;/\276O\2768\274/\275.\325\037\275\237\3724>\324T\222\274\016ai=\333p]>W\225\013=\250\032\237\275i1U=\352\333\'\2764(\317\275v\016\306=\004\274\354<f\204\232=\277\353\351<f\341\331=\023\246\033\273\034\033\336\275>Y\377\274I:\037\276x\362\030>\342\001\030<\350:\032>\246$@;u\224\234\274\217\212\221\275\224\323\301\275(\211\r<\217MN\275\236-\241=Ui\032>\341\rd\274\300\250\303\274=k\336\275\210\315\320=\263Y\222\275\234\275L>\324\033W=\307\336\257=U+\355\275\210\314b\275\317u\337\275zt\016<#\340\241<\346nY\274\035\025\343<I\327\020>#\035H=_\207\215\274V\031\203\274\236\262O>\304E\337=n\261\340=v\004M<\nc\247=+\360\225\273\364\333\025>^\335%\276\247\323:\273\2745H>\373\n\302<\241\210\363\275\25092\276\360\325\274\275C\301\363\275\305\373N\276\271\267\272\274\241`\374;\316\351\221\275E\022\360\274\217\301\255\2759\314\230\272\266 @<\354\001\325\275-.\373\275\261u0<bN6=@\312\376;4\022\017\274\007g\262=X\231)>k\331\247\275\025\"\300\274\224\206s=/\357a\275\251\220\\\275\023\330\355=Q\227\202\274g\0348\276\213\363O\275\241\246\304=\031fM=\021\367\376<\233\222\207=u\025\"\275]I\200\272\r)\013>?\312D=x\310X\275G_I>r\214\210\2758\227\211\273\362\351\212=\253\261\232=Ue\321=\212m\n\276\277\177\342=]?\242=Z\020\020>\262\373F<@\262\210=\252\243\203\276B\324\014>\253R=\274C&b\275\030\227\002>}\002\203=\307\2017\276a\217\316\272\026}\245\275\210\245W\276#\273\360=\035\271\323\275p\257\341=\t\337\373\275\220\315(>@B\352\275\217\312%\275+\205\364\2751\355\030\276\'J\005\276\004\261+>\364\327\213>?\371\231=|s\002>\351\351\343=|\206;\276\340\240X\276\220\003:\275\315\273+=\230\357\256<\204)\346\274\314o\'\276\200 \304<\263\2371>n\310\200=y\n\252<\255\356i\275\222\306\010\275\036o\023>JhQ\275\320\314\207<\257\366\271\275\306\313#\276\017C\200=1\'t=\220\304\317=\037%\317\274\307\356\006>O\177\\=`B\005>\360=P=\305~\372=\227{\220\275\260t-\275\023G\255=bjZ>\025\324l==\351,=\027\001\r\276\326\371\216=\036\337\007\2766\202\037=\221\356\257=\314\222~<\323~\023>\236\342\277\273\320\344Q>\227\243\342\274\263\213D\275\022\211\240::\037\357\275\360=\346;\210\005\'\275\356z+\275\274R<\275\242\244c<\370\340\205\275Q\221,>7\344\246<\014\364\264=\376\303\037\276\037\335(\275\300j/=4\363\201\276\272\313\r\275\325\343z>sSO>\317\003[\276\265(C:\274\'\317;\023\007\237=\245\356E=#\220(=\r\324\223\273\357\006\030>\224}\206\275\365)\025\276C\310=>\212*\321\274W\262\211=kb/;o\022\n\276\375\276\010\276a\233\257=\227-\250<\252\373\t=\226\303\252=\233\225K>\223\037\211>&\264\022<`\221\337=\253\272\005\276\357\\\360\275H|\276<\013\362\r>\232_\274<\337*k\275\n\226\003\275@\336/>$(g\273\257\363\327\274r<\342\275t}\010\274+/\224=\177\241\232\275^\276\247\275<>g\274!\240\026\276*\277\276=@}_\275e\t\375=\034q\322\274\317\'\312\275\314\232\026>\326=\330\275\315\005#\275\032\021\242\275\203\001\303=!\203\006\276\357%\302=\222\227\374\275\305\225@=\357\3522\276j\273\031\275\326\354\007\276p\376v\275\225\034\266={+|\276\355\366&<\255\344\316=\204 \354\274\234\036Y>\235\020\277=\314\262~\275\217@0\274\020+\366=\275\216\216=\3056\346\275\372\335(\2754\314\353=\330}\225:\264|\340=\242d\254\275\177;\022=\221\302.\274d]\003>T\203\276=\002sd=\177-W\275\324\226\336\275\213\005\354=`.\247\275\272\344\022\275Rj\201\275qU\034\274\021\232z\275\313\323\205=Z\342\341=\246\364\214=\273\316,=\277^<=Nh\260\274b\307\213>l\322\215\275\352\327r=\313\224\001<K\270\023\276\350:\027<\311U\270\275u\264J\276~N\205<\257\245\340=X  \275\226>\262;\rM\005\275!?\357<\271\376\222<7\nq>\314\231\203\275\016\317\t\275H\256\301\275y\232r=\314\234\010\275\034\215\023>\214\265\274=\217\344.>\326\302&<4W\252\275\341\267\324=6|\360\274\036;\212<\264\210\327=\246\2402\275a5!\275\3315\275\275/\"\211>*\301\347\274\253\037\257;\206.\005\276\213\256\022>\323\227\203=\276\236\343\275u6\271\275\205\003\030\275\204\t\323=\346\211\360=\303\235\220>[^\222<H\300\t>-\211K\276\267_\221\275t\344\010>\215\315\325\275\001\3354\2757s\376\275\363En=zZ\341\273\205\035j=\374\026r\273\036\235\360\275X\364\242\275\322\361\025\276\205w\306\275\020\026\300\274m\327r\275\303\337\005\275\367\332\003=\314\226\314\275c\0348=\206\365\335=\364\204\260=h,!=g;\025\276\227\212\240\275\367I\323=\242H\224\275\245\221{;\270\'\t>Y\006\345\275g>\336<\324}\307\273WR\204<\346\2175;(\364U<\211\264\014\2766\202\321\272gK\360\275\'\370!\276\327\377\347\275\357M\007\273{c\333<\035\243\213=\337\221\277\275\257\255\245\275\230\242\022\276\332a\367\274\254\243 <p\272\372<\220GY=\332\205 =i\010\204>\351\364\030=\2228\200\275\353\267\262=\023I\010\276\272\357L=\263& \275\016\334\305\270\243\314\201=\332\333\361=\345Q\236=A%\202>\247A\334\273*\026\264=~9\206>\000\355\242<\271xl=\233\335\246<\365\212P\276U\2079\275D\225\214\275$!\314=3\363.=\344\'\022>\213\330\230\275\375\022o=\346\216\226\276\353H\230\275N1I=z\332\016\275\224\226\023\274b!\306=\375\000\007\275m9\236=\241I\177\274\342\350[>\204\322~\274\320\r\"\275F`\245\273\\\022>=\371\346\366=\003U\251\275\230\222\004=\364\346\266\272\367w2\274\325S\343=0\352\300\275#\222\260=QH\026\276swY\275\254b\355=&8\001\276\3114\202\275\332r\316\275\007N$\276~\273W\273\212\023\354\275*\243I>\322\240\314\275\003\327j\274=0\313\275\236\322\366<\360I(=\353\322\341\275J\372\224\275\375\353\200\275\345\2350\276A\212\250<V\r\026\276\277\263B\276\305\246\020>\215\262\032<\263/\302\275\2605\301=\027\017(>\357\231\324\274\374`\303\274\227b<;!)\000>P%u\275\3208;\2764n\016\275\r\345\243\275s\340\225\275k|\334\274\025G;\276\221\305\240\275\332\326\340<?YG=^\212r=\337\321\016>>\003\335=\366;\n>\342D\224=EI==\333UZ>\222\236\251=\243\322\006\276&\'\006>\357\224\006>\246y+\273\201\233\013\275A\370\035\275\336\300\222\274\333T\023\276\327d*=Y8v9\377\215\205=\354\305\306;\354)K<\340\0142>:\3617>\3071\"=\363\321S\275(3\245=\241F\372\273D]\031<~\033\017>\331*\203\275p\332\275\275\1773\347=\201tV\276/\314;=cb\345;\nR=\276\350q\213=\373\237:\276\224\334\321\274\335CD=A9t\276k\365\257=\204\337\035>\026w:\275\364K\240\274\210\034\267\274:\320\017>\305\315\200=\221,\275\273\222\375>=\341\271\227=\266!\361\274Sf\231\275\207\256\354\274JJ\002\276\232\023\245<\3057\344\275l\356\037>\n\346,=\310\371\375\274T\306\335\273\260pm\276\254G\315\274:\030\003\276H\367\214<\337\021\342=\310\352\345=\3407Q=\241z^\2768\025\235=\t\000)<As!\276\271U\007\276\3434\026\275o\276:>Q\235\275<\253\361\377=6\316\000= n\355;\221\257\001>$\004\214\275\0310\330\2730\031\010\275g\016\021\275\030\346\362\274H\267 \276IH\244\275qF\311\274\356\365\256<\244\223{\275\270\243f=R7\t=\035\030\250\271*f\217\275\235\235\364=$gX=;!j\275\300\223m:\277\313\236<k\353\314\275\326\215\202<Y\254\234\276U&K\2741\022D>o\344;>\330\177\323\275\324\332\004>\"4s=\026\243\340\274\226\247D>\225\271\210=\352\r\266\275X\212\373=\371\355D<\022N\023>4\364\247=\267)>>\346^\027\2745\005\231\275\234\226\305\275\334\001\340<RT@\276_\017T>\022\212\350;\203\224\215\274Vc\016\276\332/\032\276ko?=\201)5\275|\272\005=1\003\352\275\255\214*\275\335\314\211;\2202\340\275\2538\212<ro\026>M0\230\273\231\361$\275\367l\354\274\022\346\\\275\311\260\036>\217\320\302\275Y\000\034>`\255(=\310\364\204\274\344&Z\275\354\250\'>j\252\254=\023\333\210\275\025\032|=\200\376\363\275uZ\001\275T\247R\274\223\265\325<\217\033\242\273\004\304\r>\023\327\241=w\302\243\275\241\264@<-\244\220>\334\260\357\2759D\236\275\030\346=<\265\032\203\2754\356C\274\265\361\264=\020\002J=\215\020\224=\322\323\351<\270\357\223\275\021\3660>*\263\003=\357\335\205\274\352\234\363\275\366\260\215\275J\355k=\370\363%=\243\216\375\275R\374\215=\267\216\321=\252\213\237\275\t`\r>\373\323\226\275\362\243K=\245\271N\275<\252\232\275X\246\212<8\035\004>\360\206\354\274\271\322@>\236\213\307\273_\341w=l4h\275\244\026\220>\217x\324\275\260\254\254=M{\007>6\300\347=\245X\374\274\017\257\240;\365>\t\276\245b =\247:\271= .;>\362\3445\2751$\'>\337\253\005\275\016d\325\275\225\0041\276F\346\237\275\025.\003\276\3666,\274y\301Z>\272\037\316=^\014A\275\304\362\341\275J\216\024\276\235J\313=n\333\216=/\201\212<\372\223\210\275\376\363\333\272\253\340\332<Ke\217\275\343\372/=Vm\256<\035\325\251\275\234\030\003>\253\023}=$\322\324=a\276\177>\224\346\236=\263\342\216=\316,\367=!\275\224=Q\"\304\274\334\357\215=\360\312\\\274\014\307\334\275\225\246\000>\303\276\337\275\237\367\t\275b\024\254=\212*\036\275\224\337L\276\030\303\234=>\342t<:\266\235\273v\2175>e\361h=\201\362\316\275\225?\351=P\001d=\230\377\361<R\317\262=\022\022\313=\326\246\321=\336C\247\275\2367`\2760F\216\275\273\215k\274Cq\221>\355\217\207=$^\204=\350\300Z\274 H\317\274\017\256\247\267E\215[\275\215\375g<<\264\021>\364\273\240;\033+x=g\033[=\236L\317=(.\310\274\222\220\035\276\017tO>\001`\312\275\327\0019=\257\035s\275\323\033V\275\276\377\333\275i\004\027>>\025_=\231;\274=\332Ou\276\253\3775\276\327\003\246\275\200?I>\177\031a=\335\255\315\275\365\342\332=/\213\217>\364y\r>\254mF\275\222\021\221\275jd\017\275\267\372d\275\032\341\216\274q\337$<V&\332=\316^\330=a\320\024>\265D\321=\255K\\\275\216\207\241=\345\r0\275\260A\216\276s\034\013\276\262\346\032\276\315j\311=\251\333\016\276>|\213<\207i\332<\376\215\354=u\303\312<+P\263\275\034\316\224=Y\262\202=\331jM\275\355\366\254\274L\377\310<X\030\344\275R\350\"=\tA3>\305\236\274\275\004\264m=\000$W=K\007e=\344\014\330=\263\')\275\232\376\261<4\177\225\275\236O\331<\026\246\244\273\264m3\275\214.\220\275\"\275\037\276E\000\014>g-\314\275\341]\035<w\340\033\276\312\375\235\275[\347\323\275\241f\345={^\210\274@^\014\276i\030\033\276\246!\301\275jNw=\326X\270\273\017\216L\275w\022\372\274p|V\275\026\354\206<\236\216u=\243t\332\2758\262\257\274kZ\251\2747\227\000=\364\033\372\275o\324x\276\2752N=\202F\013\275Q\000)>d\260P=\374\245\235\275V\275\341\275\241\362\035\276\345\006h=f\036L\275\360\262e\276)\031*>\321x\202\274\326Gl=\231\305\033\275\003sh>[\252\233\275\251\300\230=OT\021\276\3545q\275\023\252\322<\217\353\023\276\2360\375<\266\335\335=\327L\341\271\341\002\340<\206\337!>%.\336;O\337{=<\357\327=\034\025\001>\354\303[\275`6\007\276n?\230\274BF\334\274\313/\002\275\270\033\372=\013\017\274\275\357\n\262\275\273\272\">A1\273=\262S\303\275\247*\213\2755Ns\273\334\260\004\273\016\377\336\274+O\327\275\345\241\027\276\031YZ=Q\035\212\275g\346Q>\335\036\354\274d_\275<\267\033\342<}\344A=\3258\211<\317U\220=\240K\007\276\356T\301=N\202l>\001\363\374\275\236\344 \276V\370\244;>\216\214<>\355c=\373\373\276\2754\352#\276\227\3101>6W\215\271\3566\247\275_<\006=\311\207\000\276\003~\222=\034\356\351\275\\y\245\275\033\217\375\275\226!U\275\013\376\303=-F\316<\250n\331=\343\361\010>C\222\003>\034#\243=\3506W;\211\277\337=\032* >\233\263\037\276\"\002 \276\262#T\276\311vw\274\313#%\276\277\207\243\275\215U^\274\337(\316=\t\312\n\276\276\021\355=\350\341\236\275\264\000s=XJ@\276!\005\021\276\324\025-;\203\265[=*\\&\276\375\241*\276\3200\374\275Un\277\275\005\006\347=x\232\'>\373\263\017>{\372\350<e\270\016>\324\365\302\275\335\322P=\374\351f\2757\312q=\362\207\204=\313\010\322\273]\036\024>P\204o\273\025\r\333<do\371\273\362\224\241<\244e\267\2740\326Z>kDd=\323!\372<\270\307\370=s\031 \276\237;,=:\270\236\2759\367\207\276\033U?=L\317\365=\000)\243=\001\341\266\275d\270\336\275\341\306\217=0#\006<{\324j>VG\016\276\210\271\307=X\360a=\177\371%\276<X \276\356\303`\274\351`\030>\013\013\321=\340-\344<b\306\262=\026qE;n\236\311<+V\240=\232\350\263=\320\372\025\276!\347\322\275\331\304\215<\310\310\254\273\303\n\223<q\261\'<\006c\271\275\303\004\373<\321\212\022\2763\t\336\275\000\265\006>)T\354\274\306\307\037\275\010\220S<B\373\031\276g\233\315\274Z\312V=\224\377\245=\201 }\275\022\254\214=\331k\346=\000 \267\274b\0043=\024\316\374=[\261\265\274\201\375s\276>\347\271\275\267\266\323\2750\212\370=G)\025\271<\333\311=S\024\252=\205\344\014\276\342\270\257=O_\274\274\273}\216<\n\233\035=nVq\276HU\025>\360g\033\275HV\217;\266\007\347<\250\255\267\275\250)\244=:\336A\275%*\256\273\224\364\245\274|\025*\275i\200\202=X\341\022\274\006\277\240\275\214V\234=r\010\023>\217\220\021>\203\247\200\273s\331e=\337R\245\274\221\230\367\275\341O/\275P\3548=\345\035P>\004S\370\274\204\2266\275\001f(\276\032\232M\275>\365>\276eU1>b\270G=\301\336\245=\027Qj\275\206\367\255\275nj\362=\255I\002\276y7\201\275\227J\203=\030&\312\275\221\205\237=\333\021\321=i\021\264=*V*\274\346\n\377\273jy\313\275\\\tW\275\036\250\270=\364\332\021=XV\222=\305yk==\270b<{If\275\333\276\236\273r\267\244\274\327\262,\276\004\360\316=W\314\324\275\201\004m>\301\352?=\343.\356\275?\211\321=\352\205\346\274\310m{\275\336r@>\256\010\336\275\010\304\236\275\022n\234=\032\373f=0\256d=\227\372\352=\034/\033\2761A7;cK\030\274 \216\261\275\337\260\332\273/M\005\2769\333\205\275\013\366\212=\376\342\201<\027\007|>7\356N=\223\n\267\275\004\263\361=$O\032>|\305Z\276\216\351\027\276\266<9\276\375x\024\2762\355\217\275\016\263.\274\342\220\301\275\037\"\006=\274\277\023\275E\220\327\275;\374\306;|*?=H\331%\276\360\266\013\276\354G\021\275\206\357\311=\203\350\212\275\010\025=\276\376\251\306\275\220~2\276\217v.\275\307\254n>\343?~>\310\324:\275+\216\010\274F\321,>~\031\257=l7\241\275\210\r\333\275\337;\241=\020\232\004\275\211\2309\275gI\006\275\313\223\261\273\237\243\025\275}Q\351\275\374\327H\274\332<\370<\266Y\264\2757\376\263\275\016@\341\274\372\322\t>(\226i=\246;8\275\312\036\365\274\n\030\344\274\315\354Z\274\356\321$\275\205\343\321\275R\"\341=\367\304\037\275M\255K\275\tC\240=\257\204f\275\356\233\256\275*\3479\274\210\213\021\276J\332\024\276\020\262J\275\300G\007\276g\265&=uQ\245=\321\363\003<o\036\332=\\\353O>t?H\275\034\n\317\275\003\232\224\275\023S7<\244\024\342=B!.>\2311\207=\243\250\210\275|D\200\275\017Z\330;p\023\357\275\253\371`\274\250\240\344\275\216\313\313<\n\203\300\275\004\341\260\274i\006[>\345<\214=\234u,>\235\266\332<lY\024\274\335\302\025\275\233\036\305=\310\231H\276\356\274\365=>\353\201\275!\177\230\275\336|\206<\371\321\001>y\215A\276\237\231S>\024\3409>Vl\322<B\0058>X\367\232\275\225DC\275\271jB>\241B&>\377\030\255=\'3\253\274\326cI\275\352\226\225=V\352\340<m\335\331=\2044<<%\332\202\275Y\210?=n\336\240=\352\264\017>\216\336W<PE$\275\203\367l\276GHs\276\211t\350=\257\212\200=\375\363\035\276e9\214\2758iT<[H\2718>AP=g\222\214\276\3202y\273\312\030\237\275;f\007>\374\237}<k\355=>APJ\276\026\000\234;\263\246\206\275\330f\226\275\366\244N\275\357\033\n>\0365l=\220\252\273=\237\013\030\275\000\360\211=\306+\301<Jt\262=\240\352d\275\t\224\034\275\033u#>]\311-\275\324\244\343\274\202]1=\344\372\257\275\200Z\020\275#\261Y=\"?g>\232\341\355=M\365\210\276\321\361\215\275\361{\254\275\006\002\242\274\355s\237>\300\225\214=\204cV\276d\322\265=\363bv\275l\247\000>\tkx\275Ha\220\2751P,=\254\301T>m\0039>\245\006\317;A\356\311\275.\334\200\275\343\235#=\331\034 \273\356\262\253=)\r\275\2750\235\016<\206\375)>\205\224\361<\353\006\245\274c\200\323;\231\017\362\274\300\310:>[ \262\274\027c\237\274\025\300\202<\244\232\233=-\277\300\274: l\276\377\r\276=\264\341\031=_\0069={\351\231=h\214\210=\225i\014>o\211\250\275p\321\365\275\230\366\212=C\215\031\275y\201\264\275/\213}=\360\375\354=\367\337A\2756Y\010>\217\021\010\276\360\013c\276\365\253r>N$\026\275\326\365\317\275]\335\314\275;C\017=\351\365\034\274\260\334\313<\"jn\275\242\332\304<\355\322\241=XKH<$\341\000\274\"E&\275\230\330M\275\212d\326=\374s\225\274\335\3350=\"\"\237>>\322\314\275\267\206\322\274D\205\026\273\323\364\264\275\244\321|=\003\305\222\274\276X\231<\317\331\354=\213\366\357=3\201\221=>y\356\275v\367\223=\367\034\300\274\210n\253<\032o1\275\027\312\001\276\234\267\232\274\345\210?>?\351\360=\372;D=\030\303\333\275}`\352\274C\236\257\275\032><=\343\224\034\276p\023\232\275\032f,>6\341\223=UvK\275\332\316%>\272\020\027\276\227\002\367\275\3235P<\241\r\364\275\2332\n\276\243\365\247\274d\356\362=\212.\267=\272\005b>\300\020->\034\032=\274c\207\277=\257\001\317\275:\341\207>5\233W>\344?\177=\3325?\276,$&>\357\223\037\276\336u\022<\354\343\003>\322\022\020>\'\244\006\274u\303~\275[\237Q>\212\343\020\276W\326\252=X\213\003\276\226\265\242\275\273W\244=\226\376\037=\335\347\006\275r\344\251\275\207\276\211=R\346\034\271\005\375\032=w\340\004\276\264\345-\274\216\033J=f\336Z\275\350\370J>rj\223=\225&\230\275O\373c\276T\007\322\274b\353;>\020\314A>,\006\215=\317\313\r>\341\360\347\275\240\221\n\276w\315u\275\245\342/\275 \273Y=\177\242%>\271\367\005>\177\037\177=\302\274\322\275\317x\324<\247\374\267\274\347KC>\316\254\212\275\0165)\276\276dS>\000N\224\275f\333\216=o\367\265\275&\nd\276ub6>\367\316(=Gi7>\261\005\250\275N\037]=\254\017m=yCU=\332@\017\276+Z\200\276\260\001\322\275\226\264C\275\00049\275\0324:=\214D\336\27441\246=\345\342\026\275\'8\004>\325\377;>1\003\273=\276J\017;i\367\226\275\021\275\223=\211\033\310\275\017\361\026>n\353\250\274,\240\013>+Cn\275}\200\216\275\375\037U=\337\231\204=!\234\217<\206\021\256<J\360\034\275\363\342)=\275\035\027\276\3619\315\275\201\020\255\275Y\323&\276s\267\321<\346 \316=\262Q\243=\234.\025>F\006\r>X\031\312=\345.\270=:\370\276\275\232X\203\275\351\312\256\275{B9=\254\217\226\274\030\013h=\216M,\275\201\325Q:\027v\275\275\323\252\256\275\"\332G=\030\225\306=\013\307\027\276\276S\235\275T\215\367=\037|\375=;|5<\345#\307\275u,\307\2751\366\205\275\315\321\327\275r\331\201<\362\316\014\276\030\270\345\275\231\230Z\276\216\260(=\3600\301\275TRu\275\004\366\324<\205s%\276\367\030\375\274\265\306\'=\373x\221>`\000\240=H\206\036>\004\334P>\274\035\t\276\344\375\020>3\002S=\263\337\207\275\321\320\007>\006\316\245<\003\353!\273\re\025\275\234\262\037=\254R\003\2747\240+=\021\314\320<\024,{=\236\276\271=gn\251<n\r9\276\177\036\202\274,\010\013=\257j\022\276\367qA>gY\303\275\340`/>$g\240<\021\370r\275 \004\241=\337\217\000>\310\360\\=\245\036\013\274^\323\350<U\254\005<^\277\355\273\364\217\242\275\t3u<\306\240\202\271\001\370A\276\001\204{<\031\0301\276\303}\001\2766\002E>\313\265\361\274k\216\023>\214\247R\276\3564Q<\035\365u\275@\217`=\260\0363\273;W\206=v\226\037\274\360\344?\273\nY\270\275\026^m\273A\325/\276\354h\354\273\375Z\314<}[\206\275\255u\336=\026;N=N\207D=7\315\004\275\214@n<\003\253E>\332\2005\276\022\232\376=\"\275U\275\017Bg=;X0\275\267\200\234\275X\374\210=\351L\345\274&\\k\274\354>P< \276\304=\275j\244\275N\325\005>s\301\326<\377\233\267\275\270B@>\377\311:=\304\350\233=|\026\324=\303k\372=\337\340\240=\213\325\250=\230\374I=\301\247\270=Y\345\234<\334\3626\2758y\356=\\\r\313= \316\312<\235\354\333=L\253N\276\330\253u>\264\266==\261\367\212\275\0278\257=\366\240S\275\237\235\001\276{[3;\333\237\274\275?\317\213=\346\355\236\274\235\364(\275\242\"\211=){\005<VF>\273t\214\234\275\220\312i\275\356;\245=\n\361j=g\330|<\001n =y\r\265<\251\237\237\275\003\342\253=1w\027>\241\367~=\t\017\321\275{\242\342=\251U\321\275\2269\202\275\226/>=K\324(\275\333)\314=\014x\305=L\345\261<\203\007\212;\267\006\212\275&\262\n=\357\301\210=\n\036O\274{\370\262\275\342UF=}\2767\275\367V\376<\227\224\377\273\000]x\275Raa\274\252Q\356\273\275\343W>Q\332\210\275\200T\235\275\363\032V\275\361\024\357\275\355K\261\275\242<H\275\003\343\033\275\021\254U\276\331\240\334=A\272c>\017i\303\275Td\204=\234\245W\275\210\020\310=<Y=\275\221\007\001\276\304C\325;\241\227\304\275\300T\242\275\022\372v<\322\264\325<\ru\'>\325\214\325\275i\344\025>,\'?>3&\032\276j\210l\275\353Xq=\206,\t>\344\355\221\2738G\371\274\007@\022\276\376z\024=\236Z\363<\'\256|<\343\354}=\225\247\335\274\337\361\022>\350\324\003=\206R7=k\241D=\315z\376\274\241*\317=\254\212\032>+Y\210\275\023\345\323=B\252>\2750\032\233\274{\251\226\275\350I8>DrS>2X\237\275\"\332\313\2755\023\023>h\260\026\276\343p\352\275|\203\"\2762q;\274\361b\252\275$s\234\274\262\216\\\275.\305\230=\004\007\235=\000c\256=E\320<\2766\205^=\243\341\251<o\207N=\322!J\275M\314<\276:\376\031=J\343\205\275\3146\315<A\352\255=-t\230\275B>\002>\306\253\323\275\237\335&\273\246KW\2741{\340\275\007cH\275?\353\330;\242(\333=\001\354\231=\210\345\277\2750Y\216\275\327\247\352\275\337f6\2764\037\314\275\377\006\r=\021\005\217\273\361\312\364\272\366C=\275\021\260N>m\035D\276\257\375\213<\217\222\020=\021\306S=\360\0009\274\310\r\371\275EH\355=\275\243\237\275\030\325m>\371\334V<\307\264u<sX\032=X\222\244\275\374\244\303<oJ6=\316\274Y\2744F\302\272VE^>:\253\022:\324P<\275\2323@=\313\345\020>d\324T\274o\036\352\275\366i\224\275\234\236(>\251\264\333\275\266\223\213\274\030\201,=\270\n\363\275\362v\006<ITh\275\376w\027=#R\201\275\311\003\022\276\270*\375=\034}\264\275b/N=\334\035\337\273Y-\324\275,\266k\275T\246,\276\224\357|\275\234\2062=\255\342\335\275\213;M\275Y\363V\275\225\003A>\310\210_=I\273\006>\367\027\243=\375\333\266=\305\254\274\275B\314!\274\262H>\275|I\317\275\344I4=C\276\006\276\357:\024\276\r5\013\276\" J\2748b%\276\324\243\003\276\345I\003=w\272\r>\033\021\017>5F\377=\266c\005=3\314_=\013\213\001\276_\326\017\275a\315\253\273\271\332\322\275\374\200V;\334\020\326=\305m};\240\315\017>\215T!\275X\226X\275\200\240\032>!8*=\315O\257=\022`]\274u\355\">!g\265<UL\301\275\201\215`\275]\257\037=\223\250_<\222L/\276[A\211=$|G=\213\240\362\275\357b\356=\305\276\235<*K\353\274\250Q\315=.J\241=,\374^>\200\n\346\275\005\272_\275\275\340]>\253\302\023\274\0355\365\273Q\300\347\275n\363?<\374\\\215\276\207-Y\275z:\'\275\022m\222=!\274\003=\300\267\377\275\n\2352\274\004\022\371=\036\251~\274\274)\231\276\3443\216\275#D\030<\344by\275\256\257\236\273\3023\230=\261}\332<\003\004\374\275aP\202\273\265\374\245\274\347\352;\2749\026\376\275 \377/=\317\nD\274\322pL=9\232\247\275SX\234>\230\212\254=z\265\034\273U^\210=-X`=)I\224\275\205\360\211:\311\330V=A\364H=a,\301\275\221\362\007>\226%r=\372\300\r\276.\t\275<^),=~\032\001\276!\215\001<;~%\274\0171>=\302\035\031\276\\_\365\274\364\227.\276\3131b\275\376l\027>\021\177\250=l\272O\274\303\321\321\275\200\242J\2763\243\341=\300\217\240=\320\351\013>\000\2221\275eX\205\275&\t\266\273|\304 >f6\273\275BU,\275Ok;=\213\271!>\322|\360\274\335\310m<\202\346\375\271\207$->Vx\226=\036\331T\275,\003\320=\326x\332\275\276\251\006\275\306\1773\275\256\014\025\275J\363\037;X6\356\275a\246\037</r\360\275\325<\241\275v\246B\276X\001\234=\017\346\277:\310\034\001\275T\024\372=%\032\301=\365\004\352\274\303\273\200>\204\306\247\274\263\361e<\n\003\277=^!\027>\312\223:\275>\3673=\2253@\275\326\225\'\276\250\227\330\274\263@\206\273\006kv\275\276=\234\275{~U\276\224\366\226\275\007<\030>in\205\2758\251\235=\335\0026>T\023\213\276\226P\014\275\332|`=\023\026\033=\002BS=\022wX\275\320\223\302=~\230\031=d%\347<}u#;\006\"\251\275@ \271<`0Y\275\373\320\303\275!?+>\314\177\003>\364A\222\275c\342\332=\222\353\205\275\277\017<\276d\014\273\275-\t}\276\364\341\230\274\n\364*\276\005\334\025\273\307\2360>\213v\005>\216\220\223\275$v\025\273\225\206H\276\200X\026\272\330\344;=\254u\215=\320\320\302= \"\027=\374+\350<\034oH\275\037l\250\274\252\255\245\275u\367\207=\327EE>\247\274\364<c\331\201=\366\374I\276\007\317D=\026\304\001\276\373\177b\275\237,X=\204\256\036>\320\316\275=\346\247\352=\315\375~\275\221z|=!\036\353=\312\255\022<\177@\305\275_s <\232{\342\275\251\227\200\275\266\225\032\276\200\222\306=\"\206\177\275\333\244\240=P \236=\030\246\266\275\374\r@<\252,\202>\313)\000=tJ\253\274\225\034\203=\244\235(=I\307K\273\275\226\211=\376b\245=T\007#<l\312\002\275T+\322:\351*!>mI/=\"\205\210=v\325\035\276\363\236<>)\220\313\275\375\210\304\275\360w\343\275j\370\217\2760\025\365<\252\254^<\236\222+\276\022g3>9]\262<|Q\247\275\347\303\226<\374?\236\275F\353\330=\246@e<\321\346\016\276 \331\n>#!\213\275\3111\252;\340\211\240\274it\315\275\334\374\201<x\263\r=\205\243m\274*\307I=\261P\204>o\243\246<\211\250\325;\210wI=\251\223O<\027\244q\272\266|\360\273y\325\221>\376\027~=\233x\247\275/\022\212=^A<>\263\320\211=\037V\256\275\244\272\325\267\312\322\310<\035*\34681\305c=2\330 \276+\254\346\275T\200\234\275n\367\031>\037\312\375=<C\274\275\200?\224\274\266\204\001\273\237\376\026\276\342\217\333\275l\251\271==\t>\274=G\204<Op6\274\374\017\344\2744\005\336=\256\345c>\347\362\007>4yJ=\203i\203\2751`\234\275\270v\266=_\371\006=\202\314\250\273fg\246<\332q\344\272\344\205:>\246\215G>9*\317\274\360~\247\275\013\311\014\273\253\337\331\275t\244.\276H\014\021\276\027\201\223\275s\251\344;\305\346\t>\243>\324\275\354K\367<\232\261\312=\321\316E>\312\2454=@\036\253\273\211\211#>\341{\037\274&\335\006\274\210\004\367\273\375K\256\273\244P9\276\217\025\236=t\326\223=c\346A\276>g@\273\'\316\360=\233\357/>\341\275\253\274\315\220\031=\332\323\005>B\035[\275\207\376]:\002\\\000=?\367\221=7FG>\356E\276=uh\272\275\246\016q=\226\217\243=\017\321K;\353\027\r=\354%p<u\352\353=2\347\020\2753\337.\275\336&\023=\357!\274\274HR\010\276\035\271}=\302\322:<\355\203,>\000\326\212\274\203\225,=\031R\216=\221\347\325=\'\337\310\275R\202\331<\335\n\025=\373\264I\275\337\020D=W\035\372\274%R\373\275X\324\255\274=\301G\276PH\322=l\3332>\216\3539\276W\347\265\275F\326\217\275<\030j\276\016\242\232\275\351\211*\275?RC\276\344\225-\276\231\200\367\275\246^\326\274\341\373\017\274\367dt\275\202\222D\276W\334\273=e\276\'=\346\377\030\276\376\303Z\276\213\266\245\275\034)L=LD\351\274lm0\274\323d<=k\316\272=\013\224\227\273^\262\320\275\323\301\216=\212*-\275\335\274B=\013\337\270\275\237|\217\275\217C\016>0\230&>u\236\272\275\250\216\276=\363\367\365\275\026\331\022>\276B9\275\317p\225=\323\346\346\275GzA=dJ\245<\202\225\346\275\207\370Z\276N\236\375<y\034\316\2754\236\367\275v\264*>R\251*=\304\335\245=j\031\365;\272\212\207\2740i\021=\251\344]<\300\201+\275\335e\252=o\3246<DM\245<\313Qx\275 b\262<)\2617\276=3\307\275\211\336\276\272\261\360\245=\'C\030\276\026\237\266\275\304rq\275\020V\242<\325\016a<\272c\332=W\310\200\275\326|\025\276"
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 128
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer1/Assign"
      op: "Assign"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer1/read"
      op: "Identity"
      input: "deep/weights_layer1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
            tensor_content: "24/=\226\230G=\223q\033>S\335o=\373g\201\276\3374\'\275\265+\304\275\256\210G=\267\204\372\274\001\215\300=\210\335\274<\341\361\374\275\367\"B\273\210\345)\276rW\234\275\272\217\206=\346e\363<\243\251D\275>\311 \276\014\312\215\275]2\013\276IB!=:gj\275\005\254\020<W\222u=C1\202\275_\254\230\274\203d\334=\346C\227\275\340Q\306\275\032\031F\275O\262*\275lk*<+\333)>\272\234\233<\243\213\346;\2567\265\275\340\337\006=\333\350\016\275\355\345\275\274\0215\007>\346vL=\244\364\210=\305?\217>\370\033\034>\274\034R=\203\360`\275\323~z=\216\217\177\275\34786\2741~\013=:q\r>\357z\366=\260&\273\275\007\030\030=\304\234\033\275\035\033\212\275\307\372\212:\341}\265\274\374\227u\275\330\215\236=c\\\271\275\222X\261\275x\223\325\275"
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias1/Assign"
      op: "Assign"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias1/read"
      op: "Identity"
      input: "deep/weights_bias1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/MatMul"
      op: "MatMul"
      input: "deep/Reshape"
      input: "deep/weights_layer0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "deep/Add"
      op: "Add"
      input: "deep/MatMul"
      input: "deep/weights_bias0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/Relu"
      op: "Relu"
      input: "deep/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/dropout_1/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deep/MatMul_1"
      op: "MatMul"
      input: "deep/Relu"
      input: "deep/weights_layer1/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "deep/Add_1"
      op: "Add"
      input: "deep/MatMul_1"
      input: "deep/weights_bias1/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/Relu_1"
      op: "Relu"
      input: "deep/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/dropout_2/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deepfm/concat"
      op: "ConcatV2"
      input: "fm/Sum"
      input: "fm/mul"
      input: "deep/Relu_1"
      input: "deepfm/concat/axis"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 83
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
            tensor_content: "\265\000\220\276\312\255z\275uP\250\276m;\230>7\235\203\276\257\2006\276c\235\230\275&\216->\366C9\276G\246\360=e>\024>M\307h<|\326\'\276M\334\263\275!\346\250=\362T\n\274)\320$>\006\274d>\201\273\330\275\210\004\341=[\274\202<\345\027{\275?\000c\276{H\357=\203\305=\276\321\320\200\276d\177\253\273\350W\232>\340\3741>\2341f\276\330\\%\275\242\r\311\274\227\312O>4\327\257\276]\364U<%\0133\276.KF\2759>\345\275\351\003\210\276\374\301\022\276\322\221\307\274\200\200\200>\177\204i\276p\377\264\276}\252\215>Z\036\035\276cw(=\240N\240\275\026\207[=\225\006U\276G\346\225>\255\323P\276\372\"u>x\0337>~\026\324\275XM`\275\212\361\037==\n\235\275\227\210\356\274\341\346_=[0g>\324\337\254\275,\031\246=\355e\365=\203n5>j\347\350\274\361\223\000>\354H\332\274\253\257[\276x\350b=\224>\017\276V\025\r:\\\346\245\275Z\226\333\275\245\205\313=g\272M\276\300\270s\276\256\3169\275\220\202I=\367\034\370=<\226\210\275y\377\335=\222\0232\274"
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 83
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Assign"
      op: "Assign"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/read"
      op: "Identity"
      input: "deepfm/concat_projection0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Assign"
      op: "Assign"
      input: "deepfm/concat_bias0"
      input: "deepfm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/read"
      op: "Identity"
      input: "deepfm/concat_bias0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deepfm/MatMul"
      op: "MatMul"
      input: "deepfm/concat"
      input: "deepfm/concat_projection0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "deepfm/out"
      op: "Add"
      input: "deepfm/MatMul"
      input: "deepfm/concat_bias0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "score"
      op: "Sigmoid"
      input: "deepfm/out"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/score/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "deepfm/score"
          }
        }
      }
    }
    node {
      name: "deepfm/score"
      op: "HistogramSummary"
      input: "deepfm/score/tag"
      input: "score"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/sub"
      op: "Sub"
      input: "Placeholder"
      input: "score"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/Square"
      op: "Square"
      input: "loss/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/Sum"
      op: "Sum"
      input: "loss/Square"
      input: "loss/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/Mean"
      op: "Mean"
      input: "loss/Sum"
      input: "loss/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/loss/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "loss/loss"
          }
        }
      }
    }
    node {
      name: "loss/loss"
      op: "ScalarSummary"
      input: "loss/loss/tags"
      input: "loss/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Cast"
      op: "Cast"
      input: "Placeholder"
      attr {
        key: "DstT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "loss/auc/Reshape"
      op: "Reshape"
      input: "score"
      input: "loss/auc/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "loss/auc/Reshape_1"
      op: "Reshape"
      input: "loss/auc/Cast"
      input: "loss/auc/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Shape"
      op: "Shape"
      input: "loss/auc/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/auc/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice"
      op: "StridedSlice"
      input: "loss/auc/Shape"
      input: "loss/auc/strided_slice/stack"
      input: "loss/auc/strided_slice/stack_1"
      input: "loss/auc/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "loss/auc/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
          }
        }
      }
    }
    node {
      name: "loss/auc/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/ExpandDims"
      op: "ExpandDims"
      input: "loss/auc/Const"
      input: "loss/auc/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/stack/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/stack"
      op: "Pack"
      input: "loss/auc/stack/0"
      input: "loss/auc/strided_slice"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/Tile"
      op: "Tile"
      input: "loss/auc/ExpandDims"
      input: "loss/auc/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/Rank"
      op: "Rank"
      input: "loss/auc/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/sub"
      op: "Sub"
      input: "loss/auc/transpose/Rank"
      input: "loss/auc/transpose/sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/Range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/Range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/Range"
      op: "Range"
      input: "loss/auc/transpose/Range/start"
      input: "loss/auc/transpose/Rank"
      input: "loss/auc/transpose/Range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose/sub_1"
      op: "Sub"
      input: "loss/auc/transpose/sub"
      input: "loss/auc/transpose/Range"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/transpose"
      op: "Transpose"
      input: "loss/auc/Reshape"
      input: "loss/auc/transpose/sub_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Tile_1/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\310\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "loss/auc/Tile_1"
      op: "Tile"
      input: "loss/auc/transpose"
      input: "loss/auc/Tile_1/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Greater"
      op: "Greater"
      input: "loss/auc/Tile_1"
      input: "loss/auc/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/LogicalNot"
      op: "LogicalNot"
      input: "loss/auc/Greater"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Tile_2/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\310\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "loss/auc/Tile_2"
      op: "Tile"
      input: "loss/auc/Reshape_1"
      input: "loss/auc/Tile_2/multiples"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/LogicalNot_1"
      op: "LogicalNot"
      input: "loss/auc/Tile_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "loss/auc/true_positives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "loss/auc/true_positives/Assign"
      op: "Assign"
      input: "loss/auc/true_positives"
      input: "loss/auc/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/true_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "loss/auc/true_positives/read"
      op: "Identity"
      input: "loss/auc/true_positives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/true_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/LogicalAnd"
      op: "LogicalAnd"
      input: "loss/auc/Tile_2"
      input: "loss/auc/Greater"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/ToFloat_1"
      op: "Cast"
      input: "loss/auc/LogicalAnd"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum"
      op: "Sum"
      input: "loss/auc/ToFloat_1"
      input: "loss/auc/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/AssignAdd"
      op: "AssignAdd"
      input: "loss/auc/true_positives"
      input: "loss/auc/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/true_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/zeros_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "loss/auc/false_negatives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "loss/auc/false_negatives/Assign"
      op: "Assign"
      input: "loss/auc/false_negatives"
      input: "loss/auc/zeros_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/false_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "loss/auc/false_negatives/read"
      op: "Identity"
      input: "loss/auc/false_negatives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/false_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/LogicalAnd_1"
      op: "LogicalAnd"
      input: "loss/auc/Tile_2"
      input: "loss/auc/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/ToFloat_2"
      op: "Cast"
      input: "loss/auc/LogicalAnd_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum_1"
      op: "Sum"
      input: "loss/auc/ToFloat_2"
      input: "loss/auc/Sum_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/AssignAdd_1"
      op: "AssignAdd"
      input: "loss/auc/false_negatives"
      input: "loss/auc/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/false_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/zeros_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "loss/auc/true_negatives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "loss/auc/true_negatives/Assign"
      op: "Assign"
      input: "loss/auc/true_negatives"
      input: "loss/auc/zeros_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/true_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "loss/auc/true_negatives/read"
      op: "Identity"
      input: "loss/auc/true_negatives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/true_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/LogicalAnd_2"
      op: "LogicalAnd"
      input: "loss/auc/LogicalNot_1"
      input: "loss/auc/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/ToFloat_3"
      op: "Cast"
      input: "loss/auc/LogicalAnd_2"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum_2/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum_2"
      op: "Sum"
      input: "loss/auc/ToFloat_3"
      input: "loss/auc/Sum_2/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/AssignAdd_2"
      op: "AssignAdd"
      input: "loss/auc/true_negatives"
      input: "loss/auc/Sum_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/true_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/zeros_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "loss/auc/false_positives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "loss/auc/false_positives/Assign"
      op: "Assign"
      input: "loss/auc/false_positives"
      input: "loss/auc/zeros_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/false_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "loss/auc/false_positives/read"
      op: "Identity"
      input: "loss/auc/false_positives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/false_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/LogicalAnd_3"
      op: "LogicalAnd"
      input: "loss/auc/LogicalNot_1"
      input: "loss/auc/Greater"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/ToFloat_4"
      op: "Cast"
      input: "loss/auc/LogicalAnd_3"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum_3/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/Sum_3"
      op: "Sum"
      input: "loss/auc/ToFloat_4"
      input: "loss/auc/Sum_3/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/AssignAdd_3"
      op: "AssignAdd"
      input: "loss/auc/false_positives"
      input: "loss/auc/Sum_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/auc/false_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "loss/auc/add"
      op: "Add"
      input: "loss/auc/true_positives/read"
      input: "loss/auc/add/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_1"
      op: "Add"
      input: "loss/auc/true_positives/read"
      input: "loss/auc/false_negatives/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_2/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "loss/auc/add_2"
      op: "Add"
      input: "loss/auc/add_1"
      input: "loss/auc/add_2/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/div"
      op: "RealDiv"
      input: "loss/auc/add"
      input: "loss/auc/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_3"
      op: "Add"
      input: "loss/auc/false_positives/read"
      input: "loss/auc/true_negatives/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_4/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "loss/auc/add_4"
      op: "Add"
      input: "loss/auc/add_3"
      input: "loss/auc/add_4/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/div_1"
      op: "RealDiv"
      input: "loss/auc/false_positives/read"
      input: "loss/auc/add_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_1"
      op: "StridedSlice"
      input: "loss/auc/div_1"
      input: "loss/auc/strided_slice_1/stack"
      input: "loss/auc/strided_slice_1/stack_1"
      input: "loss/auc/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_2"
      op: "StridedSlice"
      input: "loss/auc/div_1"
      input: "loss/auc/strided_slice_2/stack"
      input: "loss/auc/strided_slice_2/stack_1"
      input: "loss/auc/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/sub"
      op: "Sub"
      input: "loss/auc/strided_slice_1"
      input: "loss/auc/strided_slice_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_3"
      op: "StridedSlice"
      input: "loss/auc/div"
      input: "loss/auc/strided_slice_3/stack"
      input: "loss/auc/strided_slice_3/stack_1"
      input: "loss/auc/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_4"
      op: "StridedSlice"
      input: "loss/auc/div"
      input: "loss/auc/strided_slice_4/stack"
      input: "loss/auc/strided_slice_4/stack_1"
      input: "loss/auc/strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/add_5"
      op: "Add"
      input: "loss/auc/strided_slice_3"
      input: "loss/auc/strided_slice_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/truediv/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "loss/auc/truediv"
      op: "RealDiv"
      input: "loss/auc/add_5"
      input: "loss/auc/truediv/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Mul"
      op: "Mul"
      input: "loss/auc/sub"
      input: "loss/auc/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/value"
      op: "Sum"
      input: "loss/auc/Mul"
      input: "loss/auc/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc/add_6/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "loss/auc/add_6"
      op: "Add"
      input: "loss/auc/AssignAdd"
      input: "loss/auc/add_6/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_7"
      op: "Add"
      input: "loss/auc/AssignAdd"
      input: "loss/auc/AssignAdd_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_8/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "loss/auc/add_8"
      op: "Add"
      input: "loss/auc/add_7"
      input: "loss/auc/add_8/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/div_2"
      op: "RealDiv"
      input: "loss/auc/add_6"
      input: "loss/auc/add_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_9"
      op: "Add"
      input: "loss/auc/AssignAdd_3"
      input: "loss/auc/AssignAdd_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/add_10/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "loss/auc/add_10"
      op: "Add"
      input: "loss/auc/add_9"
      input: "loss/auc/add_10/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/div_3"
      op: "RealDiv"
      input: "loss/auc/AssignAdd_3"
      input: "loss/auc/add_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_5"
      op: "StridedSlice"
      input: "loss/auc/div_3"
      input: "loss/auc/strided_slice_5/stack"
      input: "loss/auc/strided_slice_5/stack_1"
      input: "loss/auc/strided_slice_5/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_6"
      op: "StridedSlice"
      input: "loss/auc/div_3"
      input: "loss/auc/strided_slice_6/stack"
      input: "loss/auc/strided_slice_6/stack_1"
      input: "loss/auc/strided_slice_6/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/sub_1"
      op: "Sub"
      input: "loss/auc/strided_slice_5"
      input: "loss/auc/strided_slice_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_7"
      op: "StridedSlice"
      input: "loss/auc/div_2"
      input: "loss/auc/strided_slice_7/stack"
      input: "loss/auc/strided_slice_7/stack_1"
      input: "loss/auc/strided_slice_7/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/auc/strided_slice_8"
      op: "StridedSlice"
      input: "loss/auc/div_2"
      input: "loss/auc/strided_slice_8/stack"
      input: "loss/auc/strided_slice_8/stack_1"
      input: "loss/auc/strided_slice_8/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "loss/auc/add_11"
      op: "Add"
      input: "loss/auc/strided_slice_7"
      input: "loss/auc/strided_slice_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/truediv_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "loss/auc/truediv_1"
      op: "RealDiv"
      input: "loss/auc/add_11"
      input: "loss/auc/truediv_1/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Mul_1"
      op: "Mul"
      input: "loss/auc/sub_1"
      input: "loss/auc/truediv_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/auc/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/auc/update_op"
      op: "Sum"
      input: "loss/auc/Mul_1"
      input: "loss/auc/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/auc_1/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "loss/auc_1"
          }
        }
      }
    }
    node {
      name: "loss/auc_1"
      op: "ScalarSummary"
      input: "loss/auc_1/tags"
      input: "loss/auc/update_op"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "train/gradients/Fill"
      op: "Fill"
      input: "train/gradients/Shape"
      input: "train/gradients/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/Fill"
      input: "train/gradients/loss/Mean_grad/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Shape"
      op: "Shape"
      input: "loss/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Tile"
      op: "Tile"
      input: "train/gradients/loss/Mean_grad/Reshape"
      input: "train/gradients/loss/Mean_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Shape_1"
      op: "Shape"
      input: "loss/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Shape_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Prod"
      op: "Prod"
      input: "train/gradients/loss/Mean_grad/Shape_1"
      input: "train/gradients/loss/Mean_grad/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Prod_1"
      op: "Prod"
      input: "train/gradients/loss/Mean_grad/Shape_2"
      input: "train/gradients/loss/Mean_grad/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/loss/Mean_grad/Prod_1"
      input: "train/gradients/loss/Mean_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/loss/Mean_grad/Prod"
      input: "train/gradients/loss/Mean_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/Cast"
      op: "Cast"
      input: "train/gradients/loss/Mean_grad/floordiv"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Mean_grad/truediv"
      op: "RealDiv"
      input: "train/gradients/loss/Mean_grad/Tile"
      input: "train/gradients/loss/Mean_grad/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Shape"
      op: "Shape"
      input: "loss/Square"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/add"
      op: "Add"
      input: "loss/Sum/reduction_indices"
      input: "train/gradients/loss/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/mod"
      op: "FloorMod"
      input: "train/gradients/loss/Sum_grad/add"
      input: "train/gradients/loss/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/range"
      op: "Range"
      input: "train/gradients/loss/Sum_grad/range/start"
      input: "train/gradients/loss/Sum_grad/Size"
      input: "train/gradients/loss/Sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Fill"
      op: "Fill"
      input: "train/gradients/loss/Sum_grad/Shape_1"
      input: "train/gradients/loss/Sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/loss/Sum_grad/range"
      input: "train/gradients/loss/Sum_grad/mod"
      input: "train/gradients/loss/Sum_grad/Shape"
      input: "train/gradients/loss/Sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/loss/Sum_grad/DynamicStitch"
      input: "train/gradients/loss/Sum_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/loss/Sum_grad/Shape"
      input: "train/gradients/loss/Sum_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/loss/Mean_grad/truediv"
      input: "train/gradients/loss/Sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Sum_grad/Tile"
      op: "Tile"
      input: "train/gradients/loss/Sum_grad/Reshape"
      input: "train/gradients/loss/Sum_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Square_grad/mul/x"
      op: "Const"
      input: "^train/gradients/loss/Sum_grad/Tile"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Square_grad/mul"
      op: "Mul"
      input: "train/gradients/loss/Square_grad/mul/x"
      input: "loss/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/Square_grad/mul_1"
      op: "Mul"
      input: "train/gradients/loss/Sum_grad/Tile"
      input: "train/gradients/loss/Square_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Shape"
      op: "Shape"
      input: "Placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Shape_1"
      op: "Shape"
      input: "score"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/loss/sub_grad/Shape"
      input: "train/gradients/loss/sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Sum"
      op: "Sum"
      input: "train/gradients/loss/Square_grad/mul_1"
      input: "train/gradients/loss/sub_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/loss/sub_grad/Sum"
      input: "train/gradients/loss/sub_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/loss/Square_grad/mul_1"
      input: "train/gradients/loss/sub_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Neg"
      op: "Neg"
      input: "train/gradients/loss/sub_grad/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/loss/sub_grad/Neg"
      input: "train/gradients/loss/sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/loss/sub_grad/Reshape"
      input: "^train/gradients/loss/sub_grad/Reshape_1"
    }
    node {
      name: "train/gradients/loss/sub_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/loss/sub_grad/Reshape"
      input: "^train/gradients/loss/sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/loss/sub_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/loss/sub_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/loss/sub_grad/Reshape_1"
      input: "^train/gradients/loss/sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/loss/sub_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/score_grad/SigmoidGrad"
      op: "SigmoidGrad"
      input: "score"
      input: "train/gradients/loss/sub_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Shape"
      op: "Shape"
      input: "deepfm/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/deepfm/out_grad/Shape"
      input: "train/gradients/deepfm/out_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Sum"
      op: "Sum"
      input: "train/gradients/score_grad/SigmoidGrad"
      input: "train/gradients/deepfm/out_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deepfm/out_grad/Sum"
      input: "train/gradients/deepfm/out_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/score_grad/SigmoidGrad"
      input: "train/gradients/deepfm/out_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/deepfm/out_grad/Sum_1"
      input: "train/gradients/deepfm/out_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deepfm/out_grad/Reshape"
      input: "^train/gradients/deepfm/out_grad/Reshape_1"
    }
    node {
      name: "train/gradients/deepfm/out_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deepfm/out_grad/Reshape"
      input: "^train/gradients/deepfm/out_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/out_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deepfm/out_grad/Reshape_1"
      input: "^train/gradients/deepfm/out_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/out_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/MatMul"
      op: "MatMul"
      input: "train/gradients/deepfm/out_grad/tuple/control_dependency"
      input: "deepfm/concat_projection0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 83
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "deepfm/concat"
      input: "train/gradients/deepfm/out_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deepfm/MatMul_grad/MatMul"
      input: "^train/gradients/deepfm/MatMul_grad/MatMul_1"
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deepfm/MatMul_grad/MatMul"
      input: "^train/gradients/deepfm/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 83
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deepfm/MatMul_grad/MatMul_1"
      input: "^train/gradients/deepfm/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/mod"
      op: "FloorMod"
      input: "deepfm/concat/axis"
      input: "train/gradients/deepfm/concat_grad/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Shape"
      op: "Shape"
      input: "fm/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/ShapeN"
      op: "ShapeN"
      input: "fm/Sum"
      input: "fm/mul"
      input: "deep/Relu_1"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "train/gradients/deepfm/concat_grad/mod"
      input: "train/gradients/deepfm/concat_grad/ShapeN"
      input: "train/gradients/deepfm/concat_grad/ShapeN:1"
      input: "train/gradients/deepfm/concat_grad/ShapeN:2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Slice"
      op: "Slice"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deepfm/concat_grad/ConcatOffset"
      input: "train/gradients/deepfm/concat_grad/ShapeN"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Slice_1"
      op: "Slice"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deepfm/concat_grad/ConcatOffset:1"
      input: "train/gradients/deepfm/concat_grad/ShapeN:1"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Slice_2"
      op: "Slice"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deepfm/concat_grad/ConcatOffset:2"
      input: "train/gradients/deepfm/concat_grad/ShapeN:2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deepfm/concat_grad/Slice"
      input: "^train/gradients/deepfm/concat_grad/Slice_1"
      input: "^train/gradients/deepfm/concat_grad/Slice_2"
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deepfm/concat_grad/Slice"
      input: "^train/gradients/deepfm/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/concat_grad/Slice"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deepfm/concat_grad/Slice_1"
      input: "^train/gradients/deepfm/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/concat_grad/Slice_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "train/gradients/deepfm/concat_grad/Slice_2"
      input: "^train/gradients/deepfm/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/concat_grad/Slice_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Shape"
      op: "Shape"
      input: "fm/Mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/add"
      op: "Add"
      input: "fm/Sum/reduction_indices"
      input: "train/gradients/fm/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/mod"
      op: "FloorMod"
      input: "train/gradients/fm/Sum_grad/add"
      input: "train/gradients/fm/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/range"
      op: "Range"
      input: "train/gradients/fm/Sum_grad/range/start"
      input: "train/gradients/fm/Sum_grad/Size"
      input: "train/gradients/fm/Sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Fill"
      op: "Fill"
      input: "train/gradients/fm/Sum_grad/Shape_1"
      input: "train/gradients/fm/Sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/fm/Sum_grad/range"
      input: "train/gradients/fm/Sum_grad/mod"
      input: "train/gradients/fm/Sum_grad/Shape"
      input: "train/gradients/fm/Sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/fm/Sum_grad/DynamicStitch"
      input: "train/gradients/fm/Sum_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/fm/Sum_grad/Shape"
      input: "train/gradients/fm/Sum_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency"
      input: "train/gradients/fm/Sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Tile"
      op: "Tile"
      input: "train/gradients/fm/Sum_grad/Reshape"
      input: "train/gradients/fm/Sum_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Shape_1"
      op: "Shape"
      input: "fm/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/mul_grad/Shape"
      input: "train/gradients/fm/mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/mul"
      op: "Mul"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency_1"
      input: "fm/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/mul"
      input: "train/gradients/fm/mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/mul_grad/Sum"
      input: "train/gradients/fm/mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/mul_1"
      op: "Mul"
      input: "fm/mul/x"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/mul_1"
      input: "train/gradients/fm/mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/mul_grad/Sum_1"
      input: "train/gradients/fm/mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/mul_grad/Reshape"
      input: "^train/gradients/fm/mul_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/mul_grad/Reshape"
      input: "^train/gradients/fm/mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/mul_grad/Reshape_1"
      input: "^train/gradients/fm/mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency_2"
      input: "deep/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Shape_1"
      op: "Shape"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/Mul_1_grad/Shape"
      input: "train/gradients/fm/Mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/mul"
      op: "Mul"
      input: "train/gradients/fm/Sum_grad/Tile"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/Mul_1_grad/mul"
      input: "train/gradients/fm/Mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Mul_1_grad/Sum"
      input: "train/gradients/fm/Mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/mul_1"
      op: "Mul"
      input: "fm/feature_bias_0/read"
      input: "train/gradients/fm/Sum_grad/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/Mul_1_grad/mul_1"
      input: "train/gradients/fm/Mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/Mul_1_grad/Sum_1"
      input: "train/gradients/fm/Mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/Mul_1_grad/Reshape"
      input: "^train/gradients/fm/Mul_1_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/Mul_1_grad/Reshape"
      input: "^train/gradients/fm/Mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/Mul_1_grad/Reshape_1"
      input: "^train/gradients/fm/Mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Shape"
      op: "Shape"
      input: "fm/Square"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Shape_1"
      op: "Shape"
      input: "fm/Sum_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/Sub_grad/Shape"
      input: "train/gradients/fm/Sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/tuple/control_dependency_1"
      input: "train/gradients/fm/Sub_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Sub_grad/Sum"
      input: "train/gradients/fm/Sub_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/tuple/control_dependency_1"
      input: "train/gradients/fm/Sub_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Neg"
      op: "Neg"
      input: "train/gradients/fm/Sub_grad/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/Sub_grad/Neg"
      input: "train/gradients/fm/Sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/Sub_grad/Reshape"
      input: "^train/gradients/fm/Sub_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/Sub_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/Sub_grad/Reshape"
      input: "^train/gradients/fm/Sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Sub_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/Sub_grad/Reshape_1"
      input: "^train/gradients/fm/Sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Sub_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Shape"
      op: "Shape"
      input: "deep/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000@\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/deep/Add_1_grad/Shape"
      input: "train/gradients/deep/Add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Sum"
      op: "Sum"
      input: "train/gradients/deep/Relu_1_grad/ReluGrad"
      input: "train/gradients/deep/Add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deep/Add_1_grad/Sum"
      input: "train/gradients/deep/Add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/deep/Relu_1_grad/ReluGrad"
      input: "train/gradients/deep/Add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/deep/Add_1_grad/Sum_1"
      input: "train/gradients/deep/Add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/Add_1_grad/Reshape"
      input: "^train/gradients/deep/Add_1_grad/Reshape_1"
    }
    node {
      name: "train/gradients/deep/Add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/Add_1_grad/Reshape"
      input: "^train/gradients/deep/Add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/Add_1_grad/Reshape_1"
      input: "^train/gradients/deep/Add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_grad/mul/x"
      op: "Const"
      input: "^train/gradients/fm/Sub_grad/tuple/control_dependency"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_grad/mul"
      op: "Mul"
      input: "train/gradients/fm/Square_grad/mul/x"
      input: "fm/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_grad/mul_1"
      op: "Mul"
      input: "train/gradients/fm/Sub_grad/tuple/control_dependency"
      input: "train/gradients/fm/Square_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Shape"
      op: "Shape"
      input: "fm/Square_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/add"
      op: "Add"
      input: "fm/Sum_2/reduction_indices"
      input: "train/gradients/fm/Sum_2_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/mod"
      op: "FloorMod"
      input: "train/gradients/fm/Sum_2_grad/add"
      input: "train/gradients/fm/Sum_2_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/range"
      op: "Range"
      input: "train/gradients/fm/Sum_2_grad/range/start"
      input: "train/gradients/fm/Sum_2_grad/Size"
      input: "train/gradients/fm/Sum_2_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Fill"
      op: "Fill"
      input: "train/gradients/fm/Sum_2_grad/Shape_1"
      input: "train/gradients/fm/Sum_2_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/fm/Sum_2_grad/range"
      input: "train/gradients/fm/Sum_2_grad/mod"
      input: "train/gradients/fm/Sum_2_grad/Shape"
      input: "train/gradients/fm/Sum_2_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/fm/Sum_2_grad/DynamicStitch"
      input: "train/gradients/fm/Sum_2_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/fm/Sum_2_grad/Shape"
      input: "train/gradients/fm/Sum_2_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Sub_grad/tuple/control_dependency_1"
      input: "train/gradients/fm/Sum_2_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Tile"
      op: "Tile"
      input: "train/gradients/fm/Sum_2_grad/Reshape"
      input: "train/gradients/fm/Sum_2_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "train/gradients/deep/Add_1_grad/tuple/control_dependency"
      input: "deep/weights_layer1/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "deep/Relu"
      input: "train/gradients/deep/Add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/MatMul_1_grad/MatMul"
      input: "^train/gradients/deep/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/MatMul_1_grad/MatMul"
      input: "^train/gradients/deep/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/MatMul_1_grad/MatMul_1"
      input: "^train/gradients/deep/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Shape"
      op: "Shape"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/add"
      op: "Add"
      input: "fm/Sum_1/reduction_indices"
      input: "train/gradients/fm/Sum_1_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/mod"
      op: "FloorMod"
      input: "train/gradients/fm/Sum_1_grad/add"
      input: "train/gradients/fm/Sum_1_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/range"
      op: "Range"
      input: "train/gradients/fm/Sum_1_grad/range/start"
      input: "train/gradients/fm/Sum_1_grad/Size"
      input: "train/gradients/fm/Sum_1_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Fill"
      op: "Fill"
      input: "train/gradients/fm/Sum_1_grad/Shape_1"
      input: "train/gradients/fm/Sum_1_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/fm/Sum_1_grad/range"
      input: "train/gradients/fm/Sum_1_grad/mod"
      input: "train/gradients/fm/Sum_1_grad/Shape"
      input: "train/gradients/fm/Sum_1_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/fm/Sum_1_grad/DynamicStitch"
      input: "train/gradients/fm/Sum_1_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/fm/Sum_1_grad/Shape"
      input: "train/gradients/fm/Sum_1_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Square_grad/mul_1"
      input: "train/gradients/fm/Sum_1_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Tile"
      op: "Tile"
      input: "train/gradients/fm/Sum_1_grad/Reshape"
      input: "train/gradients/fm/Sum_1_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_1_grad/mul/x"
      op: "Const"
      input: "^train/gradients/fm/Sum_2_grad/Tile"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_1_grad/mul"
      op: "Mul"
      input: "train/gradients/fm/Square_1_grad/mul/x"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_1_grad/mul_1"
      op: "Mul"
      input: "train/gradients/fm/Sum_2_grad/Tile"
      input: "train/gradients/fm/Square_1_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency"
      input: "deep/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Shape"
      op: "Shape"
      input: "deep/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\200\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/deep/Add_grad/Shape"
      input: "train/gradients/deep/Add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Sum"
      op: "Sum"
      input: "train/gradients/deep/Relu_grad/ReluGrad"
      input: "train/gradients/deep/Add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deep/Add_grad/Sum"
      input: "train/gradients/deep/Add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/deep/Relu_grad/ReluGrad"
      input: "train/gradients/deep/Add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/deep/Add_grad/Sum_1"
      input: "train/gradients/deep/Add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/Add_grad/Reshape"
      input: "^train/gradients/deep/Add_grad/Reshape_1"
    }
    node {
      name: "train/gradients/deep/Add_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/Add_grad/Reshape"
      input: "^train/gradients/deep/Add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/Add_grad/Reshape_1"
      input: "^train/gradients/deep/Add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/MatMul"
      op: "MatMul"
      input: "train/gradients/deep/Add_grad/tuple/control_dependency"
      input: "deep/weights_layer0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "deep/Reshape"
      input: "train/gradients/deep/Add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/MatMul_grad/MatMul"
      input: "^train/gradients/deep/MatMul_grad/MatMul_1"
    }
    node {
      name: "train/gradients/deep/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/MatMul_grad/MatMul"
      input: "^train/gradients/deep/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/MatMul_grad/MatMul_1"
      input: "^train/gradients/deep/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Reshape_grad/Shape"
      op: "Shape"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deep/Reshape_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deep/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deep/Reshape_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/AddN"
      op: "AddN"
      input: "train/gradients/fm/Sum_1_grad/Tile"
      input: "train/gradients/fm/Square_1_grad/mul_1"
      input: "train/gradients/deep/Reshape_grad/Reshape"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Sum_1_grad/Tile"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Shape_1"
      op: "Shape"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/Mul_grad/Shape"
      input: "train/gradients/fm/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/mul"
      op: "Mul"
      input: "train/gradients/AddN"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/Mul_grad/mul"
      input: "train/gradients/fm/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Mul_grad/Sum"
      input: "train/gradients/fm/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/mul_1"
      op: "Mul"
      input: "fm/feature_embeddings/read"
      input: "train/gradients/AddN"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/Mul_grad/mul_1"
      input: "train/gradients/fm/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/Mul_grad/Sum_1"
      input: "train/gradients/fm/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/Mul_grad/Reshape"
      input: "^train/gradients/fm/Mul_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/Mul_grad/Reshape"
      input: "^train/gradients/fm/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/Mul_grad/Reshape_1"
      input: "^train/gradients/fm/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/beta1_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "train/beta1_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "train/beta1_power/Assign"
      op: "Assign"
      input: "train/beta1_power"
      input: "train/beta1_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/beta1_power/read"
      op: "Identity"
      input: "train/beta1_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/beta2_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "train/beta2_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "train/beta2_power/Assign"
      op: "Assign"
      input: "train/beta2_power"
      input: "train/beta2_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/beta2_power/read"
      op: "Identity"
      input: "train/beta2_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam/Assign"
      op: "Assign"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam/read"
      op: "Identity"
      input: "fm/feature_embeddings/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1/Assign"
      op: "Assign"
      input: "fm/feature_embeddings/Adam_1"
      input: "fm/feature_embeddings/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1/read"
      op: "Identity"
      input: "fm/feature_embeddings/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam/Assign"
      op: "Assign"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam/read"
      op: "Identity"
      input: "fm/feature_bias_0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1/Assign"
      op: "Assign"
      input: "fm/feature_bias_0/Adam_1"
      input: "fm/feature_bias_0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1/read"
      op: "Identity"
      input: "fm/feature_bias_0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 90
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam/Assign"
      op: "Assign"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam/read"
      op: "Identity"
      input: "deep/weights_layer0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 90
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_layer0/Adam_1"
      input: "deep/weights_layer0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1/read"
      op: "Identity"
      input: "deep/weights_layer0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam/Assign"
      op: "Assign"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam/read"
      op: "Identity"
      input: "deep/weights_bias0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_bias0/Adam_1"
      input: "deep/weights_bias0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1/read"
      op: "Identity"
      input: "deep/weights_bias0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 128
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam/Assign"
      op: "Assign"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam/read"
      op: "Identity"
      input: "deep/weights_layer1/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 128
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_layer1/Adam_1"
      input: "deep/weights_layer1/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1/read"
      op: "Identity"
      input: "deep/weights_layer1/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam/Assign"
      op: "Assign"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam/read"
      op: "Identity"
      input: "deep/weights_bias1/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_bias1/Adam_1"
      input: "deep/weights_bias1/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1/read"
      op: "Identity"
      input: "deep/weights_bias1/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 83
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam/Assign"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam/read"
      op: "Identity"
      input: "deepfm/concat_projection0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 83
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1/Assign"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam_1"
      input: "deepfm/concat_projection0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1/read"
      op: "Identity"
      input: "deepfm/concat_projection0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam/Assign"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam/read"
      op: "Identity"
      input: "deepfm/concat_bias0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1/Assign"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam_1"
      input: "deepfm/concat_bias0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1/read"
      op: "Identity"
      input: "deepfm/concat_bias0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/Adam/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "train/Adam/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "train/Adam/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "train/Adam/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "train/Adam/update_fm/feature_embeddings/ApplyAdam"
      op: "ApplyAdam"
      input: "fm/feature_embeddings"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/fm/Mul_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_fm/feature_bias_0/ApplyAdam"
      op: "ApplyAdam"
      input: "fm/feature_bias_0"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/fm/Mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_layer0/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_bias0/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/Add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_layer1/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_bias1/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/Add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      op: "ApplyAdam"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      op: "ApplyAdam"
      input: "deepfm/concat_bias0"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deepfm/out_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/mul"
      op: "Mul"
      input: "train/beta1_power/read"
      input: "train/Adam/beta1"
      input: "^train/Adam/update_fm/feature_embeddings/ApplyAdam"
      input: "^train/Adam/update_fm/feature_bias_0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer1/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias1/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/Adam/Assign"
      op: "Assign"
      input: "train/beta1_power"
      input: "train/Adam/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/Adam/mul_1"
      op: "Mul"
      input: "train/beta2_power/read"
      input: "train/Adam/beta2"
      input: "^train/Adam/update_fm/feature_embeddings/ApplyAdam"
      input: "^train/Adam/update_fm/feature_bias_0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer1/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias1/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/Adam/Assign_1"
      op: "Assign"
      input: "train/beta2_power"
      input: "train/Adam/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/Adam"
      op: "NoOp"
      input: "^train/Adam/update_fm/feature_embeddings/ApplyAdam"
      input: "^train/Adam/update_fm/feature_bias_0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer1/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias1/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      input: "^train/Adam/Assign"
      input: "^train/Adam/Assign_1"
    }
    node {
      name: "train/init"
      op: "NoOp"
      input: "^fm/feature_embeddings/Assign"
      input: "^fm/feature_bias_0/Assign"
      input: "^deep/weights_layer0/Assign"
      input: "^deep/weights_bias0/Assign"
      input: "^deep/weights_layer1/Assign"
      input: "^deep/weights_bias1/Assign"
      input: "^deepfm/concat_projection0/Assign"
      input: "^deepfm/concat_bias0/Assign"
      input: "^train/beta1_power/Assign"
      input: "^train/beta2_power/Assign"
      input: "^fm/feature_embeddings/Adam/Assign"
      input: "^fm/feature_embeddings/Adam_1/Assign"
      input: "^fm/feature_bias_0/Adam/Assign"
      input: "^fm/feature_bias_0/Adam_1/Assign"
      input: "^deep/weights_layer0/Adam/Assign"
      input: "^deep/weights_layer0/Adam_1/Assign"
      input: "^deep/weights_bias0/Adam/Assign"
      input: "^deep/weights_bias0/Adam_1/Assign"
      input: "^deep/weights_layer1/Adam/Assign"
      input: "^deep/weights_layer1/Adam_1/Assign"
      input: "^deep/weights_bias1/Adam/Assign"
      input: "^deep/weights_bias1/Adam_1/Assign"
      input: "^deepfm/concat_projection0/Adam/Assign"
      input: "^deepfm/concat_projection0/Adam_1/Assign"
      input: "^deepfm/concat_bias0/Adam/Assign"
      input: "^deepfm/concat_bias0/Adam_1/Assign"
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "deep/weights_bias0"
            string_val: "deep/weights_bias0/Adam"
            string_val: "deep/weights_bias0/Adam_1"
            string_val: "deep/weights_bias1"
            string_val: "deep/weights_bias1/Adam"
            string_val: "deep/weights_bias1/Adam_1"
            string_val: "deep/weights_layer0"
            string_val: "deep/weights_layer0/Adam"
            string_val: "deep/weights_layer0/Adam_1"
            string_val: "deep/weights_layer1"
            string_val: "deep/weights_layer1/Adam"
            string_val: "deep/weights_layer1/Adam_1"
            string_val: "deepfm/concat_bias0"
            string_val: "deepfm/concat_bias0/Adam"
            string_val: "deepfm/concat_bias0/Adam_1"
            string_val: "deepfm/concat_projection0"
            string_val: "deepfm/concat_projection0/Adam"
            string_val: "deepfm/concat_projection0/Adam_1"
            string_val: "fm/feature_bias_0"
            string_val: "fm/feature_bias_0/Adam"
            string_val: "fm/feature_bias_0/Adam_1"
            string_val: "fm/feature_embeddings"
            string_val: "fm/feature_embeddings/Adam"
            string_val: "fm/feature_embeddings/Adam_1"
            string_val: "train/beta1_power"
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/Const"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam_1"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam_1"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam_1"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam_1"
      input: "deepfm/concat_bias0"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam_1"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam_1"
      input: "fm/feature_bias_0"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam_1"
      input: "fm/feature_embeddings"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam_1"
      input: "train/beta1_power"
      input: "train/beta2_power"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/Const"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/Const"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "deep/weights_bias0"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_1/tensor_names"
      input: "save/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "deep/weights_bias0/Adam"
      input: "save/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_2/tensor_names"
      input: "save/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "deep/weights_bias0/Adam_1"
      input: "save/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_3/tensor_names"
      input: "save/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "deep/weights_bias1"
      input: "save/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_4/tensor_names"
      input: "save/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "deep/weights_bias1/Adam"
      input: "save/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_5/tensor_names"
      input: "save/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "deep/weights_bias1/Adam_1"
      input: "save/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_6/tensor_names"
      input: "save/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "deep/weights_layer0"
      input: "save/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_7/tensor_names"
      input: "save/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "deep/weights_layer0/Adam"
      input: "save/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_8/tensor_names"
      input: "save/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "deep/weights_layer0/Adam_1"
      input: "save/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_9/tensor_names"
      input: "save/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "deep/weights_layer1"
      input: "save/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_10/tensor_names"
      input: "save/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "deep/weights_layer1/Adam"
      input: "save/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_11/tensor_names"
      input: "save/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "deep/weights_layer1/Adam_1"
      input: "save/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_12/tensor_names"
      input: "save/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "deepfm/concat_bias0"
      input: "save/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_13/tensor_names"
      input: "save/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam"
      input: "save/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_14/tensor_names"
      input: "save/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam_1"
      input: "save/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_15/tensor_names"
      input: "save/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_15"
      op: "Assign"
      input: "deepfm/concat_projection0"
      input: "save/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_16/tensor_names"
      input: "save/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_16"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam"
      input: "save/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_17/tensor_names"
      input: "save/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_17"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam_1"
      input: "save/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_18/tensor_names"
      input: "save/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_18"
      op: "Assign"
      input: "fm/feature_bias_0"
      input: "save/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_19/tensor_names"
      input: "save/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_19"
      op: "Assign"
      input: "fm/feature_bias_0/Adam"
      input: "save/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_20/tensor_names"
      input: "save/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_20"
      op: "Assign"
      input: "fm/feature_bias_0/Adam_1"
      input: "save/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_21/tensor_names"
      input: "save/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_21"
      op: "Assign"
      input: "fm/feature_embeddings"
      input: "save/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_22/tensor_names"
      input: "save/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_22"
      op: "Assign"
      input: "fm/feature_embeddings/Adam"
      input: "save/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_23/tensor_names"
      input: "save/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_23"
      op: "Assign"
      input: "fm/feature_embeddings/Adam_1"
      input: "save/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta1_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_24/tensor_names"
      input: "save/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_24"
      op: "Assign"
      input: "train/beta1_power"
      input: "save/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_25/tensor_names"
      input: "save/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_25"
      op: "Assign"
      input: "train/beta2_power"
      input: "save/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
      input: "^save/Assign_7"
      input: "^save/Assign_8"
      input: "^save/Assign_9"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_15"
      input: "^save/Assign_16"
      input: "^save/Assign_17"
      input: "^save/Assign_18"
      input: "^save/Assign_19"
      input: "^save/Assign_20"
      input: "^save/Assign_21"
      input: "^save/Assign_22"
      input: "^save/Assign_23"
      input: "^save/Assign_24"
      input: "^save/Assign_25"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^loss/auc/true_positives/Assign"
      input: "^loss/auc/false_negatives/Assign"
      input: "^loss/auc/true_negatives/Assign"
      input: "^loss/auc/false_positives/Assign"
    }
    node {
      name: "Merge/MergeSummary"
      op: "MergeSummary"
      input: "deepfm/score"
      input: "loss/loss"
      input: "loss/auc_1"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_e7d987529d9b49088425c0f45a3b33d8/part"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin"
      op: "StringJoin"
      input: "save_1/Const"
      input: "save_1/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save_1/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename/shard"
      input: "save_1/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "deep/weights_bias0"
            string_val: "deep/weights_bias0/Adam"
            string_val: "deep/weights_bias0/Adam_1"
            string_val: "deep/weights_bias1"
            string_val: "deep/weights_bias1/Adam"
            string_val: "deep/weights_bias1/Adam_1"
            string_val: "deep/weights_layer0"
            string_val: "deep/weights_layer0/Adam"
            string_val: "deep/weights_layer0/Adam_1"
            string_val: "deep/weights_layer1"
            string_val: "deep/weights_layer1/Adam"
            string_val: "deep/weights_layer1/Adam_1"
            string_val: "deepfm/concat_bias0"
            string_val: "deepfm/concat_bias0/Adam"
            string_val: "deepfm/concat_bias0/Adam_1"
            string_val: "deepfm/concat_projection0"
            string_val: "deepfm/concat_projection0/Adam"
            string_val: "deepfm/concat_projection0/Adam_1"
            string_val: "fm/feature_bias_0"
            string_val: "fm/feature_bias_0/Adam"
            string_val: "fm/feature_bias_0/Adam_1"
            string_val: "fm/feature_embeddings"
            string_val: "fm/feature_embeddings/Adam"
            string_val: "fm/feature_embeddings/Adam_1"
            string_val: "train/beta1_power"
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2"
      op: "SaveV2"
      input: "save_1/ShardedFilename"
      input: "save_1/SaveV2/tensor_names"
      input: "save_1/SaveV2/shape_and_slices"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam_1"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam_1"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam_1"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam_1"
      input: "deepfm/concat_bias0"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam_1"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam_1"
      input: "fm/feature_bias_0"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam_1"
      input: "fm/feature_embeddings"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam_1"
      input: "train/beta1_power"
      input: "train/beta2_power"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency"
      op: "Identity"
      input: "save_1/ShardedFilename"
      input: "^save_1/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save_1/ShardedFilename"
      input: "^save_1/control_dependency"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save_1/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Identity"
      op: "Identity"
      input: "save_1/Const"
      input: "^save_1/control_dependency"
      input: "^save_1/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2/tensor_names"
      input: "save_1/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign"
      op: "Assign"
      input: "deep/weights_bias0"
      input: "save_1/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_1/tensor_names"
      input: "save_1/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_1"
      op: "Assign"
      input: "deep/weights_bias0/Adam"
      input: "save_1/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_2/tensor_names"
      input: "save_1/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_2"
      op: "Assign"
      input: "deep/weights_bias0/Adam_1"
      input: "save_1/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_3/tensor_names"
      input: "save_1/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_3"
      op: "Assign"
      input: "deep/weights_bias1"
      input: "save_1/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_4/tensor_names"
      input: "save_1/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_4"
      op: "Assign"
      input: "deep/weights_bias1/Adam"
      input: "save_1/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_5/tensor_names"
      input: "save_1/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_5"
      op: "Assign"
      input: "deep/weights_bias1/Adam_1"
      input: "save_1/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_6/tensor_names"
      input: "save_1/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_6"
      op: "Assign"
      input: "deep/weights_layer0"
      input: "save_1/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_7/tensor_names"
      input: "save_1/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_7"
      op: "Assign"
      input: "deep/weights_layer0/Adam"
      input: "save_1/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_8/tensor_names"
      input: "save_1/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_8"
      op: "Assign"
      input: "deep/weights_layer0/Adam_1"
      input: "save_1/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_9/tensor_names"
      input: "save_1/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_9"
      op: "Assign"
      input: "deep/weights_layer1"
      input: "save_1/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_10/tensor_names"
      input: "save_1/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_10"
      op: "Assign"
      input: "deep/weights_layer1/Adam"
      input: "save_1/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_11/tensor_names"
      input: "save_1/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_11"
      op: "Assign"
      input: "deep/weights_layer1/Adam_1"
      input: "save_1/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_12/tensor_names"
      input: "save_1/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_12"
      op: "Assign"
      input: "deepfm/concat_bias0"
      input: "save_1/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_13/tensor_names"
      input: "save_1/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_13"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam"
      input: "save_1/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_14/tensor_names"
      input: "save_1/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_14"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam_1"
      input: "save_1/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_15/tensor_names"
      input: "save_1/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_15"
      op: "Assign"
      input: "deepfm/concat_projection0"
      input: "save_1/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_16/tensor_names"
      input: "save_1/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_16"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam"
      input: "save_1/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_17/tensor_names"
      input: "save_1/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_17"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam_1"
      input: "save_1/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_18/tensor_names"
      input: "save_1/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_18"
      op: "Assign"
      input: "fm/feature_bias_0"
      input: "save_1/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_19/tensor_names"
      input: "save_1/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_19"
      op: "Assign"
      input: "fm/feature_bias_0/Adam"
      input: "save_1/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_20/tensor_names"
      input: "save_1/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_20"
      op: "Assign"
      input: "fm/feature_bias_0/Adam_1"
      input: "save_1/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_21/tensor_names"
      input: "save_1/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_21"
      op: "Assign"
      input: "fm/feature_embeddings"
      input: "save_1/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_22/tensor_names"
      input: "save_1/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_22"
      op: "Assign"
      input: "fm/feature_embeddings/Adam"
      input: "save_1/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_23/tensor_names"
      input: "save_1/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_23"
      op: "Assign"
      input: "fm/feature_embeddings/Adam_1"
      input: "save_1/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta1_power"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_24/tensor_names"
      input: "save_1/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_24"
      op: "Assign"
      input: "train/beta1_power"
      input: "save_1/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_25/tensor_names"
      input: "save_1/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_25"
      op: "Assign"
      input: "train/beta2_power"
      input: "save_1/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard"
      op: "NoOp"
      input: "^save_1/Assign"
      input: "^save_1/Assign_1"
      input: "^save_1/Assign_2"
      input: "^save_1/Assign_3"
      input: "^save_1/Assign_4"
      input: "^save_1/Assign_5"
      input: "^save_1/Assign_6"
      input: "^save_1/Assign_7"
      input: "^save_1/Assign_8"
      input: "^save_1/Assign_9"
      input: "^save_1/Assign_10"
      input: "^save_1/Assign_11"
      input: "^save_1/Assign_12"
      input: "^save_1/Assign_13"
      input: "^save_1/Assign_14"
      input: "^save_1/Assign_15"
      input: "^save_1/Assign_16"
      input: "^save_1/Assign_17"
      input: "^save_1/Assign_18"
      input: "^save_1/Assign_19"
      input: "^save_1/Assign_20"
      input: "^save_1/Assign_21"
      input: "^save_1/Assign_22"
      input: "^save_1/Assign_23"
      input: "^save_1/Assign_24"
      input: "^save_1/Assign_25"
    }
    node {
      name: "save_1/restore_all"
      op: "NoOp"
      input: "^save_1/restore_shard"
    }
    versions {
      producer: 22
    }
  }
  saver_def {
    filename_tensor_name: "save_1/Const:0"
    save_tensor_name: "save_1/Identity:0"
    restore_op_name: "save_1/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "local_variables"
    value {
      node_list {
        value: "loss/auc/true_positives:0"
        value: "loss/auc/false_negatives:0"
        value: "loss/auc/true_negatives:0"
        value: "loss/auc/false_positives:0"
      }
    }
  }
  collection_def {
    key: "summaries"
    value {
      node_list {
        value: "deepfm/score:0"
        value: "loss/loss:0"
        value: "loss/auc_1:0"
      }
    }
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "train/Adam"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\027fm/feature_embeddings:0\022\034fm/feature_embeddings/Assign\032\034fm/feature_embeddings/read:0"
        value: "\n\023fm/feature_bias_0:0\022\030fm/feature_bias_0/Assign\032\030fm/feature_bias_0/read:0"
        value: "\n\025deep/weights_layer0:0\022\032deep/weights_layer0/Assign\032\032deep/weights_layer0/read:0"
        value: "\n\024deep/weights_bias0:0\022\031deep/weights_bias0/Assign\032\031deep/weights_bias0/read:0"
        value: "\n\025deep/weights_layer1:0\022\032deep/weights_layer1/Assign\032\032deep/weights_layer1/read:0"
        value: "\n\024deep/weights_bias1:0\022\031deep/weights_bias1/Assign\032\031deep/weights_bias1/read:0"
        value: "\n\033deepfm/concat_projection0:0\022 deepfm/concat_projection0/Assign\032 deepfm/concat_projection0/read:0"
        value: "\n\025deepfm/concat_bias0:0\022\032deepfm/concat_bias0/Assign\032\032deepfm/concat_bias0/read:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\027fm/feature_embeddings:0\022\034fm/feature_embeddings/Assign\032\034fm/feature_embeddings/read:0"
        value: "\n\023fm/feature_bias_0:0\022\030fm/feature_bias_0/Assign\032\030fm/feature_bias_0/read:0"
        value: "\n\025deep/weights_layer0:0\022\032deep/weights_layer0/Assign\032\032deep/weights_layer0/read:0"
        value: "\n\024deep/weights_bias0:0\022\031deep/weights_bias0/Assign\032\031deep/weights_bias0/read:0"
        value: "\n\025deep/weights_layer1:0\022\032deep/weights_layer1/Assign\032\032deep/weights_layer1/read:0"
        value: "\n\024deep/weights_bias1:0\022\031deep/weights_bias1/Assign\032\031deep/weights_bias1/read:0"
        value: "\n\033deepfm/concat_projection0:0\022 deepfm/concat_projection0/Assign\032 deepfm/concat_projection0/read:0"
        value: "\n\025deepfm/concat_bias0:0\022\032deepfm/concat_bias0/Assign\032\032deepfm/concat_bias0/read:0"
        value: "\n\023train/beta1_power:0\022\030train/beta1_power/Assign\032\030train/beta1_power/read:0"
        value: "\n\023train/beta2_power:0\022\030train/beta2_power/Assign\032\030train/beta2_power/read:0"
        value: "\n\034fm/feature_embeddings/Adam:0\022!fm/feature_embeddings/Adam/Assign\032!fm/feature_embeddings/Adam/read:0"
        value: "\n\036fm/feature_embeddings/Adam_1:0\022#fm/feature_embeddings/Adam_1/Assign\032#fm/feature_embeddings/Adam_1/read:0"
        value: "\n\030fm/feature_bias_0/Adam:0\022\035fm/feature_bias_0/Adam/Assign\032\035fm/feature_bias_0/Adam/read:0"
        value: "\n\032fm/feature_bias_0/Adam_1:0\022\037fm/feature_bias_0/Adam_1/Assign\032\037fm/feature_bias_0/Adam_1/read:0"
        value: "\n\032deep/weights_layer0/Adam:0\022\037deep/weights_layer0/Adam/Assign\032\037deep/weights_layer0/Adam/read:0"
        value: "\n\034deep/weights_layer0/Adam_1:0\022!deep/weights_layer0/Adam_1/Assign\032!deep/weights_layer0/Adam_1/read:0"
        value: "\n\031deep/weights_bias0/Adam:0\022\036deep/weights_bias0/Adam/Assign\032\036deep/weights_bias0/Adam/read:0"
        value: "\n\033deep/weights_bias0/Adam_1:0\022 deep/weights_bias0/Adam_1/Assign\032 deep/weights_bias0/Adam_1/read:0"
        value: "\n\032deep/weights_layer1/Adam:0\022\037deep/weights_layer1/Adam/Assign\032\037deep/weights_layer1/Adam/read:0"
        value: "\n\034deep/weights_layer1/Adam_1:0\022!deep/weights_layer1/Adam_1/Assign\032!deep/weights_layer1/Adam_1/read:0"
        value: "\n\031deep/weights_bias1/Adam:0\022\036deep/weights_bias1/Adam/Assign\032\036deep/weights_bias1/Adam/read:0"
        value: "\n\033deep/weights_bias1/Adam_1:0\022 deep/weights_bias1/Adam_1/Assign\032 deep/weights_bias1/Adam_1/read:0"
        value: "\n deepfm/concat_projection0/Adam:0\022%deepfm/concat_projection0/Adam/Assign\032%deepfm/concat_projection0/Adam/read:0"
        value: "\n\"deepfm/concat_projection0/Adam_1:0\022\'deepfm/concat_projection0/Adam_1/Assign\032\'deepfm/concat_projection0/Adam_1/read:0"
        value: "\n\032deepfm/concat_bias0/Adam:0\022\037deepfm/concat_bias0/Adam/Assign\032\037deepfm/concat_bias0/Adam/read:0"
        value: "\n\034deepfm/concat_bias0/Adam_1:0\022!deepfm/concat_bias0/Adam_1/Assign\032!deepfm/concat_bias0/Adam_1/read:0"
      }
    }
  }
  signature_def {
    key: "serving_default"
    value {
      inputs {
        key: "inputs"
        value {
          name: "input:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
      outputs {
        key: "results"
        value {
          name: "score:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}
