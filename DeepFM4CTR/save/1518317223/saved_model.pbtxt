saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddN"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "sum"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "ApplyAdam"
        input_arg {
          name: "var"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "m"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "v"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        output_arg {
          name: "out"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "AssignAdd"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatOffset"
        input_arg {
          name: "concat_dim"
          type: DT_INT32
        }
        input_arg {
          name: "shape"
          type: DT_INT32
          number_attr: "N"
        }
        output_arg {
          name: "offset"
          type: DT_INT32
          number_attr: "N"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "FloorDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Greater"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "HistogramSummary"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_FLOAT
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "LogicalAnd"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        input_arg {
          name: "y"
          type: DT_BOOL
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        is_commutative: true
      }
      op {
        name: "LogicalNot"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "MergeSummary"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomStandardNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Rank"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "ScalarSummary"
        input_arg {
          name: "tags"
          type: DT_STRING
        }
        input_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShapeN"
        input_arg {
          name: "input"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
          number_attr: "N"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Sigmoid"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "SigmoidGrad"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Slice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "size"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Square"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Transpose"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "perm"
          type_attr: "Tperm"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tperm"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "1.2.1"
    tensorflow_git_version: "b\'unknown\'"
  }
  graph_def {
    node {
      name: "input"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "Placeholder"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "fm/random_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "fm/random_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/random_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "fm/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "fm/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1518317237
        }
      }
      attr {
        key: "seed2"
        value {
          i: 5
        }
      }
    }
    node {
      name: "fm/random_normal/mul"
      op: "Mul"
      input: "fm/random_normal/RandomStandardNormal"
      input: "fm/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/random_normal"
      op: "Add"
      input: "fm/random_normal/mul"
      input: "fm/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Assign"
      op: "Assign"
      input: "fm/feature_embeddings"
      input: "fm/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_embeddings/read"
      op: "Identity"
      input: "fm/feature_embeddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\377\377\377\377\t\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "fm/Reshape"
      op: "Reshape"
      input: "input"
      input: "fm/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Mul"
      op: "Mul"
      input: "fm/feature_embeddings/read"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/max"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "fm/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1518317237
        }
      }
      attr {
        key: "seed2"
        value {
          i: 17
        }
      }
    }
    node {
      name: "fm/random_uniform/sub"
      op: "Sub"
      input: "fm/random_uniform/max"
      input: "fm/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fm/random_uniform/mul"
      op: "Mul"
      input: "fm/random_uniform/RandomUniform"
      input: "fm/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/random_uniform"
      op: "Add"
      input: "fm/random_uniform/mul"
      input: "fm/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Assign"
      op: "Assign"
      input: "fm/feature_bias_0"
      input: "fm/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_bias_0/read"
      op: "Identity"
      input: "fm/feature_bias_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Mul_1"
      op: "Mul"
      input: "fm/feature_bias_0/read"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "fm/Sum"
      op: "Sum"
      input: "fm/Mul_1"
      input: "fm/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "fm/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "fm/Sum_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "fm/Sum_1"
      op: "Sum"
      input: "fm/Mul"
      input: "fm/Sum_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "fm/Square"
      op: "Square"
      input: "fm/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Square_1"
      op: "Square"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/Sum_2/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "fm/Sum_2"
      op: "Sum"
      input: "fm/Square_1"
      input: "fm/Sum_2/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "fm/Sub"
      op: "Sub"
      input: "fm/Square"
      input: "fm/Sum_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/mul/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node {
      name: "fm/mul"
      op: "Mul"
      input: "fm/mul/x"
      input: "fm/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/dropout_1/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deep/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377Z\000\000\000"
          }
        }
      }
    }
    node {
      name: "deep/Reshape"
      op: "Reshape"
      input: "fm/Mul"
      input: "deep/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
            tensor_content: "\235\271\250<\312@\270\275\304y\337=\332I\313=\224\362L\2767\325\000<\322\261\276=\231r\253\273\203\225%\276\221\241\022\276\202>S>1\366L<\200g\257=\301<\000\273\326N\362\273\220\347;\275s\016\241=31\362<\212$\251<Q\346M>\213f$=\206\233|\275c\252\323:\253\356|=)\204\310=\365\201Q\274\332\300\243=JG\367<\r\344\300<\336\205M\275\261\323\354\274pFB=\214\213\224\275P\214%\276\341J\203\275\021?\"\276\232\3415\275i\266\335=Iv!\276q\366\020\276\240\261H\276H,\000\275\226\205\206\274\234\242R\275YV\364\273\016.\342<6\373\276=i\237/=\213\025O>p\006\256\275\254v\307\275.\231\234=\200\317\222=7#\362\275E,\270\274r\nH>\301r<>u6\206;\362\303\013>\331g\343<\t\234W=(w9\275\251A\257\275\273\246\314=\345,i:Xl\230\275\355Rt=\245_\n\276U\223\022\276\262>\000=\377\243\006\274\245Q\031\274\254\0308>\316\310\366=\344\'\320=\204\342\005:\203\214\376=\275|\244=\247\307\321\273\n\010\353=\236\217\301\274\2155\330\274\314}\275\273\006+\235=\334/g\275\030\340\010\276\205\321\303\274l\031%\275G\037\271\275\0244E=\3473\302<\177\353V\276\"\352\025;\337W\240=\017\312t\275U\331\350\275\3669\331=\240\267\021\275\317l\265\275\257\322\030\276k\242`\2736^+=<\230\255=\343\243\034\276J9\022\275\014\022O>BE\246=E\375\n\275\2773\272\274\236k\323\275\022\25709\314\373\007\275\252{\034>\235\021\303\275XH\263=\277\257\271= \341\264\2758\314)\274\226\212\025\275\032\276\313<;OM=yI\266\275\300\327,\275\250\246\021\276\345\273n=\260h4>Z\375\220<\257\262\202=k\264W=% z\275\037z\302\274\362\276V\275\234^l\275\2717\2769\217G\201\275[\215\332=\270\312\225\2752\332u\275\245\003\'<\036\025\232=\264\370\010\275v\323\003=\277\212\310<\222\242)\275\246W\273\275\032\034\251\275\211U1>Y\037,>\321\335\034\276\210.\\=\036\204\277\275O\250\017=\364\272\334\274\225\\g=.\246\356\274x5\014\275\357\035(\276\016\313\214=\033\354\210;\3552l=~\242\221\275\260f\016<s\275%\276\204YV;\366\237=\275\343\"\024\276\377vp=\317*\007=\275#R\275o\'\300<\233~\333=\235|\002\275\002\2326\275\334\t\336\275qF4<<\030\213=\321b.\276@\025a\275\2263\264<Hl\264\275:\303\030>\344p5\275\300\245\322\274\300W2>\222\213L\275 \034\200<b\032\002>\006Vc\276\217\022$\276wC\235\274J\030\252<\0014\241\275\376\377\244=\215\254\356\274\230\307->\316\377&>iIz\275ULU\276y\261\017\276@\370\202\275.y\001\275\347Tc\275\322v\346<)\014\345<\037\364\211=sN\320\275>\204\226=eO\217\275\216^3\276\030E\306\271{\215\272=)\255\223\273\2501\022\274\354\342\236<\277\307h\274\237V \275\241j\321<\352G\006\276\232G\244<\266\026\244\274@G\372=z\354\260<\273v\362=S\030\266=E\3164\275\346\345\001\276\202\305\025\2753\203\352\274\230.\017>\334*\241:F<\224\275m\225\r\276W\236\232\274\274\212\005\276\340\003\301=ur!=\333<\342\275\233v_\276\255U\036\275\200\2377>\315\246\006=\264\361h\275OV\002>\027L\265>\031\217\364\275\271\'?\2735m\001\276\212\2078\276\373Q#>\226\212Q\275$U\021\275;\267\353\275`\215\002\276\321\223T\273\226\204\232=\2159k\275\314\346\3549 G\t\274\313\356\236\275\322\244\034\275\215\225\306\274\204\031\001\276%\341\241=J\215\264\275\215\237\374\2730\315\022\276A\226\002>\301\363q\275\255\024\223<\260\250\016\275\252>\271\275\226c\205\275\033\361)=\034\242\227\275V,\237<\263\310o=\013\217\n>\302:\273\275F\217q>6\251\365\275r\303\345\274\371\233\t\275\234gs\275\210\217\357\274\367\363\332\274\262\227v\275_\304\257\275\245M\256\274\336\004\">2]\206\275sE\240=\326\357\367\274X\311\216=\244\"\t=}\316\007>S\213\263\275$\256\260=\342\3330\2759?\303<\256>\376=\022\007U\275?^\026<\264\227`<X\257}=\326\216~<\341;f\275/x4\276\024\2177\272rM\341\275\331XB=\225j\017\276\204G\366\275\256\347\276;6\200K\273hz\313\275K)\303=?\206{=\3122\203=\317j\236\275\330\360\204\2735f\271=8\027\032=\367|\003\276\250\006\255\274%z@>\247\217\266=\247uo=\333\010\217\275\256k\223\273Z\246\266\275\363\224\r\274}\017\275\275\204\200^\275\221\312\354\274\327\365\325\274\214\321\260\275\204#J\276p\270D>\377\276\225<\354\362F=\274\n(\275EU\314=\361\222\027\276\310\313\020\276?\355\224\275k\356\211;\334\023w=\035z\033=\021\212\340\274 Kx<\224\\\217=t\277\305\274\'\337\255=\277X\232\275Hc<\274{}\202\275\247*\'\275\212U\353\274\316P\002\274HmD\275Pd#>\372I{>\236\202\225\275\355\325+\275GNG=\243P\374<\262\027\201=ZR\001\275\242Wq<\266\201\030>/\347\037>uf\206=Rs\317\275\304\203H\275\007m\375=\215\210\223\275\236&<\275\310\345\216=\'\\\243\274\302\035\237=:<\370=\033\232\303\274\343\n>=n!@\275\202R\016\276\313o\255\275\304*\301\275\317\255(\276\345h\333<\352\242\250=}\316[\274+\037\202\275\027t\251=3X\010\275\261~\251\273\250b0>\004)\322=\322\0141>\341\0229>\223\354\202=9\236\214=\004\377\215=\251\273\216=\322#\267\275\266\027e\275;WM>\212\335G=\270\226y<>XX\275\272\363\013\276\356l\344\275\246\257\002\274\360\221n=\031*\313=\007 \321\275\277\371\307<\001\220i\276\364MY\275\303\324\323=\376\031\302\275\353\322\005\276y\300F\276\306\305\374\2749\305\335<\313\230\375=\026\036\356<[:\027>\216[\035>\211\274\027=z*\312=\016\365\351\275\337C\242;\235\253\207=\016)\230\275\0331\241>\341\276\335\275?0X\275CD\005\275\221a\243=\360\002\010=\2533=>`\"\020\276M\314\247=N^\212=\264`t\2752\255&\276y,.=<)\010\276!\031\255:\302\333,<\264\214$\274\300W\350\272S\232\t\276\240\242\340\275\037IA=\213$\331=7fK\275\375Q%<\347Y\013\276\372` >rz\037=\200b\313\275Yz\033\275\233\363\200\275x\254\253\274\177g\210\275^\343\t\275\270L\215=\250\220\030>+\265\377\275V\306\346=\2551[\275\001\256\027>hO\307=$\\\276:\326\371X=A\000\255=-\324\234\276\r\336\002\271\327cL>\315\031\026\275\257\336\027\274\241\306W=\212\311\356=\250c\345<\226U\324\275\277\357\262<C\344\002\274X\017\014>\005?\031>\230\032\274<\314\256\321\274\276Y\034\276w4\210\275\302?i<\004,;<A\360\236\275\035/\260=\003b\310\272\2450*\275X!\242\275\r\362V=1?Q\274\300\312\243=\311\351\330=\360X\030=L8\357\275U\201\317<@__>`\213\371=\"\036\000>+g7> `\361\275,d\334=\265{K>\342b\014\276BY3<\315X\322=\303\206#\273\250\362*\274T\322\360=+\265\354\275S\367:\274\364\346\351\275\221\007\324\274\211\336@>\025\271\266\274\021\233?\275G\237\236=\342\257h\274\202d\003>\252\2508\275\363\243 >-\020\264\275{\240\205\274\220\326\231=\035\375\366=cf\013<\226\220n=3\204\004>\034W\004>\275{\214=\222e\323=\036\033\211>J\377\225\275\242\305\203=\331q~=\246\370\205\275\252\203T\275\002\307\315=^c\027>\313\3777\275[\307\345\274}\214\253\275\312\364\210=\343g\335=@\336N>\333f\206<\300\315K=q/ 9\320\365@:=h)>\243];\2749\025`=\347\003m>o:\355\275\270 \020=\330\353\236\275\325\326\n\275\361\366\254=\244e\214\274\343[3:\372\224a=*\r\337\275\010\374\000>\353H\252=Ge5=\323b\336\273\t\025\032>\037\315\036\276\007\224\331=%(\r\276\337\223e=P`\367\274l\343e\275\2353\022\274\003x\337=\005\222$;\352\356\335=:\001\224\275\002\214r\273\343\272\001\276\003\264\354;\t\371\232=I\210\035=\314\362;\274\035\233\007=\217\022&>\335&\000\276}\224\024\274\200\260>\273\262\007\370<\335\210$>\352H*\275\035vl\276\324\357\211\275\n\331\234\274n\t+=[\3505>\376\027\241=Vd\263=]\261\033\275\'\355\014=\203\331\374<\304fB\275\010\370\006\275\340\244\357\275\334\351\344<\225\331\213\275\264u\006=\315J\205=k\362\240\275=\3038\272F.\202=o\376|\274\377|\346=\235\306(\275\265\303\026>De3\276\325\222l=\330s\272\275\203Z\330=\320<\326\274\246\251\t\276\37786\276\177\237\212\275\322\327\211=\003f3\275\206\255\031\276a\276\331=w\333\366\275\251\275E\275\221e>>\255\1773\276<.\375<\354\362:\274P\257?\276\234a\246\274\213\245B\275\367U$<\221<\031=\327\302\037>\355\250\272\273\037/\251=\252\005I>\'Ee\275\323^\324=\362).\275*\265\323<\355HK\276g\0326\275hD\t=\310\321\312=v/F;\227\030\210=2\277==\233oj\276\227k\373\275y\026\311\275\206\244\304<m]\004>`:*\276\372\322\035=G\364+\275\016\244\022>\240#\231\275\241J\322\274\327& <mE\003\276\241\371\360\275\007\307\241\275nv\303=\031`\306\275\027\362\001>\345\220\321\275Z\257\326\275\371\227r=;\220\244=^F\245=\206\230\352=&a\241\274\214h\230\275%?\n=\037\3635=1\260\310=\320QG\275\360,\216=C\2310>\200\035\014=b\017\220=\r\254\035=N{)=\210\'|\276r\224\234<\372ka<\3303/\276\340\016\t\275\023K\234=t\374\007=\313\310\322\275[b\250=\3637\253=K\302\014\274\203\205P=\304\204\020>\030\220\003\276\205\360\007;\351\312a\274\021b1=\246\314\250=:N\005\276\232\314\013\276\007=\274\2752@\251=\217u\r>\316\341F\276\276v\240\274E(\273\275\024\337$\276n\352\273\275\274~\021=\0208\231\275\343c\201\275\2375\354\274\230\210\020=\030\265l\275\024\254\256\274\351\013\212<\304o\307=&\024\007>\037\036\245\274O0\027\274\255\230`=-\217\216\274P\336\237\275\265\325\305=(\240\016\274O\016\217=z\022\017\276\341\026D\276_0\262\275\"\003|=x\021\250=\233\241\217\275\331\277\243\275\017\361\030\275\022\002m\275\332\260\317\2750g1\274\302;\306=:1\260=Qm\213\275e\224s\276a\3059\276=\326\262\275\224\230!=\223\034\226;Q\375\226\275UR\227\2753\342\272\274\002^3\275VT\233\275\217\303\375=\365\206`\273\275\027\327=\317\347 =Ig\340\275\005\306\005>\241\322\216\275\304g\242\275\256\211\014\276\324\226\317\275\275\217S\275v\n$<\356w\333;\250\317\350\275\374\273\201=L\0021\275C|5\275\204\256\025\275\274\324\031\276V\256\177=\357`j>~SO\275\327h\323=\026J\005\276\332\375\346<\007\303|\274!\032\006\276\000\237\331\275\210:\022\276rA\367=_\300\240=\243G\373<e4%\275]\351\242=};^>x\340\270\275\307#\230=\3644\210>+\222e\276\233\014$\2759\204E=BE\010\273z\353\215\276\247\271\266=\3755)\274\0174\354\273?\036(:\216\025\212>sN\315<\"\021s<\220V\235=Y\031\327<w9\007\276\262B/\276\341B\000\276\264\256\215\275\233\242[=M\031\241;T~X\2752:9\275)\316\212<\222\232\336\275#\215\224>M\376\365\275\244\3704\275\264\000\354;-\372\013>~\241\316\275\020n\005\276,X\237\275~-\\=\372w\211=2\304\017\276\373Y\325\275\301\214\217\275\321\314\031\276\303\267\247<\233\226\033\274\276\030\362=\336\344\010=L\262\n=\216\253=>\355\332\223=\372\315\353\275\331;V\275^Lc\275\206\376\033\276 y2=\001\022\r<\277\267\375\275Stb\275z0\234=o\213~<\031\215Y=\365\225\321=\326\257\276=\367\267\017\274\354\207\351<\210\217\225\275\351<\226\276\312\265\342\274H\371\307\275\253\341@\275c\361\004>OP\031=\361G\010>\224|\273\275\352\316\352<\345\307\013\275d\346\202=\241\252\341\274\272c\001\276\010\027\247\274\026\341\217=\007\317%>2\325\300\275\236\263\000=T\307N\274\207\3522\276\220\306\035>\322\306\263\275\267.\264;\212\335\346\275\224\023\266\275\215\311r=<\'n>\274\307\300\275_\314\t\276^\321\240=\025\177\024=\306]\027=\236\245\036>\323p\317=\327R\253\275\244\377v=h\317\257\275x\377\341\275\263\003\325\273\241\025\030=R\345S>$\370b=\004\356\212<Q\017\006\276z\230\236\274]\354\344\274Gf:<\347\023O=\224\225\307<\203f4=Qi\254<\265\235\263=\225\351:\275mG8<N5\346\273\017\374\n=\033rX=\225-\325\274451=:\033\324\275\335\244\205\276\264\263\275=\022\350\315<\270k\217=O\301\322=\311\351\177={N\245:\310\234`\276u\361\'>\021\034=\275\355\304\375\275Y\317.>\236\206\364\273\226\305\">D\224\027>f\316x;2\027\225\275\272\263\217=35\016\276\320pd<)\327\362=\276\340\273\275%\034_=\321\017\236\274\357\272Q>\234\2416>\357+\301<\216U\205\274P\266\267\273\357\007\347\275\371\006\003>\307\2772=*\1770>a\327\004\275_\3044>\013jt;\211l\327=u\241\'\275\277\0262>\034f\025\275\353\310\275=]O\215<\007\2766\2749:\004\276V\267\333\275\262\221\r\275\340\315\223\275]\370\032\275X2->i<\330\274\255\377P\275s\250H\275!g\014=\r\303v\275\024\014\300\274\371}\210\276\226n\205\275\316\310\021=qy\304=\336\371!\275\273\217\006;\375\260!=&\221A=B\250\342=+\367\016>\263\355\342\275\362D\205=\004\377\326=\241\325\276\275\353C\256\274\254\270->9\346\335\274R\204\330\275\231d\032\275\204*\010\27584\010>\340\217\030=\341=\317={\312\177\275\237\206\330<\363vC=\215\005\021>X\177]=\333p\202\275l\252\227\275\204\\\305\275\214\356\216=9\220\375=`;;=/S\203\275Hz\361=6\265\244=iy\255=\267&o=\340%\210\275 \005J=*\236\274=\301\241\302<\373\361\312<\266\270\361\275\255\367.>wT\032>\376|\255=\017\"Y=\217\3619\275l\024\t\276\251\262\241=O\243\330\275=\301\234>\022\257\203<\224)\260=\2323\232\2758\210\225\275\330\t\300\275vd\213=,\233\330=\226{Q\275\243z\021>\310H\254:\313ud\276\317\351\343<\007\326\217\275\320\253r<\243\311h=\220\306\317\274\272\217\302\275\355\362\232<\337\2111\275$\224N=\213\340\002\276\216I\013=\353\265\352\275~\333\315\275\220\030\217\275\251<\311\275V \361\272c\3267\275\302\360\030\276\351\312\202\276\254J\265\274\265\331\370=\221|\203\275P<\355=\241[\220=\3544a=+#\234=~\377\214=t>\356<\267\000\216<\314\201\374=\276\235\365=,\335\304<\275\230B=\305\374;>\342\014J\276R\355P<\314\030\317\275\217\217\226\275\352=%\275\242\252X=\327\r\264=\222\036\200\275\014\372W\273l#\177\2742\204\n\276\241\005\351:\242\313\304=,Z\357\275\246\273\351<w\360\231=N\3332=@X(>v\234\313=\274\325y<u\311^\276\261\215\343=\025,\276\275\335C\330\275DpC\276\265I\312=\320:\000\276 \262X\275\210\225\266=\024\305\267=|\337\036\275\027:.<\037\\\306;\027\325=\276\3152\270=\\\276\241<\357=\241\275\366WU=8j\310=\014\303\n\276\344_\222\274\330\177\272\274|\021\317=r\310\370\275\213\033\357\274\240\211\316=\273R\202<\210\224\264=\300T\351<\352\205^=M\250\255<\314\212(>g\370X\276@r\212=\346R\036=\272\352\013\276&$\227\2743\367L\2751\370w>!\005\374=\377\032*\274\311\323\2478aR\004=\302\037\206\276/\326\226\275\377\227\310\2752{\212\275-\203\242\274(i\360\274\271I\215\274!\370\321\275\255Y\377=\361\334\247=c\342\224\274x\230\370\274\263\302\024>\356\231\236=\272\222\224=u\006S;\316\272>\276>\312\320\273\352M\024\275\r\315A=p\266\377\275\377\201\312<&_ =\201\372\260\275\252\240\225\275yO\000\276\243\nc=\'\020W>\022\341P<\204R\234\275\024\370\343\273?1x:\321\025\004\273\3409\334<\217C\334==\266A<\313\256\017<\256*h=+U\024=\267\301\007\276\272\215F=\225\320V\275\211\277\306=\312\343\037\276rU\002<@\263g=\314\023\230=\201\346\231\273qM\353<8m\310=\\\032\222=6\377o=\374l\364\275I=\000\274o\330\264<\250Z\005>\347M\252=\212j\267<\'\020\342\275]Q\251<\373A\014=\017o\313\275\343\213\237=\006B\023>k\013\026\276\022M\333=J\331\014=\\_h\276\266,O=\366b\270=\272o:=5\335f\275\037\212\276\275Xl\263;\306\353\001>\014m\352\275N\325\006=\211\013`;\254\376%\275r|3\276\255\350N\275\300)[\276\362&\241\274\211\3219\2753N\221\275\016\367p>\331\271\001\274\202\231\021\276\374\2772<$\224\007\2750H\377\275\307\'\331=oO\226>4\021\032<3\r\022\275-\020\n\272\201_Q<\325\202\306==\341\357;\326y\337\274\270_\263:\324\356\232\275\300:\261=\333\225\004\274\3373g\275n~\r\274\355\351^\275\2545B\276\236m\265\275\223\022\230=\203\373\227\274\270\250\267=a\215\245=\223n\240\275EH\034\276\322\t\277<JV1\275\034\024\024\276\323\3133>\317\246e=\261l`\275*\2364\274N\'\221\276\030\374+\275?\316\363<\320\224\352=\302\345\002=T\203.\275\320d_=\315\\\001>\027\263%>\206*\316=c\013b=\357\301\343\275/\242\326\275\233\274\236\275Z]\234\275\2006R\275\334\207\277<\313\277^\275\213\240\227=I\005\302=\376\240v>C\246\260=z\213t\273\212\201\302=y{\033\276G\'\014\274\215\356(\276W#\014>`\324\332:V\366\244\273H\350\364\275\241\020\020>%r\210=\363\270\271\275\262\363\032\276\301\344\000><\322\314<(\235\204<\237\274\226=\320\035O=\246\357\363<\373\231C;f\205\253<hyI\276e\355T\275\262\rj=\223E\231\275\247\225\265\275\365\202\223\275h\332^=\257\030\003>N\205\276<^\322\002=\016\224\246\275h\024\371\275\215\207\225\275\262-\273=%\017#\275\027\006m\275\312\254\316=\246L\211\275n\312\024=0\310\035>\214\n\004=L:\327=;\264\266;h\251K\275\200\215\354=\225\250\035\276(\2628=q,\241;f>\n\276\216\226y\276x\324\020\274>\227\342=\246\350\301\275~\300\221\2758\226\302<,K\361=\313\"\024\276S\\\276\2740\373]\275\010\233@\274\307\231\035>\211\222\330\274X\343\023\275y%\241\275\237\002\002=\001\007x=l%\204=6\177\374\274D4\001=\345\353\363\271\207\364#<\316h.\275\230\301\276\275\221\262\234\275\372\243\243=\030\256\336\273\346 \222\275\304\352\300=@%\234\275\025\010\036>\0239d>V\217\331=\356\245\241\275\036t\261=J\331\210\273\204\315\277\275\251\200\333=\237\227w<U>\274=\201\022\246=\305?\235=\"T\016\275\246\nY\271\303\341\210\275\344|{\276\223\030\215\275e\231\354\275Y\276D>\347\361\351\275\240\030\004>\232C\255=\341\2731\276\235\217\002\275\324\024R\275\245\272K\275\026\343)\275S \021<C\322\305\275A\205\316\274P\002\220\274\341\370\016=\r\010\373\274&l\202\275\375\234\226\275\211\256\t\276:\261\227=\245\274\210=\251 \t\276\212>\010\275\375\251\030;\010\r\016=\024e\247\275\310B\360\274\200\201\264\275\203\320c=\217y$\274\013n\305\275\220\035k\275x(w=]\260(\274\035pb\276_\327\013>z\006\343\2753v\375;P\271\251=\351\347\">\207\222b<C\370]=\327\026\033>\021\371\377=W\266\363<~\320a<\245\321\215=)\272R<\274\234\312\272\224\001\362=\201\205+>\031\233\375=)\350\'\2759\271\241\275\376_\260=a\236\375\274\330+^\275M\274\206=\236\000,=\216s\301\275\327\3432\275n\252\271\275\231\354r<\221h\225\274\036r\301=2~\300\275\331\343\210\275\344UZ\274\304\320\324=\240\334\017=\216\354->V/\221\273\325\263\304<\220\215\016>=\034\024=\235 \212\274\334\2170\276Z\360\254=~X\255=F\223\355\2748\323\214<nkc\274\021\324\224=\346\260O>\315\347%\276*\007\034>\357(\277=\220\034\342\275\212\022\305<9\347@<\355~\354=g\227\365\275\262\276@=\365\000\200<\256\364\310\275_f\017>\026e\260\275\227\320.>\371\244\212=\275\275\002>\026\243Y\276\372T\236=\203\374\324<\017R\\\275\326\241 :\235\313\266;P\026\261=\257*9\275\030\230\315\275\3371|<\177$\020>`\371!=gT\024;x\3352<\345\"y\275\177\234\020>\270\2222\276\370\251:\276\362\002\250=\245.\031\276\226@\341\275\216c\347=t\213\264\274[;\324=\243k\362\275\370T\215\275\017np\276\017\215c\274\353.\200\275\004\314\371\275\240\234\225\275\361\201\305=\025\200\014\275\244t\222=\362\267\230\274\367\250#>\321<\361=\360\270\362<\365=\213=Q\034\t\276i#\010\276;\264\240<N#\232\274{N\024>r\036\"\276\255\005\300<\014\314\005=L\353\261\275:l\021\276@IQ=%\353\030=\224\n\336\274\320\241\344=\373\370 >\356 \253=\301g\313\274I(K>\364\226/\276\210\224\227;}?U=bY\n\276\205#U\273?\354\224<\321E\275\275\350\214\261<]X\220\275K\022\277\275p\033\371=u\345\025\276\327\313\r\275\265f\026\276O\213\215\27244\321\2741%N=\236#\037\275\177\252\000>\010G\261>\004\305\240<\261W\024\276E\252\317=\3672^=\251\3749\276kZ\210\275\243%5\274\213#U=.\345\274\274\226\213\255\275,{\343=\255\303\203>j\254\260\273\202XW\275R\367\212\274E\220\303\275of\001<\t\342\255\275\333\331n=\274N\252=\217\237#\276\177\3476\275\244S\252\275`\023X>\"\177>\276\264\344\013=[x\014>@\202\264=\273\374=\275\300Q\021\276\020!\023>\004o\030\275E\017\002>\007\3624>!\004\277=\003B\023>iSO=@\027\204\275M\211\234\275\177\360\204=Nqh=\212\024\022>\370\354\003<\241\200)>\372\326\366<EE8<a\266\317\275[\337\010\276A\031\276=\0134\305\274r\327\244;O\337\000\276\027\340\265=e\036;\276\300\260\267\275\327ic\276\000S$=\262\302e<g\025)\2749\227\036\274u\025\007\276\364\370\345<<\316\203\274\366\242c=\315\232 =\355U\367\274\332]@>\367W\035=`\373*\276\366\315\032=\276\202\211\274=\315\343<\246+\316=\312\300\224\274\332\372\t\276v.\213=\360\212&=5\010F=;\330\002=L\360\314=\256UY=%\300\314=\375+\357=\374\007\225;\353M\345\275(\242\t\275X\353\363\273Z\203\227\275\230!C=a\345\222\275\242\326\314\274\370\257\312\275R\222\275=/g\"\276\240m\005\2753\007\241\274\251\222\334\275\231\265\257\273\326*\257<\375\366\226=L\213\236=\223fb:\205\206\221=4\3512>\360\205O\276\020\225L>W?\021>OE\371=\201Q\354=\244\263D<\243_\331\275\313\366\312<\276E\003\276\027\305\257=\332\316\251=\2359)=_M\004=Ji\312=\242d\001>Zr\203=J\217X=\2033\205\274\001\213\244=\323G\360\274v\203\326\274\242-Q\275\326\333\017>l\342/=C6\226=\217S\007=(\035]=\032{\215\275\244\300X\2757\000\336\275Ob\032\275r\337\375\274\340\301N\274\247-\354=\210\263\225=F\344\026>\3375\310\274\023\303\311<\004|(\276\037P\037\274\326\267\033=\375\302\205\275V\265!>\360\345_\275\251\006\002\275\367\336\325\275?\320\265\275r\344\205\275\341\360M>\233=\244=vC\326\274\357\353\003=8\027\325=g\200\250\273M\267 >r\333\304\275\310\006V\275\356\203>\276q\341\024>\207]\375\275\227\214_\273\370\310R=\351\324\314<^\200\332=\335\027\237\274\344L\277=\010y\201\275\333\205\'>\252.\010=\023\367\350<\263+`<\366\327C\272\361\342*\276\335\211\273=\216\2241=\t\343\343\274I\342\016\276q\213\256\275Y\343<\275N\2038\276\376\270k\2747\220\374\275\363\217\321=\t\355>=&\213\207;}\255\265\275\214\241><2UJ=*s\001\276`>!>-\246\007\274gCF=q\364\225=\353\346\263=oQ\223\275\3718\\\275\335\363\010>\030 \265\275\265\214\211\274\316U\341=\303\\\343<\217k)\275\344\313\364=L\3078\276\000d\261\275l;\277<x\004\357\275m\331\035=\024\027\"\276\365\253x=\210MH>U-\364=g\316\355\275\tQ+=\334{\024>wj\031>\312\276\230=\350\207\305\275\035\371->\307\320\262=\266\344+>\342\245\244<\242\235f\275!\314\333\274n\225\366\275\'\361\334\274\233\230Q\276*{#\275)\002\375\275\340\030\034\275G\230\317\275\256bs\275\024\257\323<\363V/>\332\332\254<\225\316\234=\315\260\373\274n\2753\276\234X\215\275\325\202^\276^\320:\276\003\375\330<\177\0263\2761]&=#-Q>~.\035>\372\032\320\274\010\334\365\275\325\343\265\275\211%\233<\266\355\206\276\310r\013\274\014\232`>\326\216\036\276\353$\352\274\002\'H=\246\304a<\245\345\260=/\275r=\317\316\347=\346\\\275= C\242\274I\255@>\351I6=\350\304\260\275\232D\212\275\324\326\261\275\316\272\310=\376\376\036=]\235\241\274=\025\335\275\262\034\023>\205\225\242=G\325\331\274\003\336\377\274\231\024\225\275\255\\\202=\270\310_=\317m\252\274\222\\\256\275\235\014\031\276\300\353p\276\362\350z=\321jc\275\226\357c\275\236Q\032=&Y.\275a\237\300\275\232n\r=\021z\r>\350V5\273T\264\033\276\337h\251\275\316\303\034>\317\007L\275/\364\260=Y\0301=+\034\304\273\206\035\371\275\313\303\226=H\344I=C\234\245\2744\021^=\254=\301=\211\353\270\275\367\364\026=\370v0\274t\002\377\275\261\252\212\275SNM=\013\301\300\275\362+\364\275Cry=\375\346I\275S9\001\275H\2233\276\3351\363=kz!\276\300\037\356<@[\375=&\303]\275\021m\n<x?1>\261\222\225=\237\013\371=BR\013\276N%\253=V\274\203=\216\316\264\275\235oz\271B\\\021\275\224\242\326=\220Mu< \027\227\273\343\354\217\273\327^\242=\366y\264\272|\371\371\275\031\275\363=\242\210\374<\313Tq\275Mz_\275\370\313\330=\333\370\034>\363\031\340\273\031\340\375<G\374\365=\323\253!\274\301\265\353\274\242\317\021=\235\311\365=5|M\274\257\261\266\275\323\323\037>th\317<$\177V=M\332\013=K\3462\274\261\265A>#\326%>]!\314=A\221\023>\334\361N<\321\350\240\275\213\305y\275\340jC\276\266\217\252<\200`\251:V9\033\274\026{L=\026[Q\275(\026\272\273\236O\031=\275d\277=J\200c\275\376\325\025\275\033\365\016<K\264\036\276\363*\362\274\035\3302>\211\r\241=3\"D\275\244h\235=\324\217\n=\302\272 \276\001\265\020\276\3243\373\275\340z\275\274\234\343\251=)@\253\275@\246\236\274\261\277\207=\020Z\261\275\272\364E\275\340\252^<e\325\n\276\201\026$\275\026\266\247=v\317\212\274\360\300$\274\244-\251\275\205\031F=\203\366\230<%\370\375<\311*\024=\266\352R>\313m\263\274\024\025\222=\311\257V\276\262\233\262\273\026\203\267\275\n3%<~(\267=\014\324\322\273o\214\010\275r\344B\276\017\001\342;\222S9=\277\377a\276\361\032\001\276$\267\356=H{z\275\003\352\304\2757w6>o\"V=\250\272Z>\243\233\244<\323U\201\275\354/\017>\240T\367=\022\3527=C\362\221=Tq\022\276\343\007,\273\231B<\276\n\007\t>=\350\364=\247\304\267\2751e\373\275\275\240\253<\225\223\324:\236\361\021>\210\256\363<\021\375\221<0\017\024\276Iqx=C(*\276U\276n\274h\207\204\275\2263\225\275b\"\310\274\226\331\342\274\345s\035>7\307q\275\035\263\213=\214\035\235\275\366\360\270\274+.\324=[%\372</\031o\273\231\255\024\275\201\002\226\275\1778\031\2769<\323\275\374\354Y\275\251\005_<\351D\202=;R3=vW\354\275\245\205\263\274\310]\254<kz\233<\r{@\275\300\\\272\275\375S\265:\3422\352<\017\252f=no\207=.\004\232=LF\212=\025\352\373=\252\030\376\274\265`\014\274n\336\234;\346\372\300=\247\245\025\275\224~\205=\376\334\227\275\034\363!\276\221\266\241\2753q4\274\rD\006\276ea\264\275\037p\270=\000\262\361\275\267\031\031>\375\354\247=\204\017\010\276;R\211\274\323O\027>soL<~\214\270=\002\351x\275}\344:<\001\326Q\275$&\373\275\373\031\275\274b^\026=<\360\304\275\230>x=\022\370\025\276\346\261\242;\206\302\026;\361\316b=l\324\002\274\035I\030\275Y?\261<\242\264]\276#Iz<\243\r\036\275\344}\372=\225\300\253=\246\017\300\275\030h\020\276J\0058=v\264\200=I\270\005\276\036gb;\350\216\260=h\206)\276\325\255z<\353\025\344=\200\265B\276\314k\324=\251\355\260;\230D\005=u\264\212=V\034\371\2755\026r\275\242\235)\273vb\341\275\t\0025=P\252\246<4\220\317\275\207Bl\275`a\335<\273\325\372<\220zh\273Dz\'\273\334\231\200\276\326\277\311=\311L\000>\237\232\r\276\t\264\307\275{\360#=\306\212\301=V\314\247\274~1\273=\236\016V=l\220F\275|\355\340=/\003 <g\241\220\275V?\330\274^\026e\275\n\247\320\272\350\354\304;,`\207=\376\351)\275\352\346\254\2758\211o<\370j\013\275[\311\021>\001\356\320\275F\024\234=\336\340\277<\377\346\030\276\311TP=\305\024~<Gv\261\274\356o\303\275\320\271\323\273\356\333&>s\252\212\276\033\222\266=\336\361\357\274vW\'\275\214\032\221\275\350\376\031\275#\232\023=\020{\315=\324\325S\275$Q\265\274X\027\257\273\372\016Y\275+K\t\276\216\250\'\273\275\342R\276\005\246*>\262SH\275\275!\212=\004\221:<\336\r\177;H\210\322=\350\323\227<W\203\334=\320\242~=\207\375\274<\336\3338\275\022\215\277<_\332\346=I\345\273=\317\347X<.\271K\275\177\330\013\276\312M\370=i\352>=c\234\000>u\350p\275rD2\275gO\023\274\235\351^>\031\017G>fR\202\275`\347\320\275\214v\371=\344h-=\207\263Y\276\313{9\276\200r4>-\365\223\274*O\203=\376S<\273\300\320\353=0\3030>\020\364\006\275\256\246\311\275\246]\252\274\215\245\002=x\2037=\201\203\310\275\203M\326=?\374\247\274rw\003\276I\366\325=\307Y\013>\362c\264<\326*\366\274G\351\266<&N\007\275k\245\273\267\004m\037=\225\271\356;\314\346\003=\275\362\013\274\356\251\206\273\363\343\343\275~tE=z\201\240\275J#\364=\251\243\253\273\324\266a\275\036j\245\275#\206C\275F\023\332\274$\350\306\275S\360F\2742\266\257\275E\273b\275\027\342\372\273\335\220\246;|\372\207\275\002(\007\275\017?n\276\260_1=\346\r\255\273\341\377\004=\327\037\372\273\027ju>u\223\214=\253\340s=\244\366\321=\253\325\241<\227\276\017\276\352a\303<9\021\331=_\207:=EP;<*\030\273<\t\212d=p\307\262=\007`\224\275\264\216\023=\241[t=\0269\213\275\372\374\257<\0059\024\275\335\361`\275\247q|=\227N\271<\344\254\340\274^\206\177>+mB<\205\024{\275\345\274\031>\233C\255=\230\336H\275\375\262\255<\r\031\235\275&\356c\275\3546&=@j\t\276\277}j>O\017\347\275\342\241\262= y\017\275\221\311c<G=\340=\242\037\212\275\341Je\275zM\206=6k\374=\321\251\326\273\347\022\210\2754\202\246\273\342\355\247\275\033x6\275@yW\273\361\365\007\276\023K\255<\t~\264\275\037\357\273<\0233\251=G\374l=#\022\207=\343\032\206\275\260\002k=J\200.>S_\262\275\354\266}\2760\r\224=\344\256\331<#\306@\273\360(\010>tW\341\275q\374\323:\001\376\006:n\202\037>\365x\2229\232_;\275\007\337\242\275\241@\240=L#\'\275\200\206\242=-P\353<\326@\243=\245\274\340<\031\243\264\274\245\364\351\273\351\317\364\2752\254\003\276)\177\350=\003\365\223\275^\254\013>u\277\t<\227\310\240\275\302\326\224\274\352\362\244=F=\020\276\016\376\375=1\262\005\276\355\r\375\275H\014\267\274\332\252\343\273\207\204\261=\035\331\236\275x\220<\276\365x\320=1tA<),\372\275\'\340\227=\347\311o\274]\215t\275\'26<_\2638;\224t\331=\216Q\237:\350\316\324=\232\327~\274.\336I=\326=\002=\001\266|=\027-.>U\262\305\275\037\005V\275\215\240\243:V\022x\275F\014\2419\327\222\237=WI\354\275l\003\356=\021m\214\276Zj\272<[\237\213<^\331\322\275\332z\245\275<]#=\327@\264=6\027B>\003\220\013\274\357# <\355z\277=J\271\210>\361S\341=&\217\305<\013\013\325<\271\347\037=N>\245:u,\330=+\254c\275\311\315\376;\376<\220\276\275\335\001\276t2\345<\3565\003>\0201\023>N@\276=K\353+>xQ\035\275\032\211\375;Mk\321\275?\347\353\274gt\264\275\225/2=\0022\303=\344-\310\275\025\310\210=\224\327v\275\'\313\227\275I`\323\2753\005L=,\276\344\275D\310\207>\303\304\021\276\272;\327\274)\267\331=\212;\353=#\323\213\276\365\025\256\275&U\234=\003]\016\276\0332\273<\365\347\227=\333\317J=\320_\207\275f\351l;\372=\304;.\344\331=\225a\366=\235\0079=r\034\272\275\221\036\206=\364X#=\212\370\203\274\217c:\275\323\017\275\275\033gK\276 \374\221\275\300S\363<k\314\264=(\321J\276W\371\013=P\250\301\274c\013x\275ys\344<\314\310\231\275\214M!=\220\226l\2742\271\002\276j- =\201\265\t\275\353q\276\275\305\336%=_\312h\274\243\243\220>k\266\366=\310\005\020;\363\264_=Zi[\276\n\324\'\276\323\177,=7#!\276\234\374\217<\345\335\341\273\037a\363\274\224\302\n=j\000\334<\372\347\220\274j\217\017\274\0254J\276\236\3734\275b\224\312=R\244\276\274T\273\244\274T\253\036\276\2373\037=\273\241\027\276~Vn=\211M\331=&\201\233<qq+\275\326\236\201=2S\344;\227f$\276\036d\210=E\247\363<\343\004h=\0069\315<\022D~\276`#0\276@A/\275>\246\034\275i\344\031\2752\252\323\275n{\256=\341\212B\274\375-9=SN\214=\242\302,\275\254\210\225=\344\347y\275N\323\227;\260\300H=\215\232#:\266\307\303\275\204+\357\275\272\324u=\027!F=v\353\365<\370S{>y\206<>\266G\031\276b\026\273=\231\n\310\275I\201x\2759\2166>l\272\300\274^0_>_?\253\275=\245A\276\036mm\275\"\322\356=T\221\337=\343+\244=\334\235[\275\257=\032>IY\207=0\224V\275\315\303^\2746\327i\275\326iX\276@\357n\275n\010\210=e\037\212\275\325\022\252\274Rj?\276\3328\317<\252\355\244=]\331P=e\363\220\273\275\274\002>p\020\202\276\024 \032\276,\"\334\275\243\340|\275\377\266\303\275[h\343\275\037>\206=\363\354\330\274\201M\216=\243\\>\276`/6>V\367\354=J\276B=\352N\371\274\222\\\265\274SU\010>\327\311O:_\033\323=6\251\023\276DmK=\366\242w=\3010b=\313B\024\275\215\035\204\274A\246\024\276j\n1\276cU\333=Di\006\276\343e\n=\005 \351<tb\273<\336\227\372\275\017.\205=\374\232\250\275\261\264\341<V\212\r\275\267AK\274\336,M=\256\023\003>\006\267\220<iz\252:\221\370w=\327\363 >\341\010\257\275\200\315!\276&\307\235=\267\361\325=\002\217\023\2754\314\217\275e\256L<\331\231\356=\306\025\204\275\2269\301=H\341\246\275\3442F\275O\311\265=\n\327O>\346\361\007\276\177\273\235\274\236\366\371=}\\\241\275\3572*\275\021F1=\324E\236<D\206M\274\233h|;CT\356=\364\322Y\275f?V\275fTd\276\227\010\213\275\213Bd\275g\256\241=\310\265\265=(?&\274\210rV=\254\000\262\275wD\031=}\023\217\275>C\340\275\215\312\027\275\230\222p<\214\007\024\275Rn\376\274\030\342\001\275\t]8=\215X\215\275_\335\200=$\246\340\275\271\255\205\274\214\335@>\334\006\244\275Q\337/\276\"0\362\275\255\245\364\272\032\336\010\274\365\341\273\275\304W \275\035\320E\276n\350\214\274$\327=<\260mY=,\252\315\275\035\375\036\275\232\013X=\260[\203<`7\267=\352\342\244<\344\211z<\223\256\217==\364\310=\352ox=\325\247\215\275\224\205\231\275\'B\245<k\324\335=\216\033%\275\231\225\n\275\322\274$\276#\367\'\276/\327\307\274\213\337\206=G_\313\274\265g\037\276\221:0\274\275\275\335=CPE\276\271\360\261<\207\233\303=5\232\267<\311\354\026\274\344e\017<o\031\002\275\020y\010=\221\220S<\226\264\310\275\275\017\n=m\366\241\274>A\035=J\006\271<\313\243\246\274\373\335#=gK\346\275\007\204\206=\327`\312\275\344=:=|\373,\276pl\234=\265\202_\275\022\016\210=\310\332l>\274:+=\211\216\022\276\366L!\274\203E\030\276W\\\316=\306\204==\202|\332<\265K\313=\210\204\204\275\213;E\275\305\225\r>\256\'\356\275Lp\301\2758\036i\275\302X\025>\207\240\204=\277\222K\275\324\345\236=}\364\033\276\325\003E\275\366`\203=a\251\000>/o\310\275\361\017u\274\233\t\010\276\024j\202=\331\262\371<\033\275\032\276\367\'\017=\370\177\221\275A#\262\274Vq\371=\021\366\255\273\235}<\275H\2227<\177\227\257=\354\351\215<xR\220\274\325\t\361\274>W7>eo\010\276Gx]\275\254^\315\275 \217\035>YO\267=\317\247\244=s]\374\275\373\263\274\275\302M\004>\214%p\273\253\205\336:\270\2306=\331-\030\275\014\002d=\016\034\347=\014b\020=5n%>\275\220\026\276\330\025\235\275\317\315\233\275G*\263;\252\333\205=b\035\023<r\016\201\275\"\311\214=\031{\333=`\024\222:z\230\277=\362\377\211\275\330=\207\274\250\372\363=8\000;\275\376JF\275\252\310\033\275\270\2662\275?\234\033\276\321\3549=\n,`>k\361P:\023\277\205=\200\324\013\276\225O_\275\347\365\026\276\234\337\032\274\030\357\r>!\024\337\275\373b\272\275}\275%\275\346~\210<D\3701>I\257\013=\360`\242\275a&i>]GS=\343/\364;1\2759\275D\177\316<:\237\227\275\365\347\362=ArN<8\214\024=\032I0>n9\000>\227\367\005=\300\202.=\247\030r\275A\377\365\274\036\243g\275\220)8<\311c\265<\302}\267=\352r\207\273Mjh=\242\263\260<\215>\304\275\352ow=6F\243=a\035\177=\355\315\270<\003\210?=\204|\210\275\207\260U<\246\235K\275\331-\365<\24558=!\230\213=v\303\301=\222\206(=|\257\325\274\324\177\020\276\310\332\317<o%\014>\016:\360\275+#\237\275n\311\314</\374\272;\301Bi=s\372\013>\0310\243=\035\"\024>\004E\036\275\232\331\236\275\026P\265=w]6\275\206\340\361<\022$\344=\213p\244\274=\340\361\274F\027\251\275\354x\361\275\203\222\'>,\007B>f\357\225=\264Q\202<0g\370\275\365\027\200\274E\362G\276P\247\235=\326\007\367=\207\362\202\274\236\0316<q\211\031>\244K\\=5\2406\275s\017\312<Rs9>\257\304\362\274\032\3150\275\n\031\004>\347\017\033=+\376\240\274\002mf=\336\320\227\275Z1\003\276S\224];\361\217*<\265oZ>\220\275\216\275\020\202V\274\314\277\327=;k\270\275\007\334\305<\276X\026=\334G\223=:\260\356\274q8\037\275\362\177\230=A\013\r>7k\\\276\355U\306\275\035\374\217=L8\205=\362\\\016>\347q\331=8\242\255>\267\023\025=j\321\250\275\234\353(\275\203\030\010=^>\233\275Z\232\353\275\017\025N\275\222\023\337=\3266\033\274\032\345\204=x\317R\275\036\303\032>\256\024\t<\"\330E\273\336\002+<\313\315\252\274e\344\037\275\036\246\000\276\371N\362\275I\353Z<\254\340\206\275k\350\016\274\337\017\337\275q+=>Tk\272\275\2428\307\275\003\337\263;x\317\274\274\010U\201=q\344\215=a,\201\2752\020!\275`\004\010\276 \355\032=i\317\034\275\005\3758\276\316\013=\276\36542\2758y\037=!\227\357<7;Y\275\377p.=I\353B\276pe8\276\352\004\334;\017m}=u\365]=\2132\031>\326CB\276\271s\023=\234\334\023\275H\rE=\312[v\275\303\322\332\274\353\206a\275-\363\007>.\024\266\275\352x\315<\335\217\307<\244vm<\207\255\206=\346s\036>\212q\222=\251\310\361<\005o\"=\307\214\206\275a\243\320\275`\314->\023g\\\275;\016\317=\364\242\330=}r\224=\260\256R\275\3058O=\235\360\000>~\363\225\275i\274o=H8\217=\252\203\306\275\r\344r\275@,\021\275\201~\242\274>\271p\276\263m\343\273\374\334$\276S \241\275 \016\332\275\010jz\275\020\264f\274\234k\'\275\272\311\216\273K\204\263\275K\324\020>e\371\024=B\336_>\316\026\266=G\033\305\275\002F\213\275GY\270=K\372\212\275O\277X=\"q\013\275[\371z\275\245\006\306\274\035\336l=\t\241\331=2\3325\275\332\367\224\274&\210\021\276\370\277\361\273\304\317\036\273\031\206n\276#V\202\274\006*\331<\010L$>\\qt\275a\020\325<\3539q=\235r\356=\206:C\274\333R\270=\357%\246\275!\231\250=\017\353\223\275\037\274\265=gq\267\275(K\355<\376(\244=H\343\223=\263Q\354\275O\274`>\024\304*:.\246p\275aM\357=\231}\270=\033k\337=@\341X\275?\315\212\275\253\346\346=\327`[=\362\247G>\223\375\330\273c\232\001\276\n+\353\275\240K\351=cD\033=\020\327\254\275\250\230\313<\350L \276\332\355\003\2765A\023=\315Qw=\302\034\246<a\004<\27575T\275J\336\235\274d\335k\274s\264\204\276|0s=>\262\227=\347\210\007\275\364M\270=\356\016;=\036a\260<fsN\275\002\r\331\275\325\364\030\275P\357\342\274\234\263\r\276\\\\\210\2742\232\245\275\255r\030\274hQW=V\"\250={\276\225\275\201/X=I\240\223\275\244#\225\275\377\356<>\023\225?\274\266\222\300\275\261\034n=\252b\023>qHj\275+\337\237<\366\202t=\363\3122\276\220\307X\275C\203C=1\204\'>\000\300p<\344D1>\221\333\345=\245\r\206\275\024N\253=\032\376\022=\001\"\262<l\342\202<\311\360\323\275\251\352]<\344o>\275\016\347\252=,\002\236\274\352\344\001>\263\211\245=\330\331I\275}\222\225\275:\036\023\276@C\333\274\326\350\272<\364\354\016=#\365-=:\215V\275\3152\256=.a\016\275\267\034\033>\303\271\313\275!]I>\\l\256\275\200W\371\274\r\337\022=\245\347T>s1\214\274\312\357\215>\246\'/\274rO\312\274\375\036:\275b\270\003>aD\213=\304\025\023>\340\212\303\275$\023+>\025a$\275v\010\275\275t\361@=+-\014>\315\354\316;{0-=\231\330\005>\243G\305=]\266\200=\341\333\022\276\021\030\032>\323J\277\274\342\240\335;ID\002\276\317\343\347<8bz\274\373\214W\275\306T3\276\326&\205\275\277\313\347=a\227\361\275O\005\340\275\227\363\236\275\355\224\272=\351|\333=v\371\326<\300\200\221\273\265du>9\230Z=\325&\244;A\334!=\220k\211\275?\346s=\225\335p\276v<9\276\211Jy\275\034\017\335\275\355\260\324\275\212\202\242<~\035D\272\366\246\272\273\303\tw\2768\016Q\275s\311j;d\300\025>qIo\275\253\335\331=y\224\333\274C\335\326\274\010\310\307=\222P\033>?\363\002\276Qh\251=\340\367\003\275\323\214\310<k\326\017\276\243\215\002=oy\323=G\032\000=\270M\301<\2568\r\274)\2005\275\352p\353=:\343*\275\021;\023\273\200\3304>KB$> \020x\275\246\237\222\275G\243\357;\363B\014>\024S\316=pg\211\276-\313\034\275\342\275\335\275\3108\220=\350\205\227\275\235\263\277=\313v%\275\010\240(=a\326\316\274\204\300;\276\\J\364\275\243\340N>\276\366\374\275am\r>\376i\351\274\237g\201\275\363\307\025\275.\\\316\275\255\'E\276\274K7;w\200\213\275\361\344\017>\342B\333;\021k\324\273\345~j=})\267\275~\017\334<Q\350x=\354rZ\274zL`<5d\010=7\324i<\277\t\302<\r5%>{4}=q^\240\275)\253\314;D\210\215=!C\206=[\267\346\275\230\303\026>\343\221\254\275/X\253\275\331\236H=\225\251\034\275n\375}\274\232X*\274\r3\370\274\370D\276<&\237@>\345\337\267\2742\027\000\276\327\345T\275[\2276;|\351d\276\214\200\026=u,\361\274\314^\'>\311%\034>:\313\263\275\222\r\002\273\353+f=I\035i\276\0339\364\273\340\216\226=\260t\017\276\004M)\273>\013\016\276/\302\003\275s\2058> \351\322;\210\363\020\276\345\024S>\202\276i=T\201\252\275\356\261\376\274lh\335\274frL>\346\324H>>\213\034\275\247\213W\275\215\300e=\301\373\221\275\321\366 =\025h\007=z\252\023=q/O>\305\351=\276{\360\247=\023\374\220\275\313\374\244=\356G\037\276}\014\336<Fc<\276\330\r\001\274!\303\375\275\'\305b\2758\337~<.\321+\2743:\336<\026\344\217=X{E>\315\234(\275\336\375)\273\333\021\002\276\332\276\375<\007t\311=$\316\337<\037v\303<M\021\252\274&\202\223=W\224\211=u\205\201=\246|\337<\232o\267<\221|\t=1]f\275\306\275\247=\316X\327<\314\310\035=,\026(=\354\337\006\276\335\021\234\275\027\357\304\275\206\016[\275\005\024\261:\220|\230<\244\372\025\275g\271\323\274\013H\006\276b\217Q\273\272\321\374=\t9$\274\277\320\265\273\312\007\021>\341\362\347\275\017X\267\275\333\252\031>\300\223\212\274\340\350\t\276\351\365\255<\233\242\264=\350\\<>\2533\027\273\333\257\325=\264~8\274:\264\265<|\246g\274{\016\311\274\250J\364=g\2666=\246_\355\275\203\301_\275\263\370K=\211\210\365;\314\214\242\274\3337v=%7\017<M\341\374\273\215P\037\276\201!\317<\271\220*\272\225\223\237<\001\361\203\274E\311\355\275I\324 >]U\344<\353\301d\274\036\337>\275\027b\375=W\325\204=e\266\335\275;)\256<h\350\022>\214\216\202>WO\355=\301\236\270=T\354\250<\210\371\375=_\242\233=\355^+=\245\226\247\274\333`|;\025\204\021>\331-B=[|\346\271\374vZ=U9\311=\263\366#=^\212\031>b\367\204\273\205\013O\276n1\237>n\211\321\273h^\306\275\322\247c\275\275\314h<\tZ\221\275\021q\310\274\376\223\t\275\346xg=\266.\007=>\240&>\307\276\030\276\027\305@\276\251u\'\274\006Y\240={\302\315;\212\r\212\274\331\244\230<\331\355\211<\334\246\345=\343J\361\274\020\004\243\2755\266q=\316\316\257=t\264\254\275\355\346}=w\336\255<\351\241j\275=VO=\025\2414<|\005)>!I\032\276`\320\327=\0373\341\275D\313:\275\010zr\274\207\305\310\274\2663\316=wQr=\236`\202=^\257R\276c\226g\274Z\277\312=\344\363\016>\310\264\305=56/\275\361\373\212\275,?\232\275\346\261w\275\270\252?=\237$\207:\\\337\323\273y\236$=\314\0015\275\304\321\024\276(\261\205\274\304\377\311\275\307\373\317\274\020\0007=]a\234\275\366\233\321\274\244Z\007\276\313\245\022\275E\035\241\274\257\354O\274\245|K=o\200e\275\331\212m=\217%V>Un\212\274<\320\246=\314)\017\275\324E\301=\330\331\353<\210\313\013\275v\300M\276zG\013>\2032\001;\005#\241\274Ci\236=\272\2663\275g.\223=5\200\216\274\323\'\323=\240\205\001\275?\257\351\274\236N\274\275\025h\361=\216\361\235\273\365\t8\274\260\325\317\271\025\275\217=\347\363\234\270\336{6\276\302\361\373\275\333\336\036<\307k\312\275^\361\000>\215g\025>\357u\321\275\334\200\376<jZ\260=\231\371E\276\254g5=Z\037\352=9]\316\275\266\021f>\350+\033>\243\345\234\274\326\354\355\275U\003\366=_\242\372=\2654+>DT\203\275\233`d\276\r\351\332\275\035\010\t=\000\205\231=\323\274\033>\017\0053\274\374\244\373=\216\"\276\275\261=g\275\262c\216\274Zv\t\276\301\317\036>\300\307\037\2755H}\275E\223D\276\003\245\213=\342<\314\275 J\363\275\t\335m\275\372 \032=1\n\250=\345\302\222=\004J\251\274\363\273\231=\360[\335=/>\274<\2457\271\274\345\216e\275g\371\327=\330\255\376\274\312\372\024\276\260\003\250=\361\225 >\322\374j\274\240\007\017\274\014\255\241=\215\376\347<\017\307\210\275\376v\250=\016C\341=\256\301\240=r\345|<08\010=}\307\354=\340\253\373;h_T\275x\025\003\276\007\0359\274\342\3206<\246\0247\272\177\325\377;*\264\276=0\270X=.$\370\275-\364\013\275\233\340\275=\222\324\247==w\251<?\311\016>\004\312_<zt\356=\341\201\321\275\036\000\237<\351\r\246\275\037\352\031>S\306\276=\245\350\341=rT\017>\227\252\227\274\326\317\022\276L\266\254\273c;\'=\327\007\363\274g\350==\203.\340\275Ur\330=Rm\321=(\311\367=\031\260\235\2751\\\007>\246\237\333=)\321\316=\003\343\032>H\250\306;`_\002>=f\016<v\240e\275\035j\366\275\243\353#\273\302\201\002\276\\P.>\235C\347=n\020\346\275||\320\275D\331\200=]\023s\275]y\241=\236K\020\276t\300\235<>\300\n>\231\374\325\275bp\265\274\305i\261<t\341\013\275\272I;=s\343\344\275n\311\003<\243f\266\275,T\234\275\366s?\275J\035\221\274\254\002;=\233\244\371=\026[*=\246\r\331<\331@&\273\223\204\035\276\322L\247\275\235(M\275\334\337\216\273\217\201\260\272\036\341P\276\362u\305\275y\216\366\273*\325\320<\026\314\034\275\202s\363=\357\001\273\275?q\n:\240\242\351=\255F_\275\\\340\245\275\273\225x\274\203\313F>\227\013\357\275\257\246\037\275*\202\376\2751\3730\273q\035\245\274\002\010\261\275\377\230\252\275\371\026\025>\251G\204=G\3707\275\220\226\334<*K\251=\245o7=q\253\230<\223c(=\021z\233=\223\317g>\220\334\247<x\373\0249+U\234\275O\0228>\023\321\001\275\264\036$\27566\272=\305f\237=\026\214$\276\0049\177\275\0219\312=H\252M\276\341\277<>\272\230j=v\204\211\275\375\372+=\014\224A\274y\215\034>\220\341\365\274\'\276\353\275\262J\013=8?Z=\203I\246=Q(\262=\221\266\213=\206n\260\275\377|\253\275\027>\007<\252T\336\274\251~\273\274\031\362\034=\261 \2629\263\377&>\272\377\300<2\302\220\274~\242\241<\005\022\277=5\206\325\275F\303/=\343MY=\261\341\275\274m\233\351<\r\204*\274\372\033M\275\021A\255\274;\\+;^\247\024\275\210)\241<\327!\260\275+\343\344\275\230\240\270\274)\277\002\276\010\'T=\372\274\034=\3308\272=-\311\257<Q\034i\275\226\310\022=\030\024[\275N\200:>\271\234\273\274\264\220\212>[x\037>q\005\303=wS`\275C\340\313=\305;\206=D\356\032\275\227\350\373\274\204\274\006\275v\250\005=\336/\033\275\362\255\265\275\205\322\217<\027\014U\275\257\021-\275\302\377\203\273\020W0\276\366yK\276\345M\344\275e\030>\276\224\373\014>\025\250\315=^Fl=\003@\303=h\227\214<J\275\271\273|d\276<\212\332\031<\314C\326<\210#\263\275o\324\003=#\262\326\275\320\256\351\275\243um=\364\236\326=\206D\271;\020ID=\253\200\313\273i_\360\275\276l\023>q=\270=J\n\003>\253\320\007\274\001\204\351\274\377\276Q\275\353\214\245\275\"p\301=\366Q\227\275\230\231\264\2751.\217>\rs\224:7n\007\275\3411\212=\2718\260\275\352 \343\274YM\214<\0106\006\276I\333.=n\336\214\276j\3667\275\314\r\036\276\301\344\261=\006\033e<\276\201\016=\303\360\274\275;b\240\275kEF=\2343\210\275\000nz\273\264\346l=\355\030\376=\377\376\305=ZP\300\274Yf\241=\353\343\010\274/?\205\271N\371\370<\324>\327\274\355\360%>\351w\250=\033O\333;q\346E=M\227\270=\360m\021\275/\235i\275N\032c=(\266\311<opD>F\355\323=\\\006$>\241G\231=\036u\332\275z\303\303\274Y~\340\274WF$>\025\231\014>9\210F>\314\205\225=g\200\217\275\263\240/\276:I\024>\"\322;\274v\207\224\274\331r\344<\213T\273\273\'\347\023>\212\332\355\274\027NS\276\237(\317\274\327\314J\275OpR\275AH$\276N\204\\<\351\306\034=\007C\036=\225\2529\276\035\374\237\274\016+\244\276\302\360\233\275c\227\002\275\035R\240=\255i\356\275W\031\326\274\342p\233\275\215p\322\275\302\\!>\261\034\327\274\016\350\006;v\223\007\276\214\332\201\274m!\330=\363\313h\276\r`\026=v|0\275\344\226\251\275Y\264\212=\371#\211\274+\213\346\275\223\257\345\275\362&#\276\222\344&\275h\007\305<\"\277L\275\336\032\013\275(U\325\2742\020\207\275$\323\261<\341\276\273<I\371*\276\252:\r>}\037\026\276\323!T\275\234\216y\274\rD\365\273\236\233\315<\362k3\275eA\346\274R\341\215\274\001dd\275N\206\031\275\270]\r\276\232\277\367<\354\007\227\274\306\217\236;\336\030\000\274\362\036i<mr(=6\314\216=\257\252\010=]\305\324<x\016\003>\337\030\024\276\200\206\267=@\021\014\275\201L\370\274B\022t\275\310`b<\362\'\332:\022]\244<t\230\362=\306\020\234=\024\362\225\275\204\206\305\274w_\321\275\257>\342\274S\334\321=b\313\266=\257\324\250\275N\334\327\274\333z\367=x\221(=\2105l=\275\203\336\275\366Zy;\243L}=5\014\257\274\350\212)\276t\255!\276\200N\214\274\364\346\223;\210J\032\274j\367(\275\361H\201<\216\204\235\275\246\311\277<]\367h\276\223]8=\360\315];\252\372\242=\t\037\210=M\345H\275\201\007\346=\320\0311\2751_6>:\244q\275\214\201J>\304\331\000\276\227\377\t\275\303\316\254=-\250\321<\331\354\254=\272\226)=N\034>\275\227\241\255=\344\264X>\367U\225=`\360\204=2\367/=\273vq<D\343\'<s7\036>\2355\364\274j\304\350<\201ZD=d\360\357\275{\365-\276\033,w=\312\367\241=j\017\277<\237Q\253\275{\256+>\364\216\036>\272\263\026=\277\271\217\275\212\025\347\275\262~\352\275K\247\252\274\177\204\266\274`\350l\275\277\256#\276.\370/>\347F-\274\253\2542\276\001\277\013\276\344\356\254\275,4\"\276\337\007\024=\215\343{\274\213g\356\275\340@4\276\327\3624\276\t\206;=\252\316+<a\353\375<\010\223\024<\035\207\267\275\262\3675=+\321\276\274\343\254:=M+\000=\344\037\327\274\225w\253\274\204\004)\275$\032\321\274\343\373\375=WX\326=}\023{>_\206\306;\320\212\331<kh\005\275\002\024\016\273 \311\202\275\207\014\350<\0239\341\275[\236\004\276\357\302\035=\247H\340<\374$e\275\227\2678\276`h\347=\370\"\256=\377\243[\2758\266\365=\302\221\224\274Lh\002\273\206\310e\275@;\006\276\262\207Y\276\003]\273\275!\276\224=V\301\354\274Sy\305=$5Y=>m\035>n9^\275\304\213\310=\345\"9=\327\325\356\275\274\225\377;\353\277\243=\025eA\276\003j\245=-\261\'>\036[\375=\0301\220<\211h\222\275F5\013\272\024\016f=\352\200\276\275\265#\023>NR\310=b\300w\275\372\310\026={\352\252\275\255\300\330=\3407Q<<\262\272\274\220\247\013\275\\\313\232=jG\253=\351\364\226\275\033P\217\275\265\270\005\276[\251I=c\337\227\275\351\344\350\275\033,\036\27609\311;\260\004\226=\244\336\006\275\207a\317;h\017\003>\3128B\276^\223\014>_\331\270=c\331\006\266\242\356\304<\230\300\342=N\351\230\275\222\2650\275\206\373\214=w\267\215<\272\334\264=\233\213\220\275\344\'\235\275\356\271\246\275\314\246\216<\351\000\370=1W\035=\377\226\352<t\311\337\275\371Y\"\274\310g\250;\271W,>\021^1\276r\341\253\2751\026\256\275\024\007;\275\312\025,\274\366\263\373\275f\347\016>\2160[\276\217\313\200\274\004e\331\274\003\255o=\336\t(=U\237;\275\rl\273\275\033\306\273\274\265\325\017\276\331\344A\275\031\371m<3C\374=\302\016\335=E\361v\274\t\255z\275\002\303\364\2757\274G\275CL\277<&$q\275\000\375\352\275AA>=\263M\025>\0060<\275[t\332:\250\274\303\274\273Z0\276P\331#\275|\314P>\010\234\226\275x6\350\275\\\017\205\275J\350\254>\374g(>\\\374\375\274\025\275\210\275H\335\217<\227\033\352<\203<\272\274\253\200\202\274-4j\275\034\371\225\275\344)\\\275o0V<:\3735>W\362\267:\336O5\275\222\252\250\275\2278\373\273\246\014\331=\275\014\260\275\322-P=\'zx=\314&\370\275FV\262=\007\t\r=\266ZH\276\251\247\304\274\354\r\254=P3=>\260\357\023=\335\277\017>z1\001=\246]%\276\376\207%>8\333\002\276\316\216.=0h\300=\244c\304<n\031\014\275\037\365\221\275\235\353 \275\034}\340<\024\234\375<\037!\016<\304\313\212<d?[>\3405\312\274\326\030\232<4\331\331\273I\251/>z\316\246=\342\327\255=\014\030};1i\335=E\212\322\274l6\006\276D\311\334=\355d/\275z\365\300\273\035So\275js\372=b\364E=\311C\344\274\026Q\032\273h\201\222=j#\032=_\013P\275\020}\313=av\000>FJ\324=\345\376\246\275\005\340\343\272\346\206\r<\272(B>\272\036|=\013\024\313\275>\002X=Y{B\276\314\324\303<\025\245k=g\254\234=\364\237\225=\t\303\010\275\362v\210;d.J\273\223\027->q\235\252=\3610i=\323.\375<\2059j<6k\304\275Z\325[\275I\254\225<\233\343\032<9S\202\271\236\331\312\275I\247\207:o\350v=\207\307\006\276\002rH\275\371\317\263\274\305+\371=\'\227\203\275m\345\001>\223L\367=\377f\024\274\2425\022=\341v\267=\246a\013=y\020\035>\307<\310\274x\222\000>,\334}\274\n\t\241=\223\211\343=\372\201\201\2755{\007\276(\227G>\031\010\252\274a\244\345=\305\326\020\274\177\214\376;\350\216\260=\036\274l\276|\3269\276\253\221~=\236\020\002>\260m_\275_\014J<\274\246\000\2754\354\n\276J\207\203\275F\276\252\275\220 \230\274\271y\347\274\321P7>\367=h>{\310/\275\324\371=>il\222\275\234\026+\276\004\025n\275\373\262\002=gD\202\273\324\272J=Qj\217=\364R\035=\315\341\211=\021T\322\275\367\362\246\274\337\360\214<\343\264\372\275\344\373~\273r\361\327\274\026\002\006>\211%R\2755\270Z=\341;\246=\t<\037\275D\302\017=}\0278>\315\"\231={\324\360;V\177N\275\300\rL\275\243\302\n>chd=\377\207\226\275\177N)=\265\255\004\276p\001\345\275i\'5\276\'M\373\275\376\251\226;\002R{\275K\036E=\370&@\275\223*\263\275\021 \245\274\026\322\021>p\021\330<4\205w=h\202\036>\271~\010>\002\035\316\2734\250q\275v\256f>c\354\267<2I\272\2750\032\333\275C^L=\211xb>.\017\334\274u\017\222=\037\235\310\275C\223\355<<\376\221\275_\273\003\275\024\313\272=\032/\007\273\26452\276\347F \276W\355;\274\207\343\026=\231\246\304\274X\322\310\275\014B\226<V.&;\215\320\253\2754tC=8\036/\275\255D7\276w\376\231\274\363[\270\274\216v\372\274\275\326\371=\364^\215\276\202\375\360<\220\240|>\0207?\275\2204l>\365\370\200<;\033\300<\3160\353<ex8\276:m$<P\355\370<\354\0243\275\204\317\233\274F)\035\275\342|\200\274\367\372\343=\345\271X<E\242Q<\333\016\023\276\214\037\302=r6\242=\010\017\t\274\231\351\233\274\335\"f\273j\241\340=\220lE=\321i\372\275\r?3>\026\207\217;\336\263+\274\367\330\244\275\023\006\377=\255\\Y>\276\323(=\2147$=6\365\206>\241\257f\275\002P\027>\344{\350\274Y\334/\276\340\347\262\275N7Z>\343\304\312\275\233t\t\274\343\033\310\2748\267\201\275\026M\277=\367\246\222\275\t\340\313\274u\372(=\221c\010<\227j==\245\360n=VwA<\332Y1>\332A#\276\301\336\033=\230\375\211\274\207\260\333<A,\230<\235\232r=w\361\315\275\346\206M=\317\233\321<\342\344\032\2768^\222\274\034\232$=\005;\374=L\201k\276\231\017\021\275\3221\037>\376\362K\2746w\252=\272\\K=\3275\337;\000\363\'<\246Y\363\275\305\203\222\275Y\333\242<\321\020 >}\213>=P`\r\276\n(D\275Q\263\361=\264\206\241=m\213\211\275`\034\316\275<\003\205\275\326I\241\275\375y\301\275<F\331\275\354\263}=\022\265\216<@\374\n\275\"\234\306=\307\316\247=\017\360\321=Oy\226=\236&\345\275\212X\307<\016W\372<R\250\245\275\035~\247\275\213\356/\276\302\352\232<k\027\311\2754\303\222=\272~\266\274?!T\275L\030\347\274\024\327\356=?\037y=\177\377\306\275\247Lg\2756\310\362\275\313\272\032<}]\003=^\362\326:\234(\265<\237y_=-3\352=m{/\275(\200\216\275\225\021\210\275\275`\221=\250\270\017\276\3167\222<\347}>\276Zue=n\315G\275\027\235\331=\336Q\304\275\025L\r\2767\001\035>4\255\214=\233\336\274\275X\320\177=]\206\222\276z\006\002\276}\335\261=;v\225\275Q\364\021\276\276\'9=\375\367\370<\205\037\023==ei=\316\300N=1\260\253=]F.\276z9n=Q\300\307\275\337V\326\274ef\003\276\344O\010\275\nP\264<5lg\276\t\350\004>\271\350\361;\306\027^<\314.\032>\341\235\316\275y%\220\275\200p\200\2759\302\034=\'g0\275u\342\276\274\201\321h;f\007u\276\355,r\275\307[\013>\271:\305\274`\\\226\275r\006\256<\363\327\334\274\211\274e=\327g\177<\207u\037>\017\272\220\275\263E\020>\310;\217\275WIB\276\273\2270\276#%\272\275\340\211m=\022C\005\274\314G\353<\225\027\204\274\241;9\275\215\253\310=\234\376\273=\004\275\005>\234\034\337=\263\234\024>\335\246\\= 1d=\354f\"\275\343\244\245\275\333\221@\274\257l\001>\220\365\217=\022{=\275Z\336d\274}\311\262=W\346O\274Bl\030\276\264\243\330<\363\265\267\274\033\034\244=\177\317\n\276a\366\206<\352\345\016=#\001\217;\345\006*\275\207\010j<Y\326&>RHc\274\227\307\272\275\347\355\273\275\365bn\276%M\375\275dL\370\274\n\221\363\274]8\320=0\361\312=\243\025\'\275\206x\263=p5N\275K\367b\273\251\3017>\031\232\332=\317\353%<Z\234\351\275\272\215q=\350!\274<\327o\312<\351\212\316\275I\376\005=\253=\246\275\323}P<\355(\006\274\027\244C=\231\350\374;m\274\211=\004\303\366\272\242\ns\276\231\323,>\036\013Y\275\357oa=;\263`<\362\317\257=\337\013\312=\030\374\035>]\314\211\275N\034\373\275\320\357\230\274\0106\330\275>\207\217\274\005\014\352\2757A\362=\300\2563>j\271t;\276\324\204=\323w \276\345\014\361;TR\363<6\362^=\300\367\315\274`\277\255\275\210\316\t\276\021[)\274Cuc<\270g\314=\263b2\276~\376\225\275aiz=\233\206\005>\2724\277\275\216\337\263\273\020W\372\275\177F\245\274b\246H\275\306=\243=R\001\221\275 \276\221\275\265>\216\276\306}\362\274\377H\316=x\273\216<\364\307\337\275\311iS\275\377r\362=\225\205[\275e\376\033:__\021\276m\276\203\275<D\272\275\246qo\274J\211\356<\\<\325\2744x\335=\231W\246\275\305\202\004=\227\r\350=]\003 \274X=\333=\204f\014\275r\3534\275H\366\250\275\267\266\264=7\205\315\275e\206=>gs\004\274{Y\035=\267\325\325\275\rat\2753\225O\275\357\264\237\275\373\233\320\274i>\014>\361)\\=>?\337=]\217>=\321Z\001=\341\024X>-\022\t>W\017\304\275]\203\016\2765\"\262<\262\233\343<,\251\223\275\304\353|\275\2721D>\260M\002\275p`\317\274!\201\250<\'e\270\274D\302B\275\035]\361=\210\307\210=\236\247F>5C?=\021\226/\275dpT\274*\222\255=Z\353S\275yIS\272%\036!>2Y\215\275Y\345g>w\363=>\342\254\031\275\326\001\364\274\265\366o\275\342\3726\276\250|}\274&E\026\273\t\221\330=\200\3332>\306\221J>n\214\264\275\0064-<\273f\266\274\010\352M\275\207\225\353\273\027o\314=\312\027\337<\341\247l;\215\261\177\275\032T\213\273\233>\001\276\275\300\177=\037\252T\274\357\0360=\342#\t\274u\013\365\275_\354\177;V?\300;\264\345/=\373\252\211=\0233\313<\361\034\247= \300 <\2108B=6\252\252\275\324\303\304=a\003X\273BY\350=j\234\006>\n*\351=P\013\234\275\254\334\005\274;&\273\274\211!\272\2756\007\310\274\340\323;\275\0369\264<\303\254\253\274F8\247=%\r\267\275\000a\021\275\363\036\337=%\023\025\276\200dy=*\335\036=i&\246=T\375\276\275OK\376=\\w\344=/\365\222\275\003\277\212=\336b\233\275 \005.=\370\013\">\317\200\314=Y\034U;#x\230=\327$$>i\246G;\205B\014\275\245\246\347\274\236\260N=\273\335\242=\341:6\275#$\371\274\232\205 \276\261s\201<yTF=\225F\030<\336Js\274\254\362>=\245f\300=\032\266\353=\334\376\243\274\262-\223\275\177\343\034\275\355a\366\275\360\235\367\273T\'\317\275\337\221}<J\030\022\276\021Fr\275\316,\225\275\340\023\242=\033\020\005>i>\201\275,_\302\275\274@\347\275\330/\252\275\223\346k\275\350\274\250\275(\242\360=P\267/=\025\233\026>\242\207\"\276\246\227\343\274\214\273\036=\351@\n\276\266\352z<\027\203\270<\265\352\375\274!/\341\275f\267!\276@\333f\275 6\360=\206Z\232\275\313\242[>\253>\331=\311\357%=8-\350=\245PB=\367j\032=W\335\333<\032\374\320\274\010\027\217=uOM\275\364T\243\274n.B\276w\217\267=7\342\301\274xsX<\241\234\331=\005\334\372\274\2102\211;]g7\276c\264\377;\211(t=\rX\203=\352x\317=\014L\025\276 \335\350\274\3302!=AT\014\275\214\230L\275\032\231<\275\374\354\236\275p\344\002\276\240=\374\272o\311;\276\032\240j\276\203\3602\275\013\017\014>\"@\273<5@`>2\360\r<\275\333\205=\225\326\223=\030\t\200\275L\2326>X\007K<kf\267\274\3618\366;i\250`\276\017\334y=\002c\206=E\354\203\275\207\326R\2763\237\255=2=?<\003\224?>\022\202\336=\277=9>l_\003\276g\355\356\273\360H\014\275\tk\326\275\2007\311\275\324z\313;\023\236\"\276\316\321\353<B\357\232=A\301\332\274\017\233S\276\253\226\243<\226\226\317=\005a#\276\234\224*<\221\252\370=f6\361\274\016.\222=s\230N\276\241\005\252\274\261\312\220\275~-\241\275\315}\234=V\027\322\275rC\"\275*\030\306\275\374\246\367\275\214\320N>\360\246o=D\035\252=\375\0047=\364F\335<\2469>>B\2239=\020\r\207\275\207\006\325\274*\030\024\275\233#W9\2754\007\275\316H\t>\214x\013\276z\025\201=n\372\227<\034\251\n>m\330\004\275\014\300U=r\232j\275\241\264b\274\\\344\230=\204;L;H+\331=\2005%\275b\274\250\275;\317*=C\352\031\276\235\267E\276\205\242\215=\212O\332\275Y\220\024\275\326\003\030>\234x\214\275\363\232u=\033I<=\346\224\367<\262\305\014\275^rd:|\337\224\274\254\201\257\275\236\233\330<\331\036\024>\037i0=F\324\273=N\020\260<\014\341\355=\273#\033\276w<:\276\364\003\315=7*\222=5\366\'=\330\316\2528~*\260\275\366\355\n\276 \263\032\275\240j\217\274\030\035\355\275\ryt=\327\025\224\275<\032\023\276q\020\345\275\313\330\263\274\343\2262=\277\0344< D\224=\237\365\212=\231s\270=t\320e\275)\213\223\275\351\r\274\275\260w5:\272#,<\3252\303=\177\367\224=\203/4\276\277\347\321\274\373\001\217\275\336\016F\275\205\307H=NZ]\273\244]c>h29\275Nd{\274AH><\272\325t>\034\355\214=N\244\271\273w\375\214=\367;\'=\327\245P>\276L\201=\374\373\245\275\233\2136\276\253\255\340\275_\206\246\275=\273%>\355\373\350=\267`\022>\002\227\373= \333\272<&#\242\275\254T[\275\230\013\242\274\037\215\205\275\000\315\262\275\241\237\265<\367\322\343=\272\233\004\275;\201\326=V\317)<\344\016\337<\005\025\271\275\337\353(\274\300&\346\274Q\302\025\276\334\227\321=\004\336\231\275\377w\213>\006\033\216<I\253>\276\346\325\302<\277_\325=\225\213~=\252z\221:\273h\242\274-`k\275\267J%\276UT\311\275B\320u=\303$\241\275\352_\021\276\ro\034\275W\263\316\273\207N\032\276\246\036>=\271:\231\275\n\260\375=\033\200V=\027\024N\275\030\324B>PV\262\274hJ(\276\341L\002>\214\277\205\274\357\'\025;\207\2757\275\0005\\:ID\213=<\221\340\273<\210\347\273EV\030\274j\262\215=\027x;=\305\013~\274\033\212U<\343\370\261\275P\2206\275\"\305\245\274\303\325r\2754.B=\352\337\206;Xo*>\t\201\326<u\372\311<\3704\037\276\361\215\377\275$J=<\304<\207\275\242\316\005\276\252\326\244\274o=\037>=>\375=\223\210 \276\241qY=\201\253\331\272\353\343\243\275\023\357\217\275\263T!=\231\365Q<5\004\272\274\227f\220<B\343\355\275\226\n-\2759\304{=\276\006\236\275\377\0207\275n\367\205\275\206G\031=,\025\276\274*\037J\275\016\335\360\2752\3476\276\307\220\270\275\311\240\023\276|.6\275\2352\002=r\230E<\014L\345\275jW\244\273\355\311\352=\230+7\274\242\375\207<J\"|\275_Y\373\274KS\267\275\223ZJ=S\226d>\215\273\002\275\220A\025\271e)\200=\344\354\005\275\007\022\252=2\351\222=\021s\223\275w\004\025\2752C\265<yew\275nz\002>\246\264\316\275\247\376/\275\371r\317=\'7\020\274\r\006\366\275,\200\272\275\3558n=\325&\213\275\242\376U=}\030\373<\356\331\247\275k\372\205\275b2\367<\221G\233\275u\230\265\275\206~\267\273)\303\020\274\023\322\377\275?_\215\275x\376\031\276c&\254=\361\222\243\274w\000\300=\274\024\360=\354\312\334\275t7h\274f^`\276\355\n*\275\325u&\276\335^\232=\352\325f\275\036\241\253\274\236\330S\275\250g<\275=\203\373\274\037\204\311\275\203c\014<\212p\231\275\330\257\032>\235\204\262=\250\341\001\276\373o\035>\313\244Y=FV\270\273\264\177\254<\221\000s=G;\204\275\245y\025\275\004Y\205=\254,F\274\2624%\276\304\347\352=Y\317\235=\225\334\314\2750\021\370\2756\223\"=\344\214\n>\366\241)\276\371\"\024\276R\177!\275\365=1>\036\206\232=\007\313\234\273\301\337\362\273E\367\027\276\031G0>\033}\357=4\304\024\276n\264\323\274\035\207Z\274\344\217\242\275oj\273\275P\316\217;W&\352<\351z\253\275\326\233\320\273\021\301\270\275+\013M\274\031,\375<\362\376\024>\003\270\004=\251\206\307\275\007\201\376\27475\237=\"-7\276\321c\213=\007\\\014\275B\213\246;\317\210c\274\331?l\275\245)6\275\025E\277\275\244w#\275KU\362=\357!\341\2755\253/>\013\213b\274\373\313\000\276\277F\257\275\305,\357=d\266\356\274JX\037\276\327\366\243=\240\200\033=\246\302G\275\'\227F\275\320h!\276m\023\301\2738\217j=\013\344%>\375(\265\275\007\331\t\275\031{\357\275\\\317\370=B&\005<F\272!>\034\366\037>9\220\024=^\347\337=\r\225>\276v\221\214\273E\022\277\275\257\334G>\336\261\237<Z\'K=^8\212=\241Q\214=\223jE>\333m\373=\037\255\032=\343\355\334:_1\271=\354\0237=t{x\275O\025\225\274\367/\316\275\331\372\223\274I\036\010=\270\017\315;\354\352\342;\316\253\212\275j\376\325<\332a\250=\351\003\346=\022\257.>\035\303%\275Y)\277\275\214z\020=h\226\217<?\014v\275\240\211t=y\270.\275z\023\225=8\001\203=f;\243\275\016\315\310=\000\210\337=h/\371=\224\366\302<\274\267~\276\344\362\'>\024\210\316=\214\020\323\275\356\177^=;-==G\374\256=Pf\344<\254L\313\275\230;\322\275t\364\221=\241\013\000\276(;\235<\344.#\276\275\257\031\276\\C\035\275\025rp\275p\210\273\275\035\202z=\231\376(=\347(\305\2757-=>\371Q\207=z\343!>\306\313\222\275\251\275\226=\327\204\223\275J\276\031\276\274\375\230\275\314H\324\2748\220\210\276$\244\240\275\207\"\310\274\006~\344<\300\013\253=\255\322\221=h>t\275(\362{<\007\336\365<\204\240j\273QC\252\275#\004\346<$\203\236=\273\314\322\275\250\233\370\274$\257l\275\037@\327=\320)\305\274I\016i;\177\374&\275v\003W>7\260\354=9\250a\275F\304A\275c_8\275I\364\"\276q\354\023\275\262\226^<\246\260\333<.\364\004\275\344\273\020\276M\335\2648\374r\324<\n\\\315\276+\254\251=\337\252]\275\002\330\231=j[\221\275{\316\357=\005\225\373<\262K\351\275J\237u=\373\026\341=m\306\222\2751\275J\276\0000\222\274\267\177\235=Q\356.;x\262\235\275_Ik\275\004\260\306\275\211%\270;b\021\311\275\255\344\024=\220\271\256=\272/-\276\364L\335\275iv\366\274\371y\323\273F\335\241\273\022H&\275T\227\313\275\376\266f<;\226\321\275u\203\342\274 \352\225\274\253\232\362\274}\235\024\276BH\364\274e\342\313<\010\000K=\221\340;\275\314\353\237\275y\314o\276\027\022\240<R}\252\275Kv\270\275\327-\022\276\314()>d\032\003>J\363d<O\275\274=\227Y\030\273\361.\234\275\374\374\251\275V\036\342\274\330\207\201\275\345\237\010=\024\2341>\r\231P>2\245\006\276\n\201\214\275p\246+=\235P\314\275\202\372\265=\274\260\247=jG\350<\210\251\254\275if.>\026\030\202\275F\201S\275\210j\034\274\3465\226\276\366y\311<l\317L=\002\n\020\275\016\302\331=\\}\207\274\313\220a\275\245q\366\274\\\213m\274a\006\325\274\324o\357=*\242\317=%\260\316\274\336\266\203=\000\'w=U\364D<\324$\334=\341hO=R\0240\275b\310\257=\243O<>\201\014u\275\256P\373<\002o[\276\327\r\231=\333\311\353;5\331#>\320\307c\275q\251\251\274\275\0143\276v6\211\275\211\211\254\275\342\322,\275E\271\222<\243\261\225=\223\303[\275N\202\000\276]\277]\275\243jB\276Z\320+>|\266\313=FT\266=V\022\275\275`t\331=\253\376\207\274\345\300\244\274=\007\324=FY\007\276\364\247\263\275SeT>u\213\177<d\3251\275\225\024X\275\350\325\022>\256R\251=\323\032@\275|\225F=\244?\353<m*\345\275_\321\243\274\023B\312=\016\001\205\275q\2238=\274\361\227\275B\214\350=\246\300N=h\207\364\275\023N\357=\017Q\031\275\310?\336\275;d\017\275\234\237\302\2755R\325\274x\210\243<\n\341\022=\371\230t=\301VN=\243\007\274=\034\364A>\321\364i\275\024\t\200<\000\210\211=\273x\036\276dsa=\023\305\375\275\344lq=D\003\020\276\300\036\357=\336\2067= \322:=\345*G<\324\224G\276\360}\277\275\024\321\335\274\312\351\003>\373\210\024>\203\206\022\276\365\276 \275\253\000\215\275\367mA\275bw\304\275\242\376\026\276W|u=g4\320\275/v\006;G1\016\276f\301\301\275\370\364\212\275Z\271\232\274\027\255\022\276(\201 \276\316l\373\275J\372\027=\233Gn\276\321\232\022\276\370sX\274AQm>dl\273=\001\002\021\276\207\236+>\227\302\210=H\036\314\274h\366\016\276\351\340\266=k\246\355=\002\231\246=t((=?\345k\275\010\025\'\274SG\203<\240\351-\275\251\275\337<>\3779\275\231\000\037<3\336\022<\014m\270=[\204\232=\240B\373=\322\014\n=\204Va=\204\360\252=\322\253\n>x\031\225\275u\352\224\276\3363\322=T\304\005=\244\312\032\276\251\006\353\274!G\267=+\276\t;\017\335\222=\234\231\253\275\250\370\223\275\312\250\004>0F(=1\222\325=\213X\n=\213@8\276\264z\244\275\2671K=\341\000\225<\252\r\317\274+\035\373<\334\233\204=\266X\267\275\274\326\335\274Z\243\'\275\014\272\206\275w;\272=K\264\320\2754\r\372</\277\016\275f#y=0\303*=\301\366\305=\355\332P=\025\n\222\274\364b\257\275\020`\007\274\247\272\326<\372l\006=\276\370s=1\275\376\275X\002\\\276\233\037\247\275\363\025\243\275w<\334=\364\335\202=\344;y\275St\212\275\t\306\255\274\227\252g=\2652\303=\335\371\313<\355|J\275\244\371\343<A\256\256<V\210&\276ZK\373=_\245\026\276\2032Z\275\300,5\274&\230\006>\301u\177=\271.\261<\364\022u\275\277y\315\275\346\355\301\275\035\202\034>\035\032h\275\257h}=v\325\226=\2620\223\271\252\002\374=\322\023\277\274n\305\312\275\352\257+=X\375>\275\324\343c\275T\265\031\275Q\006\363\275X\204\375;G\031\246\275\333\357\024<G\271u>\207\350\025\275\207\233B\275\215gE=\300\312O\274\2018\345<\203\333\251\274\350b\251\275\016\2065=\360\312\226\275\333\245\006=\254\334\230=M\320\"\275\270\262\265=!!\007\276do\273;\306M\007>\203\303\022\275\205\311\002<-\361\211<\313\260\223\275s\300]\275\323\216\275\275\007\n\321=\224\2312\275jL\022>D\307\032>\025\003\034\276UV\022=\214\017\225\275\'\232\232=\340\033\240\275a_\004\276\357o\316<\031\003.\272&\326E;\233W(\275Q\366\243\274&t*>k\006\224<\350U\317=\214\330\214=w\360\004\274\344\3276\275K\265\302\274O\366A>o?\231=aHv=\274\226\322\275Y,]\275-Ro=\tL<\276\003L\014\276XhB\276t!\013\275\033\300Z=\\\022-<Is#<\247\362\212=\233\036\270\275\314Y\344\273\372Z\266\275V\266\037\275\201d\007\273W\263\017=v\216\275=\241 \243=\354\243\024>\200\277\235\275\372\266Y\274\2531g={\333a\275\333\235\307=&\277\362\275\323\265<\274\005v\250;\213\026\201\275\020\266\236\274\216\351\217==\307&<!\273\t\275!\355k\275\375h.\274\246A\003\276W\272!\276\365\010\266\274\353n+>\327[S\275HR\355\273\201,2>\257\344\313\274\021\025\352<\205\000\000=g\006\221\275?\312\001>W\267\026<\237Y\035\276bwN\276\267\267\202\276\"\025\205\275\230\266\243=\327\312\301\273\t\003\001=P7\022\276G\003\357\274|\301\330\275\030H\300<{\363\017\275S\n\345<9\322|=\314;\">FA\217\275f\224\373\275l?\275=\230\022\n\273o\330\217\275\352\n==\220a>=\376W\n\2761\263\205=\027Gr\276\332q\260=)\234\301\274\001ub\2751\314\315=P\344C\275\202\n\203=0\331\364\274\2051\253<,\004\270\275\232\356\266=\013\362\274=\007m\337\273\244\345\312<\216,\315\275\3157\266\275D\005N=\032\236\272\274\033\316<\275\250\242\014>r:\250\275\225\320\023\276.i\251\275\266w\224\2756\005\256=\277\222O\275\014Ay=S\364\001>\\\246\350<\231\301\310\275o\201\362<\306\316\256=\r\2143>\341\236\366\273\305\020(\275X>\365=1$\337\275\324\225\317\275\017*\013>]\313\303\275yP\326;w\356\273=\000 3\275\275\200\022\276\357\330O=\313J\324\274 >\334\275V\350\307\275\300\277\270\275S\307N>\365\211\333=x~ >\332\221\376\275@Q\017\2766\364q>E!o\275\247\300?=e\223l\275qK\274=\227\324\231\275\034\340\313=\230\212\311\275\306\255\002>h.\303\274\364>\200=#\314\357\275x\247^=\227-$=%\212%<\345\345\306\275\3716`\275\332\275\';\232D\303\274 \270O<BJ\215\275\367\002g=\247\312\331=\t3\302=_\337_>\251_\001\276\"\021\036>,\206\031\275\332\272\241=l\2007\275\244\3033=3$\316<4\022\002>y\335\227\275m8\335=H\3338=i\262K=\037\342\007>i\250\020>\005z,\275W\031\271\275\240:\266\275\324 \266\27592,9 \006\273<`\267\374<\271\302\032\275\271\265#\276\354\"\360\274\215\010\334:/i\340=i\273\031\274&\300O\274\246\350\353\275\252\003\311=\370\336\244=\327\033\330=\254\346B\276\303\010\013\276\021\344\025\275\340\021\003\275\356\262\030;\357\251\003=\203\323*\276_\037\262\275\320\236\027\276I\347\322\274S\377\222>3o8>\316\n\375=D\014\335=\320\002?=y\344I\273\264\344-\275e\344\036\276\270/i=\374\013)\274\237\373\201\275\350\352\320\275\253\014\231:\355}S=\023\220<\276\310w\177=\216\366\013\276\272\037\035\276\304\377_\275PS\265\275\177*\305;\246<\321<\354|\200=\357\002\026=B\231\220=\257d7\275d\212\260\274\323\272Q>\361\210\355\274\"\304\014>t\312\371\275\322\360\244=\221\242\034=AT\000\272%3\266\275\036\362V\275<\213\261\275-_>\276\323\032\031;\030!\356\274\022\372\360\275\264\t\261\275g\311\303\271\250\321x\2756\031\300\274\270\200\032=WHT=B\255?=\026\220x\275\251<\230\275\336\021\216\275\3160\231<\223:\253\275E\314\037=.\217\266\275KHJ=8>\231=-0\321=\006\341\037=\024\303\250=n\364\002>\014\0146>\205\332\016\276\365J\355\274\276\207\206\275\210hX;k\034X\275\336\205\302=\027\320\324=\240\217\267\273W\311\365<\246\024\367=\277\210\330=nXo\276\356\224\033\273K=\n=j\205>\276\255\220\372\275\316\n\250\275\352su\274\360\300\241\275p\300i=\321>J\275=i\330\275>\274\251\275n\250\343\275\261\031\264\274\304\240g>\345\006\023=\3744w>\207\325I=\340a.>]\267\010>\006W\270=\230\021u\275\023\347\026\274\244\232+=\322|\220=\235\034\t>\020H{\275\034\027\016=d\227\024>Dt\254\2753\303@\274\332HM>FEb=\023K?>\373\363\357=\0039S\276\265\231\321\274\374\036\225\275\274\006\344\274\025$h=\357e\227<\322\357\275=\262\373\350=\375\352)>\212`\374\275f2\262\274Wgz=C\344\277=\314 \027\276/\036\216;\275\r\363=\275s\235<\261\001\371\275\003\227\216\273R\247&>\000\200\202\275\324p\016\276\312\035v\2765{\347;d\374\343;\326n\374=\316\206\240=\263\362\001\276\226P\263\273:\036\214={\335\000\275\355\274\225<^\365\255\2752\342j\273\356\253\325=\017\207\226\275\361\020\001>\350R\345<\'e\334<m$\212\275\030Z\354=\300\310\354\275xv\n>\356\001S\276i\212&\274u\330\002\276\335n\355=|\214\241\272\024o\033=@1\311\275\024Mg=\307\016\010=\340\210\214=\265\330\333<aL\336\274\314&\033\275\034E\322\274\023\265[\275\262\307\266=p<\371=\347\t\330\275yA\336<\016x\014\276)\005\017=\344\375\033\275\374\004\245\273\264\356\000\276-J\032<?\303\211<\201^v\274\333\342\t=\203~\030\276\321y\021>N\260\200\275\016\251\261\275\247\n\317\275m\242\322\2750^R\275]\275(=\243/\300\275W*\013<\246G\006\274=#\364;M*\262==\313\330\275\t\025\336\275%+\004\275\002|\333<\377(+=,\324e=7\216\027>\n\277q\275\364\037\252\274\r\330o=nQ\244\274\337\245\306\275\216\014\210\275WM\210<\300\260D\276\340\357>\275\274\030!=\225\3756>:\205\300\275\353.7\275{\370\272\275\302\021\306\275/%\325\274\005*\200\275\360\032Y\273\343\365\352;\\\270\310=\270\'l\276\021\342\r>\034Q\240=\245C\260\275\226\205\203=\0175)\276\226\215\210=D\3576\275\3377S\276\256\020$=\336\036\234\275t\230\357\274\352\334\355<\002\004\211<\376M\210<$\373J=gg\354\275\002\252\267\275\312\223\270=\326\274\016\274^_\342\273\352\261\000=\350\271m>eD\246:g\256T\274U\346G=`L\206\274q/\305\275\273\020S>\353\265\223\275\235\263\373\275u[\317<\234\205\014>-\260\\\276\270\365\t\276\352\227\013=\206\014\n\275X\213\231=\277\262\256\275L\212h\274E\304B<Sf\230=\377\307\230=\261N3\276\363\306\211=\226\311\357;(.\217\275\362F\230\275\362\'5>\236\177V>\262\212P:\275\206\360\2758\252\311\274\305=\343;Q\001Z<\307\321\362=\321\356\010>S\3143\275\337d\272=\200\000\036={z\362\272\262\204\002\276\2501\027\276\007\002\341\275o\240]> d\204\275*\325\232;\035\352\t>\357Z\373;5\022\363\274\226S\342\274\314\272q\274\247\364\366=~\216b\275\375\202\317\273\302\300\301;\014\275]\275\t%\272\274\311\221^<Yw#\276\303Q\206<Q\032p\275~[\030=u\026\247\275\013\004\313=zz\353\275\277\331\033>\2760\205\2750\307(=\343\033\363\275\244\023\007\276\323\235i\275\241\325\330=#\210y\274\334\337X\275j\351\236>\214\370\007==5\242\276\207E\253=\246\213\014\275\246\276\230\274<zx=\036\235\365=\260f1\276~7\257\2755\030S>\306\244\263\275j%\255\275\200\314R>\247\230\r<LY\314=\243\307,>\034\367\017\2750\245\256\275\216n\372\274&\270%\276z\311\323\273\257+\237<\206\301L\275|\306:>Z\261h\275:\3079>\3734\360<\301\2177>\227\345)\276NR\032\275j\235m\276_Z@<\363\270\211>>\335\023\274&\373\220=[\300\355\275\242\265\005=\345\350\314\275.\312\363\275\322\223\362\274\327\013\211\275DQ\361\274H\2563=\245\344\261\274`\312\207\275\356q\204>\265\305.\276\314\344\372=\250\320\274<\247ga\275B\252Y\276q\313\331=b\346\333=\341\017:\276T<K;K\372o=x\334\310\275\271a\016>B\254{\275\005\302S=\210\034\254\275\214\256\035\276\267\213\262\273B\355\024\273[\230\375\275~\276\264\275\241c_;0>l\276\234\3627\273\215\335k=\0168\273\274\333\177\022<o\263\002>$\370\t<\035E\310\275\030\010S>~A\253\275\252\232l\273\204\273\031>\226\201\326=\014\035o\275\373\227\251;?W\226\275\270\270&=\312t\002=fE\330\275\344\005s\275:|\n\275j_\356<Y\215\227\275P\264H=\243\310p\275$\024\264\274W\267\000\276\201q\220;6\006\205\275%\030\340\275\313\274\033\275ty\321\275\262N\305\273\225R\336\2737j\020>\367I\246=O\r\020=6_)>\206\034\275=\231gp\275RW\260=$\034\210>\350\2465<p^\367\275q^\372\275\r\361\003\274p\304_\274\001\001\023=\272\223\357=\314\035\370\274\312\364\023>\315\027,>3\372\257=+\242\"\275\327\371\332=\244.\335\275\201\245q=\010\034$\276_\267\370=\177@\021<,^\203\274\313]\031>\364!\311\274M\215\321<\216\247\312=\330\3730=\343\305\r\276\002ol\275\361B\230=\366\3152\276\205\232\214\275 6\211<\262\"0<M\035\002\274\360\262\234<\017\266\251\274\036\345\315<\255\374n\275\375\214\360=Y;}=\311W\306\274\002)\202\273\250\306\222=\327\013\272<\206$\331\274\251\010\223=\270\247\027\275:J~=Y(\250\275\247\216\216<\271r>\274\272I\035\275\305~\265=\315\311Y=\016i\341\274\035\027!\276\313Q\227;\022\371,<l\240\212=\254\365K=\305w\352\275\215\244{8@\346\022=%;\353\273g\177\004=z\037\037\275H\267\020\2752\200\016>\333\345\311=c\014\267\2758\203c>\204q\004>\301\260\206<k3G>\352\370\321<4%\265\275\307Q1>\2560R=\025a\343\275<z\254\274\013\337!\274\222\250X<\021\246\352\275e\203#;1\217\036\276\300\201\001>\254\031\230\275\323\034\t>W\340%=\nu\375=/\336\235=$?U\275\0264h=Y[\333\275D-\277\274\211\274\371\274P\244l\274\217/\016\275\374\307\321=Gq\324=\000\303\215=\315\242\322;\3271.\275h\340\201\275Q\324N\2752r\022\276\340:\247=\336\231\266\275\352\n\206\275\266\025\341\275\370\212=>\316\003\246\275 R\r\276\374\347\220\275#\2028\276\376\325\347<\332-\237\274P\347\351\275\303\257\235\274\371M\314\275\345\327Y\275XS$\276\271d\325\274\033\342S=\347\333\024\276\335\001\t\275 \223\310\275z\323\365\275\035\261f>\036s\241\275\212\225\037=p\235\310=\373\320\356\274k\261\344=\3546\365=f\327\262\275\267h,=-\222\212\275\032i\237\275J\202\310\275\027\025(>\220\316\347=\006\321O\276\355A\274\275\nc]\2767#\206\275\320\225+=*\214\302\275v\315\223=s\316m=\"\303\274=\261\340\013\274\213N\236=\252\260\211=G\020a:j\367\022>\347\005$>i\241\250\275\204p\017<\216\037\262\275(\232Y\274\304\213\221\275\017~6>\245\207\327=\200\034\254=\202\021[=\024\375\366=R1\024>\374\341\013>\036\260j\275\277\203P\276\337,\273\274\004V\212\273v\320\322\274f\302\275=2\217\204\274\324*\276=\362\327\255\275\224\000\265\275B\202-=<\317\200=\213\374\001\275\336\341v\273\334D\264=\017E|\276\033\261J=\034\236\001=\327=\256=\355J\343\275\252\370\352\2752\332j;\254\2151>\005\215\224=]c\274\275\034\241\215=\341C\t>\224E9\275\035\370m=#I8\276\373C\021\271Z\t\231<nF\023<\307p\307\275\014\rJ>\377\013D>\321\343\276=\250\302\357<)l\255\274\341\312\245<\310\305&>\254\307\225\273Z\3226\275\224\241\320\275\356Xr=\237\330\333\274\000\261\335\275\341\203\256\276\207J\275=\275\022(>\037\340Q=\377U\220>\373\243\224\275-<>\275\264X\223\274\373N\232\273\336X&\275\354\300\023\274[\006\316=\324\232\002\275\366$\254=\360\370\330\274\\_\003\276\210a\211=\2058\216<\017\246 \275\331\3704\275\262\333\013\276\031\217)<G\271\007= \360\031\274\023\267U\276\234\t\007=\325\253\372=\205\026\335=\202i\026\276\210\351\032\276\270\032\035=1L\263=e\307\340=\3206\270\274\006\022\t\275\207e\200<\231\224\327:\212\036\342\274/9s\275\250\024\327;uu\n\276\272h\327\2753\021V<\270\3502>T\372r=\254\201\256=\336J\267\275>\3771\275\216\014\317\275z\037R\276.\010\206=z\274\317=8\242G\276\327\304\274\275\3177\317\275\326\207\227\273_\2031\275()\200=oH\247\275o\362\242\275\332n\271=DL\264<\2172\032\276\351\373\264\275\247\016(<\334)C\275T\376t\275\024\220\322\275v{\333\275+*\037>\223\233\237;%\205\">\325S\206;\3356\207\275\307h&\276\267P\357;F\334Y<\344B\r>\022\325\321<A\240\024\274KQ\351\275\357\256\262\275n\204/=\014C\351=3\227\010=X\224\034\275\246\264\366\274\027\332Y\275\347\245\352\275^\225\303\274\270)\207\275\321\374\006=\371\210\237\275\004\215;\273\251e\272\275\3201\312=t>\347\274_U\222=\017\362\333\275\267\005\210=s\233\216\274\n\217\214=0?\361=\024g\264=\017\021>>%\331\224=\225\005\213=r\331\027\274/\310+=\003\025%<\342T\034\276*\000\000\276\021w\236\275\323\336\034\276O\366<\274\347\231\034\275\363*#\275\\_E\276]\271?>\333$\274=Y\322\251\275\"D\230\275\342\270\375=\343V\270=\275\333Z\276\263 \223=\273\247\207=T\310\223=\327S}<\036\316\023\275B\374\237\274\304\217\211\275w(\253=\322\003U\276[\260\245=;\345\203=\273\217\004<\006\325?\275\346\342\t\276\312\260X\275\036\034&<S\t)\276i\364\264=m\310\341\2745`\021\275z*\340=\003<\267\275D\361\321\275\024\310\002>V\373\035\272L\341\235=\307\345\305\2753\t}\276<\225\215\275\267\201H<-\016\037\276\233\272\031\275\304\006F>\232\227\347=\333\3563\275G\267\305\275\366\307\324;\377\367\235<?\202\215\275\034\"\032>%d\217=\236U\257=\005\347\310\275H\217\312\275\"\325\310\275\013S\027\276\316\335\"\275gXV\274g\026\237\274n+B\276\320+\241\274*,\375=\346c\334=\260xK\275\265\223\273\275\336\366C>6t\"\276\271G\013;\273\241A=\256H==.\322\000>/\256\324\274#}\t>$\007\267=\346\037\253\275\030\025\252\275Ze\002\276wBu\274\210\010\177=\032gn\275\210Z5>Y\205H\275\277/\276\274-\303\225<\001\276:=\311\225{\275j\222\316\274&E\241\275\177\035\010=\302\347\372\274n\336\016\276f\320=<\201Z\310< (C\274\350\323k;\337\'\221<\322\207\314<\333\r\240\275h\022^=d\271<\276<\230\"=\030\327o\274\031\261\303\275I\325\247\275&\214\215\276\262:\037>\003\263\001\276@\330\026\276A\177m\275\003\216 >\226\005O>\265|s>\005\275\312<H\225\277\275w\360\202\276w\250\352<\201F\246=\021\003\r\275!\330\244\272g\343\224\275\242\251\324=\364S\251\274\350\215\244=J.\035\276\t)\223=s\032\253\275\213\350\262\275\237~\251=\241\320\310=\002\332\213=J\371P\275\351_\365\275\206\312?\276X\003;\275\306\000\035\276\341\003\314\274\344?\355\274L+\347\275\3722\035\276?\263\256:*\370\364\273\322\247`=Pp\232>8\221\306=b\277\274\275\343\256\211\276\201\246w=\206*\232<]B\352<\350\n\247=/\016\225=\351\262}=\247\257\024\274\016\224\032\276b\304\252=\036H\371\275\225\312\377=*\022\254\275)\004\326\2740P\272\275\312\371\226=\364\325K=\333m6\275\310s\374\275E\352\301<{`W=\025\336\251\275\261\211\020\275\345\316\342\275{u\205\272^\324\004>\215\273{=\010\330\274=x\222y=(\304\021=\306M\212\275\243\211\260<6a@\274\013bq\2760\311\013;&m\276\275\355;Q\275\336$K=o\330\317\274\247\201\306=\343j\001=~\370\347=\273\250!\274\'u6\276DP\333\275\361A\301<\203>%=\237\226J\275:\026\204<T\231W\276{G\n\275\2031\036>\010\211Q<\352\372\305<\306\364\333\274\356\335\025\276\233\232\r=/\351|\274\377\324\255\275\202\224\361\274\301Q\262\275\250\021\370\274\000\246\010\276j\375\231<\340\366\250<o\026V=\241\330\206=\242\214\256=!\2513>\257\302\225\275\376\2724>\223\277\205=\020\001:\275\254=\273=\303\326\205=\034\232\220\275\233\2505\276=\364\\\275\310K\354\275\016\220\346=\202\341\n=9\233%\276\025Fe<\277\217\274<\231\374S\275~\257L>\340\300B\275=9=\275\245;I<\001\335\005=\035\213\315\272\353\273\024\275<\311\223\275\365S\000\276\353YN\276\224\207\216\275=#\322=cE\233\275@9,>L<\262=\240\353\025>E1\210\275\243\202\261\274\007\230s=\243\014;=\\\034G<\217\232\340=2\020X\274X\351;=B\022\272=Ed\350;z\345\223=\326\025\251<\364\004\210\275\274\230\277\274\337\251x=LrG\273\370\243\320\274)/b\275p\230$>\324l\006\275e\345\337=\327m9>\003i\036\275\234o\211>d\000\274<\201\324\005\276\340r\024\276\0302\330\275h\036\036=\307\363\224\274\327I\275=\023\035\264\273(q\200=\204\201\273\275\2053H\275\266\303\311=D\217\005>x7\364\275Hy\025>\327\360\027\276A\247]\276\233\220\264=\300?\344=\351B\032=c,\355\275&\325\316=,[\266=y\226\004\274#\374\242\274ZA\t\2768n\270;p\351\332\275\232d\221\275-\245\303\275q\021\346<\035\022\371\275\275F\215=\327E\216\2747\366\363;5\231K\275\271&\322\274\020S\340\275\274\244C\275t\026\270;\200\342\374=\252\361\177\275\253y\343=\230e\363\275\277s\272=\t\276\010>z\321B>\177\034$=\\G\353=(~d\276\345o(\2733M\337<hs\264=\265\025\025\276)_\246<\204E\247\274`eK\274PE5\276\237\304l=\311\311\347\274\267\326\013>ZI+>;\343\003>\242\360i\276\215\255\000;,\225\313<9\004\262\275<X\247<\271\341/\275\204\245\252=\345j\367\275\336}\234=m\210\274=7\267O\275\365f\220\275y|L=\265\010Z=\312G\275\274\316\315\367\275h\357\250\275\006\030\273\274Ym\203=\335&\006=`\337\\=d-I\276\371\374\033=}e\314\275+\0141=k\316\205\275\375k\243<\220\306\255\272\347<\r\276\033h\006<\030\326\366=\250k]=\330\302I\275\272\272\352=c9\034\276\334\034\304\275\360`\254<\340\025W>\207\332\312=%\306R<\212i\321=\034\330\255<{\3511;\000\'^>#\271\004\276\327[\237=\363\003\217=D\035\022\274S\210f\275\266=%>0\316\375<~\272\247<0\255\220=\000^\255<\317\201\353;X]\340\275\237\377\036>\255\037*=n\223)\275G\353e\2752[\310\275\207k\236=\345\000_<\253h$\275\211\025\205=\216\323r\275D\236^\275\242:\216\275\030\374u\275}\227\364=\253u\216\274\276\377\006>\305\010\323\275\033n<=\355\360\313\275nv\027\274\245\345\254=\311\317\324<\237\033\372=.,\322\274C\025M=\362\021\326<\261\354a\275F\273\024>Q0\215=\346\"\216\275s\034\203\275\367\271m\275\212\026\232\275\264\366W\275\266\337\306=\023\007\367=\344R\335\274\333\301\325\273U\257\207=\340\363Z=\370\312\\>\213\223\233\275\027(\371\275\352F\260:\213+\024<\244\261\204=\365\325o=\311\312\n\274\356\226\356=\240\203\206<\321\346\357=\220D\005\274\205\375\270\275 f\340\275T\022\221=\254\370\274\274)\210\005\2769\236\254\274W9\017=i\250\026>\t\323\352\2752\321Y=\253\372\253<\361)2>~\250~=\240\036\245=\3566s\275\351\252\001\276\367H\303\275\354\\\315=\250\377\201\275\323\2334>\036\240x\274j\350\265\274\231[k\275\027Ol>\343BM=\342Z\365\275\330\030\274\275\215H\016>*\035z=\220\346S=\327\372\222=\354\246a<\005\231+>\257\311!\275l$\353\275\374W\310\275x\241\371:\340Q\247\275\270,\221\275:Nl=xq\316=Q\376%>\240\242\352\275\017\3724=\243~\347\2748\341\330\275\277\215\270\273\263\226\361\275\216\"9>(\313\006\276\003kr\275~\366\033\276\224\007\277=\376\321:\275\"\336+\276\212\270 \276&\201)=d\244k\275\344d\230=z?\002\274\363\004S\275\361R\244\275^\306\007\276+M\210\275\267\210\272\273\366\241\200\275\245\325|\275\245\341\244=\377\343\002>1\027-=p&N\276\322\0336>kP\336<\240\342\010\276sg\244\275\374\247\374=\255\003\232<\251\367\267<\242\330\217<\325b5\276\327\275\323<\254`\346=\3631\317\275\246\230E=\"\337H\275\013g\037\276f\333\213\275\346\351\303\275r|\261\275\270)#\275\t\221\332\273\352\374\327\275\230`\371=\031a\210=w\213\217<L\204\360=\373\274\006>\032\300\225<\201\277\035\2765\335\213\275\232\007)=\013\004`\276\377\303\006\275psO\275H\217j\275\301\317D\275\244sE\275\357-\313\275,\370\206=l\204w\275\242Xr\272\034\360\331=\255nT=m\3174>\375\306\331\273\316KL\275\260}e=[\004->Bs\374=NwH\275\215\t\037\276\263z\243=\016\341;\275I\016\274\275\030\020\251\275\371\311\330\275e\211\032\273g\310h=\345z\305\275\344\014\205\276\024\254\001>\" \253=C\325e\275\007\222\274\275%\335\255<\245lJ\276\355>L\275\313k\311<H\373\231\273\013\365\343;\0252\264\274\242\333\214\275\214\263*=\341j\002\276\021\031\333\275\216\020\353\275do\333\275|\320W\275Y\212\262=\257\233\370=\355L\256=Z0<=A\231A<\317\367\352<\271\024\251\275\0266V\274?`\030=^\260\004\275>\256\022>\277\221\250\275\363pu\276\\$\010\275\t\325\264=\220*\354<g`\313\275\362\0165:\254\220{>,\250\327=\372\257\235\273{D\223\274\215\020\017=]\tO\276U=\031>H\237\316\275h\241\321<\027v|=\265\\\265\275_\023\367=\274\0047\274\217\334\261\275\332*\356=\300AP=2\346\255<\376*\">\026b\335;G\217/\276\364\323\307=\346O\223<\226\322\035\274Ap\303=\334\336.\275\tc\225\276~\252\371=\267b\316\275+\353&>\223}H\273\024*\276=j\264\255\274\322\322\200\274\364\332\273=1\212\213= \340\t\275\022.\356=Y\232d<\333\3373\276\312*\353\274\275\340\320\275\266(\354\275\037\206\031\274\010\267\027=\017\232)\273\006X\361\275pp\273\274\r\014`\275\350\361\032>`\207\t>\272t\277=:\2154\274[\0359\276\017\003\303\275\312\350\t=\207\254\234<7\246\226<\024\263\253\273l/\311\275(\371\306\275,#\221=\2264\225\275\365\360E>\241\177\357<o\374M\274\352\217b\276\223\357\352=\014\342\257=\324~\251\275\275\262\263<\003Y\245\276\366=\r>-T\201\2749\032\344\275\222\373\027\275q\256\231\274\227\370\030\276\037\372U>\303\314\010\276\000|\010>\231\211\202\275\300\345M=%I2>\232\343\034\276\253\224\252\275\224\2755\274\273\331\305\275&e\036;P\2400=\364\300\312\275o\345\326\275\302B\026=\271v\314=H\255\360=\3632\023=\242\002\023\274\301\341)>p(\216\275|\236/>\'J\200=\273\036\t; Z\241\275d,W=nn\322\2757\235T=\311\212\240\275\240\360\254=\337\274\217\275\020\214\002\2764\030\311<0\007\203\275\343\003@=\3623\315=\240`\316;\304S\275=:\225\344<\265\232\234\273\354\236c\275\206\332\373\275\374\347\376\275\351\337\030=\375\213&\275\302\320q<\202L!\275\031\351\342=\363\303%=\305\253W=Q4\t=\376\331r<K\303\320\275%\256\010=;\236\317=\221\271W\275\276\211V\276\027\344\024\2762\207\205=\335V\000>\333\203\310=\276\335\326=W(\010>G\t\270\275Hb\322\274/\373_\275\261G\201=dC\344\275R*\272\275\034\2511\275a\207\n>\002\312\303\273q\n\253=\262\310\241=\326\264\213<\227&\'\275\272\341\311<\027\233J\274)F\327=:u\006\276\217W\277=\272\031B\275\001\261\032=\224wu=h\2647\275h3 \275\345_n\274\254\275\004\274\326^\021\276?p\205=f(2>GPk=\204m\005>k\222\362=\343!\022>K-f\275B\000\002>\024\303\206\275\033C\021\275x\216n\2763\335\213\275D\202\344<\243\313\022\276\360\ry<\315\306+\275\250\320\017\276\002j\243=\262\233\273\275\242&\247=\257p9\273\320\334e\276\322p\031>\356\215\266\275^\276V>\214\241\002\2765\347\321\275\262\3500\275\305\363\365=:\370\014>\344\332\251=_\334(\275\302\000\'>\321Al=:\3611\276\247!R\275\250\272\345=\027}f>\237\310\360<\243\306(=k\320G=rD<\272\354$\330\275\220\274\037\276\3468\001\275\314\317\200\275d\000\030=\303,o<\313\371\001\275m\356\240\275Q\336\017\276\233i\365=!\364\031;\0146\025=\202L\312=\266\257\330=\363\311\240\275r[\003<\215`G=k\324#\275\230\300`=\344\373\"\275\342\233Z<Gz\000=\361\rj=v;5>\331M\036\275\204\t\313\274)h\213= z\276=\010L\323=\027\215^=\260\322\232\275.\367\035\276k\263%>\344y\343\274.aa\275\337)\017<\305\024\035>5\261\014\276\262\333\271\275\251Q3=\322\017;\276xcq\275\346\317E\274\0170\247=\026\344l\275\366\024\231=\242\014\270=\276\376\255=\267\0057\275a}\032\276\177\255f=`\325\r\273W=\346=g\271\323\273dsA=\177{\252\273\223\010\005\275\t\312\177\276\324P\222=\231`I<@\210\001=\330\242\307=\224\231\245=l\262\210=\027p_=\017}\035\276%@x\276\'\377\370=Nq\242;\222\304<<\233\362\004\275\301\345}\275\335%A<7\215\247=\021\356\372<\336-\203\275~#\376=\373\275\t;\0218\200=\373\251\032<\342\017\007<P?\330\275\215W\372=\202N)\276\014#D\273\252Z\300\275\036\250\367\274\310O7>\002\224\254=\257d\237\275\213j\210\2748\245\"\276\005\274\246\275\204I=\274H\252\273\274&q\362=\220-->\022\027\207\275\221\".<\377LI\275H\315w\275\340I\362\274\344,\021=\362\352~<\343\241\363\274l\3739=YY/\275P\220\002\275\211\211g\2752\314\021\276:\355 \275  5\275\032\032\037\275\2640b=\334\300\016\276Pz\002=\321n\226\274:\242\n>\377\034c=\273\n\261\274\014\017~=R\034[\275^\341\324\275\3549\001\276\320h\355\275?\257\226=j4\032\275q\214>\275)\017\014=@\220\214=\"u\n=\034 \033\276Q\356%\275\251\037\306=\177\301h=\273b\314\274\270\253<=\013\272<\275/\303\274=?H4\275^\231\212=t\327\002>\273\374\270\275P\372\205\275\034~\360=1\230\260=Q\346\244;\300\364\330=+\177x<+\005#>\320`5\276\216\375\361<\216r=\275\213b\022>\007c\204=\260\242D=O\\5=\303\257\320\275\036\360\3357\375.\006\276\000\341\376\275\013\216\267<Sg\225:8\323\023>n\262\331\275\314H\001=\346\253A=\017r+>\325\200\324=k1\206=\311I!\276-\301\244=\003O\271\275\307\027o\275I\375\305<\2337\364<\203\223\t>\323\364\037>\020\304\n\276\34001=\324\312\271=;\375a\275V\2117>\310t\230\274\275\243\210<\364\037\032\276>\013\373\273\323\212\271\275\032\257#\275V\363\000\276\212X\343<B\213\001\276-\300C<\255\005\327\274\270E\017=\326\311\023>|\321\001\275\006Q\240<\316\030\t>Z\364\023=%\213y\276\336\301\363<\2322|>k/\213=\333\205A>\376\233o=\177\254\216\275y\261\027\276\201\222s>a\004\200=\264\017\344<O,\n>6B\372\274V\204\231\275u\333\315<tj\301<Qp\372\273\360\232\314=E{\266<\353L\302\275\'\035N\276\337z\332<;a\316<\232\376\026;=\020\310\275\301\315|=ik\306\274\307\266k\276\352+-=YW\234=\355<#>]\264\233\275\215\004\216=\277\021\356=U_G\2767T$\271\232k0=\351\260\r=\212\323\362\274\307\361\357\275\2775J;\343\177\227= \321\237\2753\333s\271\026\356j\274\357L?\276\212\014\254=\352\347a\275\201\271!\276\3543Q\272\020\251\222\275/\260\203=\026\324\300\2756\366\373=\217c\374\274\202q\216<\217\020Q>\336\231\026=*X\234=\035\243\337= \261\251\275?\243m=\220\364\216=\360f:=\272,Y\275\210\370\232\272\260\207\236=\214\033\350=\006s\225=~5\312=\336{0\275U\226\374=\346=\203\272\322\220\301\275\242\245\371<\2056\210\275\256\3600\275ND\224\275J\0026\275\214h\000\276\374\026\326\275\210\306\201=B\325\\\274\030\2505=\254<A\275\372\200\351=\224\334F>\333\361\024<\3413\345\274\037s\262\275~\004\201\275,r\016>$$\347=,\312\032\275O\010\014>#n\273\275\022r\t\275;\177\235\275\275P\234\272\365b\217\275\362\031\255\274\304-Y\276\212\330\373<\311 \260\275\2315\017>\003:\345=\351/3=\243+\333\275\027\275\261\275\007\247l\2761\2634>\037\376\267\275cZ5;\243I\262\275\006\252\305\274}\237\323=K\265\277<5i@\2760\376h\275PF\262=\005Y\254=\230\270V\275\217\365i\275\212\341\'\275+U\207\275\207\303o=UgX\276>{.\275ZCe=\207\030\234\275Z\242\000\276G\016^<r\353\214\275\262\241\356<\355>\256\275\216vu=\035\324U<A\310\253=\315\202$\275+\224\000\275?\r\025\276\247\327c\275V\025\362\275\201{\r=\261?\211\275\367X\337\274I\034\203=\007\357F<\266\355\374<\322A\024\276\206\005\377\275x*\022<\206\224x=\361\022\343<\217\260\213=\330\311\257;\343\326\241=g\035\274=\305\344\212=\267N\362;\355K4\275\307w1=\325\276\016\276\036M\001>\304\177\332\275M#\327=$\375\036<d/a=p\320>=\350\266\211\27573\351<\365\322\t\276\364[8=\376\210;>i\254l\274\276Y\206=\200\351R=\367\243\317=u\244\245=Fu/\276\327v1\2754\347\372\272\340\207\273<\330k\253=\365\276\":\255\2219\273\024\311x\275\007\265\232\274\007\236\261=\247\2467=(g\272=\036X\026\275\212\350\324\274\232y\326\274\034\023\017\276\233\021\323\2755.W\275\277\360G\275\2548\243\2755A\204=\375\360\336\275\217\252 \275\2273\202\275a\037\316=O8k=\253\346>\274\326^7=<C\002\275\361\2459>7\014\022<\256\204i=\212\313]\275x\322%>\351\177\013\274\016I\340\275T/B\2750U\201=\322K\214=\331\201\"=!\221Z\274\222&\244=~\3568\276\354\357/\273\245\317\321=r]\366\274\310\235\320<~\342f\275A\207\021>\003.V=\'\376W\2757\334\337=\271d\027\275v\257=\274\210\204\034\276\030\'\247=\\\330M\276Z&$\275\277\030\371\274\357c\206\274\033pC>[\205->\226\332i=L\027Q\27658\346<\273Q\250\274\351\203\360\275\337\"c\275\007\251\324\2747\337\240\275\326\322m=7\225\320;u\370\374\274N\232+>\022\222\364=\020\251C=\006Cv=\342\335\010\274\345\342\325=t\256*\275\222\273)\275\345\370\203\275\256\341\235=\264\200+\276\302\315\310<\246z\003\276_\370\317\271*-\372\275\243\345\021=^\257\221=\000\021\212\275\250\227\215<\360\211\237\275W\023j<\277\364\262\273\215m\305<#\224\220=W\345.\274%\325\005\276Wj\323;\274X=\273\364\265\201\275,^\270=/\037\023>4\002\2159\351|\366\274\276\357F\275e\336>>\020j\325\275\274\260\347\275;\010\030>\030@\222=?\034=>\354\272M\275\254>p=\320\234\002>\2668\275\275u\256i\276\030\223\365<4\242\246;\236\325\217;\261O#\275e\272\263\275\262\206\034=\221\020o\276\213i\004\276\3245\247\275\3477&>\264\341i>\357E\377\272\301\223\222<\200\002\211\275Uyy\275xQ\230\275\024\205R=S\256\004\276\251\364\020=\201\375\203\275H\266\325=f\241\213\275\201\216\340=\031l5\275\276\332\371=Km\377=\000\341D=\301,\034\275\326q\370\272#H+\276\362\234\273=\003\000+\276\226\215\330\2755\306\023\274!\253\270\275:\n\276=\240\254\026=\001Y\271=\217\266\r\276\353c6\276\216\n9\276Jj\376\274dTt\275\310.\\=m\230f<\315 \274<-9\227=\035\310K\275\246\232\214=\303_\004<z\352f=\253\231\275=\201\006\221\273\274\023$<Z\270\r\274\277\307\003>\210r(>\241G$>\232\262\327\275\271&S:.g\007\276\203^k\276?TT\276&\256\217\274\325\tP=\316\355\256\275e\204\">:\320*\276\375X\301=\370\337\236<\211\204\204\275\006;:<l\211\366=\200f#\276WT\200=\205\\3>\004\036\227=*\003_=\312g\004>,\000\032>\213\026b=\356\023\302\275\005\222\302<\220\333=>\016\002\202\276\371x\256=\263W\343=\305\253\221=\317)3\275{\232\233\275\236\221\014\276\314H\350\275\037\025\336\275A\270D\276is\034= \300\362\274B\367\207\275\027&@=\275|F\275\352\200\207\275T\014u=MpG\275\034\240\031;2|&<hif=\334f9\2753H\372\275Y\017\253\275\334\250\235=\273%\265<[\303\010>\325\276\363<\336\024\026\276\357\241\252\271H{\306;=\211)<g\r\326\275\241v\360\275\033\346\242\270Q\254\227\275f|P<\002\247\216<q\220\370\275\013\311\017>\021!!>\336\236\371;\250\366\373\275\3334N\276\007\264(>`\376\t\276\311\355\201\275\373\317\026>-ZA<\352\377\230\275\277\340U<\036\004:\276\001\377\201=\240Nn\275\\\260\000=E6\035\276\n\233\252\275\272\234\332=\345\262\265=\341#Z>\332\\\272\274\227 \006>\340`\210\274+\251\256\2759\254d\275\036M\211=\267\023\340\274r\365\031\276\333s->\372J\250\274`\370\374\275ky\222=\337.\266<\243J\305<,\235\212=\203\001\020\276\216\360\006=\277>^=e\302\205\275N^\005=$Rs=>\366\212=\205\356@<|\361\025\276\345\245\344<\265\312\331=|\020\013\274}\036\224\275\023}=>\351\2759=\321b\276=pZ\250\275\230 \215>\240\315\034=\302\204\007\276=\215`=\301\t\216\274\305\252:=\001mk\274\324P\034\276)\326y=r4\204\276\272\313\272\275@\005\335=aU\002\2740\3163\275\\\014\221\275\311U\307<_\036\342=\346E\177=\003O&>\260\321\333=\314Y\264\275\244\374\353<\013o\336=\026r\261=i\203M=<\"#=& %\2750\004\200\275\2449\356\274\306t\004\275\001(\275\275YF4<\231B\240=N\222\342\275\225\341&\276\272LR=\326W\004>O\272q\276\222\365`\275\375`\016>\370\316\233=\006B\221\274\206\300\207\275{\302)<6\242\237=\251\342\337=\023\314\027\276\217\0222=\2106P>\225\361>\276\264Yr<\351y\177=h\006\261;r\373/>\336\353x\275\2365\371=\364\276\304\274A\365\327\275(\025\214=n\031\333<\327:\007=P\200\246=\314\251\031\275\306\247\222<\254a\274<\341}\010>\207x\035=\350j\302\273\010\336\026>\255^4=\033\200\202<\n\322\252<p\005\214\275\306V\324=\236\375\353\274(\033\217\276)-\230=\324\361\020>\367\267\007\275\330\225\227\275\243\355\351\275u\261 \275\225X\020\275\264\307\364<\356\275\000=z5\232:O\365,\276\234\037\250=\037\242\251=g\203\234\274\273\312\002<u@\274<\031\323\244\273_\301\244=\357\362e\275\353\203\016=iE\371=t\017v=\022\226C\276\001\313|=@\350\273;p\224\205=\021\362\227=\006\256d\275\240\331\303\274\227\255b\275\246\374\230<\016\332\202\275\323\002\n\275\3149\016<P\3629\276\374I\374=\004\001\267=\341\241\267\275\254t\363=gp\371\274-%\332\2729\227\330\274&\350\345\275!\237\306\274\003\242\036\276\335s\023\275\260\272\373< i\351\275\314e\271\275b\255\373<\266`\346:\206O\026\274\240\332f=\261k\301\275\211\362\205\274\335\355\225=\223\320\270\274\026H\352=?\226\355=\320\341:<\254TM\276\335\357\035<\223\004\306\274aj\267\275\t\332!=\245\013\202\274\376~!\275$\250\322={\354\242=\004I<=U\032\227=\351\214\247\27487\n\276\t\222+>X\335\260<\232c\225<\251\327\200\275\201$\020< ]\260\274\331FC=:\221\261=%\016\212=P\330\356\274\000\r\030\276\333\207E\275v\363?\276\032`\241\275\203\232x=\022\0076\274\215\336\\\275^\363v=E]\017>\212\344\200<V\252q\275\035\263\030=Ok\327=7\204\026={\020\206=\232r\r>\032\301d\274\034\254\254\275\347\256\342=\000#\010>\253J\253=><\255=\251\246\274=\214\251s\273\325$\204=\325\344\355=\324\302b<\317\000T\275=\006{<\361\303e\275\222\352\236\275\305c\267\275\332\232\370\274S\221>\275`\331\216\275\010\314[={\2760\276\0177~=\273\321\314\275\\\210\366\274\n\271\026\275v\2504\275\325S+=G\032\217\275,o?\276c\021!\276k\255\256\275\303Sf<\365K\347<\021\017\333\274\021\223\013=u\371\374<a\332\376=\206\315\244<\026\010\216\275\222[V\276}\320\276\274c{\232=V\240\004>\375\361\005\276`\342\250\275\271\2139<t\317\342<\365\352\347\275\225!\312;mv\314=&\374\226\275H\376\342\274Q\007\016\275\246\037g>\300\313\343\275\303r\357=P-j\276pH\203\275\254\354\330\275Q\352\353\275\277&\253\273\245\262\216=\224\235\324;\027\371Z>\256gd\2755\206\034\275\020V\326=@\251\354\274|\245\235\275\311!\256\274\210:\356\275\364\203i=\215\350\254\274g\255n\275s\377];\205@x\275\251v\027\276L<@=\013\231s\275\\)@\276l\313\242\275\211\216\336\274\255\2477\274\376cZ<Z\030\020>\254IE=l\326\311=\304\247S=\310\240 =L\300\221=\200Cc\275\3160\205\273\330mS\275\236\207\213\275W\231\215\275Cv\241\275\301\035\316\275H\274D<ee&=\2714\252\275`t\373<\010\337\313\275\t\"\030>\207;\216\275\000\037}\275r\276.<zE0>\311\006\257\275\017KJ\275Ci\010=\033\360\036\275\336\206\025=u\314\014\276X\346\351\273Y\212L<\212r\247<\347\231&\274\376\351\223\275\373\r\263\275v*Y=k\375O=\362\203!>\352s\355\274\362\277$\274\362\220\264=\014&\324=\301\030\306<\361\361p=\n\361\215=9\273\364:\3273\203:\325,t=(\235\207<\261\326\237\275\337\r\013\2768\245v\274\307\314(\275\232\372\'=\316\371\257<|\020\037\275\037\376|\275\316\323\333;&\004\237<\214\273\242\275\222\277]=\300W\333=\263\030d\273\327}\032\275\352x&<\027\303\230\273\370.5\275\316\337\306\275W\246\244<\363x\t\274\235\242\345\275)\350\202=\306\010\014\276\t/\205\276\240\233\030>\027\240\320=\316b\366<L\010u>l~\346<\025\356\021>\274w\252<\312Q\007\276\301?F\275X^)=\357\375\255\274\217\221\022\275\361\301\020\275\027\217\207=#\336\356\275\334\372\025>\316\230\331\275\272w\221\274{a\254\274\272\373\025\276\212\300\r:\253n\246\275\223G\224=\306_.>H\023\222\275`\304\221<\221\036\026>r\271H\275\265T\202\274\034\2217=\030\r(=\205\354\220\273\307t\215\275\334\261\001\275\332\322(=\330\3566\275\014\022\230\275\034\005\305\275\003\350\326\275\201\312=\275i$\261\275\232 w=.\025\374<\307\347\265\274\351\254\352\274K\272\301\275\233\255G=\314\344\317=\347}m\276\0371\233\275\254)\267<\370\252\266\275\244\003\214\275\372\263o=\274\301V\275K\255\006\276\252\022\212\275\020#~=\316L\277\275\235G\376\275\300\337\213;\271\236\207=\361\0265\276\333\377\362\274\353\350x\275\001\3531\276\324h\374\274\300\215%=b\301\206\276\327\205\233=\222\213\301=\204/)\275c\223\300=\257\177\336\275\246u#=\307/\255\273\215X\263=\315\211\002\276\023\373\005>\270F\216\274( *>\302\343[\275\327\032\276=\r\010\"=\003D\343\275\006\273];\214\034\030\276\353\250\341\2757T<\275g;R\275\322\202\001<\214\316\n\276\341\347\033\275W\234\241\275\202xE\275onw=\023\016w=\375\310\320\275^k\304=\312\301\356:(\010b\275\357!\n=\336\0101\276\255bx\275\352\3242\275\377M\261\275|~\"\276\303D\032=!A\366;\315\367\353\275\346\337\017\273\364\312O>\261\334\'<=7\243\275\r\364.\276i\223\300\274\331\212\016\276\2612\266=\276\200K=\271c\210\275m\026\275=_\374\303= \334\372<[\314\361=\252\366\\=\3248\232<\271XN\275M^\377\275z+\271\273\213\243o=\240k\266=\314U\227=\310\3270\275^\303\000\276ks\026\276]\300\'<\240xb\274\241J\302\275\000{j<\nG\022\276_\304{\275\365\357\177\275\347\360\004=:9I>s\270\352<\330\242\252=\206-\264\275\352\365\233=\\\226\372<\222\342a\275K\240\336\274!\304\361=\306\213\350\274\231\376/>\341j\'>5;E=\366v\206=\346T\342\271U\214\003>\220\311P\273\030CX>`O\'>\325\371\202=\254D.=\263\210o\275\267\3234<\222\n\271=\243h\003\276=\217\233\275Py\244\274U\233\237\274\312\270\306=\006\354b\275=\375\007=l\022_<\301\270\030\276\301\266\232<\313\246\016>\'\235\003\276 1\252\275hZ\331\274X\3729=\372\277\001>_\177\221=\225%\024=\345p\203>\2101\235=\334~\340\275Dj\213\276\261\023O\275\242\2424=!\022\371=\\\374\255\275\017\207\014>$\326\023<\303\031\300=\002\\\333\275\037\320h\273V\001o\275\306\316\002\275\"\350\313<\303f\366<\204l/>u\212r\275m \211\274P\275\022=J\265,>\244\335\363<\354\0070=\204}\350\275\362h\337=]JM=D\320\267\275^\036\345=\234\220)\275i\347\271\274v\364\n\274\017\363\025=(\334\321\274\031U\027=E/Q\275n\356\213=\3607\001\276\260K\375;\207\001e=+\270O\275\207\014\016\275\376*\204=>*b\275#\323\354\275\010\376\370\274\210?\030\275\334\t*>Q\035\202\275\251\223h\274\3744\241=QB\203=\345\033W\276\014\203\351\275E\035\263\275\027\330\005\276t\033\305\274\245\014\302=\334L\261<\212\261=>\361\320\227\274\372<\337<\364\257d\274\362^\320\275Y\241\353\274\230b\213=\tG\013>$\020\030\276^r!\276\300\031D\275\306\364\'>\353\264\254<\2273\372<\347U\336<v\006[\275|\335\332=(k\031=\270\322\335\275\013\302W\276\332\247d\275s:\025=\307CJ\275I\262i=&z\314\274t\230\332\274Y\277\315<<+\010\276Np\304=\017\270\010\276\337\254\310<\014\370\351\275q\373T\276\007\371\322=\2062\241\275\367dx\274\010u\201\275\205\354m>\323\317\206\275\260;Y;#\260\274=0;7\274M\334\305<\346/*><4\366<IT\302\273\257B\\>t|\314=7\'\371<T/s=\315\243\330=\220\311\007\275\374\255D\275\270\322\320\275\227\226\230\275\276\236v\275D\350\374\274:\217\327\275@?\372=\237>\274=\267\026=\273\265Su\275\351\346\310\275D\371\002>\215\240\315<r\371\271\275\234\227\264<\265U \276\225\334\001>\305K\014\2751:\247\275\233<=\276\363D<\276n\231\357\273\273<\236=\321h\267\274r;#\276\034\256\363<\212\366[\274~|\212\275l_\r\274\317p9\274\274\235\272<\341?+=\273D\333<\276\336v=lZ\212=\324\3239=\227\300U=+m\\\2747\026\227=\222+ \275B0\\<#\267T\2768A\035\276{\024\213<\366\004\313=pY\211\274W\273,>`\344\316<\224\026\036:,\024\222\275\236`J=\357\022\375\275\001\313\272\272\321\365\247\275~G\006>\274\242&\275\304C\265\275\256\305\017\276~\304\233=\353\305#\275Gm\023>\276}v=0\204R\271X\3753\273\0300>\276[\370a=VV\035>\316\270\007\276\201\232b\275\014q\242\275\332c=\275_\231J\275\266\327\267=\247,\023\276\334\256\213\275\034jI\275)U \274\252\364B=Ve$\275\230\360\307<\027YR\274\232\032\314=\203\227\215\276\217\225\036\275\205\224\007<aN\250\275\375\017\017\2755\267\005\274\321\n-\275\336?\326\274m\2435<h\302C>\265d\266\275\364\320{=jv\023\276\334\3721>B6\003\275\027\376\r\276\326\027\"\276\264\336\205\275&k\316\275\310y\314=\364l\211\2748\177\003\276b\001\256<H\022\207<q\035<\275\346^\006\276K\346\010>\221\033\327\275W\'(>av.<-\3201=D\311}=\313\006\262=\323\261\260<\206\030A=@\317\\\276\3447\322\275ze\372\273`j\276\275\310\370\277\275\255\246\005<\265\021\355\275\321\225\324=H\324\035=\224\277\347\274\277\304\023>(/B\275\005t\267=\314\354\036>\322L\364\275J\246\323\274\365\265\371;{\371\000>m\221\222=\0245\332\274t\214\343\274\304\231\365=\032\342L=\366\351\234\274\352\325\277\275\250\251i=\234\205\245=)&\356=\255/2>6\030\004\275i(\037\275\377\025\267\275\333R\037\275W\3364>D\204\231<\253\233\027>3\266\005=&\206\372=8\3627\275\367\322\245\274\030\273\005\276\373\"P\276\325\035`\273\231\337\037=\34046\276,\262\313\275\033\205\356=-y\354<\3759[=\327n\226<ZLi=.\274\022>\337\302\275=\246|\357<\235\204\026=j\021\213\275\324\234M\275Y\246\035>op\204<\217,\'\2759CR=\371P\205\275\306N\007\275\303o|>\350u4=\240M\"\276\224\365\326\275\225\346\260<\373!)<\032\252\375\275\024\342\271\275R\210\027\276\342\034i\276\376x\307=\257p\310\275\373=\n=t\264\363=[-]\275\361\272A\2753\202^=\002\'A\2758\244\203=\356[\236\2743w\001\276\024\n\242\273\035\\\263=H\004\322;\335K\035>\375\264\202<U#\257=\214,C\275\321\356\246=:K\"\274\354\361\330\275\365*\300\275%\266\3539\354\024x\272\234\026\213=m\211\210=\325\\\271<3\237\317=\356&\006\275[\204\341<Cv\202\275/o\331\275\324\224\241=\227q\277=\263\317<\275\352\262\032>JT\026\275DZ\022>\210+\004=\340\3534\276\361\225\003=\246E\005>\336\263\361=\021gE\275\014\240\255=\263\016\025<U\376\317=\216Z\356\275C*\241\274c\212\256=\037\321\320=\252\250\327\272Ct\310\275\324\217P>\376 \353=\351M\261=\203\263\035\275\370\321\337\273\346\357!=h\177n=\376nB\276}\310\224=\267\002W>)\371\202\275\025\370\341\275^\022\215\2742\212\264=\246W\033\275-\3276<\000&\035>.\001\275\275hR\r\275\312Y\010>R\021\252\273\006Z\006<\217v\311=\270Ic<<\242\032>#\324[\275N{\r\276\237\035,\275\253\020\362=\374L\230=`\026h<P\321\024=)\023E\275f\260\374<\313j\337\275\345\022\214\275\375|\343\275\027C\347\274Z\247?\275\0207D\275\030\315\237=\345\252\323;\234.`\276\263\026x=\206\276N\276&\'\351;rB\330=\217\217\276=\007\224\n\276^\366\356\275\231\321\355\27559\014=\t?\316\274j\352\241\274\342\301\367<\025\352\000>\0037\0169\346\230&=\221\320\215=cz\270=sh\221=?\0224\276\025\370\352\273\350qr=\212y\264=\221Y\323\275\313\261Q\275tN\255=(\370\315\274\2765\036\2752\305\265=\227m\222=\233&\207=\rZ\257=\341p\304=E\020X=\367\250\321\275\214S\002=\035r\030\276[\230\014>\247\022\351\275\342\010!\275d\236\331=\005s\340=\247l\267\273\366\020?>\244a\027=A\316\006>\352u\374\273\261\330\361=\034\250\244\275)\361h\275\323\2113\276U;\312\274((\t=#1+>\276\371w>\261X\253\2757\264\254=@\344#\276\013\237\327\274_\275\302\274\221\231\005;\216\274\206;\014^\013\276M`Q>\223\3457\275Lx;>\254\033>;\237\2353=\321\224\022=|\251\013\276\313^\230=\"d&=P2:\275a\204\333\275\"\333\314\275\342b\346\275\"\2120\274\302ql<\325\346l=Zr\020=-\213\031>$5\037\276_w\'\275r\373\346=[\336\350\274\206\222\241<\321\316\265\275\346%\360<\301\264\034>\310\014\224\274\245\242\230=t5y=%b\031=\027\362\004\274#\034\030=R\357\216=\004\2338=x\007\263\275$\353\232<\233\323\037\275\344\203\236\275\331#\312=:B\273\275\371m\333\2758>\353=\340\017I;\206S\346\274k\240%=\346\324M\274\335)\312=\243\002\342=\0033{\275\300\031\230\275\255F\241\275\350\004\231\275\336\032\244=\2768\200\273sP\237\274\315\2159\276\004\375\336\275\253\250u\275\360)J=5x\271\272\231;\324\275\347{=>\265U:<\317\310\267=VN\017=\026\247w=\374\272\r\276dK:=\265F\214\275\214\313\302\275\t2\356<k\377\034\275\227\273\331=96{=!\331\223<\370\362\251=\234\2273\275T\223)\276l\004\271=Lm\251\274\213\373q=\022\214\232=\345\320\217\275\366)\356<T\365\233=\236\205\203=\235O\262\275a8\226=\232\313\375<\321\340\017\276\203\263\370=\306\300\327=\227\223\367\274\327o8>\r\031m\275\245\206%=\'\351\026\275\2675\372\274r\212\375=\024Q\030=N/\270>\242\313R\275y\235\030\275Z\316\n=\016\227\n\275\375\216q>\010\0074\275\324\265\341;\307\275\027=\341\207\257=\314+j=\016\374\210\274q\033!>\021\277\334=u`\202=\271\340-=*\222\030\276\206\000\253<0jv<\266G\315<6\314\212\275\351_\247\274\036^\317<)\370\002>\360g\234\275\240\374\346\275\310m[=]\021N=\253d\264\275A;B\275\255\264R>\244\200\021=\357\372\240\274\236\037\013=\037M\336\275R\206L\275\247\275\035\275\335#k=Z\267Q=\364\257\302\275\355\204\332\2757\260!=\301\207\316=}\202=\275\2534\241\275$F\026>\205\022\212<a\024\321\275\014\".\276j\343\200=\206\363Y=Y\327^\275y\257\033\275\243\377\237=:\3025\276.\375\261\275$\335\317\273\242Y\230=0\367\235=j\006\032=3\326\335\274\271ru=E.x\274\016\365h\275D\221\267\275@\310\r\275\021\330y\275\360\032U\275\336\210o\275L\271\227\275\233\372\234\275\365\003\321\275\265\243\035\274h\241\236\275@\221/\275\315\363 \276\035(\017\276R\256(=\353C\365\275\357\'\215=\301Z2=#]\306\275wu\364\275\223g\312\274\310?\370\274F\n\010\276\305\266\037>\360\214\321\275\'\236&\276\245\343\202\274V$\206\272Hl\203=1\340\330\274\030\301\264<\271\177\326=\214g\261=\346\037\313\275\252\356\205\274\350~\017<B\337n=\211\332\365=g+\306\275\201\227\033\276w\367;>\331!\n\276=&g=pk\211={\361\027>\246c\r\275J\314\n\2768\311c=\256M\303\275\344\276\303\274\374\245b>\331\217\252\275\310?\007\275\234\262\360=\217\370\003\274\354\004\206\274\27214= C\034\275H\226\230<q.\010=\242\322\231;\013\016\250<\245_\004\276\332\337 \276d\377\342<\033\020\000<\207L\031=i\217\303=\331\313M\275\007\233\034>\240\362\331\275M;>=\350j\234=\004\344\006\275\362\376 >\216\321\006\276y\'\030\276+\274c=\3473\010\275`\202\010<x\334j\275\027A\207=x\242\307<\3129\356\275V\317(\275\265\245\261<\230\263\273<\017F\277=\223\242Q=E\273\303\275\213,\373\275\016@\257\272\030\303\344\274\014h\337<\364\033\211\275\345?:=H\320\266\275\311H\343\275T\271[<\030u\003\275\270bE=\362\214[=\361?-\275\234\223\306<\007\347\235=\007\025\253\275J\2771=7Y\341\275\354\272\373\274\370Z\345\275n\370t\275]\316\275\275I\263|<\365\211\353=\374\034\003\276\216\224\340<\334 ,<Q\224\255<\026k\007\276k\'7\275;\256\313=\271\2522\274h\000]\275\303\262\201<EK]\275\331k\203\275\027\252*\276*K\350<\277\205.\275\215\224\273=\321\211\257;)Q\237=\246\216\236\275@\310\201=\253\353\323=\035\256\327\275+\177\306<\336\246\372=\036\372\330\275\224\017\324=\373&\257\274i\343&\276\262\266\025\276\234\255\233\275zeM>H\363R\275\254\334\254\274g\231K>;\ni=\000\271\341=\304\337\021\274\250\232\\<s\177\004\275\236V9\274\317Z@\275X`\031\275\177Fa\275&\300\301\275PSt\275o\342\214\2752#&>\257\211\217=t\273R\275\277\3617=\233\270\270\275\306c\222\274k\275\020\276\353\314U\275Z\360N=\334\020\211>Sh#\274\257f]=6\306\035\276\373z\252=\r\230\313=]\021\210=X\341\016\276\343\277\001\276\366\037g>q\036\202;\0166\347\275\253C\360=\336\224i\275y6&\275\204g\260\275\201\246\253\275}\021\231<\2038$=2_\200\275\367J^\276\241?f\275\234\027\215<\247\302\035\274\204\354M>\356A\274<\213.\374\275\371\374e\273\247v\007\276N|\230\275W\'\014\276\311T\324\275\013\376\272=\222\214[=u\301\243\275\256\237\230<\357h\245=GIu\276\007]\"=U\310\214\275\347\360B<\035\017\276=\324KM>\017g\243<\265o\350<\375Z\017\276\177\315/\275H\003Q\274b\302\316:\213q\261\275\205s\274=\\z\344\275\t\214\233\271\212\277\300\275\346\344\302\275\363\251\362<\002\205\241\275YB\216<.\261\326\275X\242\325\275[T\360=r\207q\275\265\0109>Q+\302=-\014C>\271#\314<e\313\261=Cp8>\265o\303=\362\322\221=m\334\226=}\312j=y\231\326\273\275\254\377\275#\272\325\274jm.=\'}\031;\017k\253\275\226-\333<\"]\337\274|P\316\274``b>$\030\347\275\353\351/=Q\255\t\2755\204F=\030\306 <{8\371<\244l\250=\210\376\260\274\372\365M\276`\253\344=\330\3150>\272OM=V\363\032\276\221\334+=\362\202\263\275\321d\022>\337\026\324=\372\013\362\275^\205\357\274\361[\271\275\364\331\002>\233\252\030\276\362\3574\276\300\372\026\274\211\351\024\276\003\301\373;\251-,=\362\370\303\275h\3267>\305\236\332\274\340&x\275w`\207\274\005\207\203>D\373\371<\016\202B\276\037_/=\007\003\360\275d*\024\2751k\364=\002\212\006=Q(\315\273\265\373a\276\357\325\237\274h\312\265\275\246\340\246>\344G2=\371::\276+\232.\275\030\211\220\275\336\356\201<_M\377=\275z`=\370M\205\275g\274T\275\021p[=\361\366\r\275w\035N\275UU5\275\371\237\277\274\226Px\275\315\376\n\275{F\220<S\205\240\272G\\\222=\250\221\007>Y.\205>\036\022g\275\247\371\342\275{G\247<t\310\300=\306\312\026>\004\0200=\026\217o\275\3449\365<\251l\307<(\203\256=Z\226\264\275\207\3431\2743E\210\275OK\005\276\001}\365<\261\037 \276\376\311\220<\203\363\362\275\375\257\325=\267\212\306\275\345[\277\274\264\315\000<\025\032\235<\030\334\244\275\2403\255=`\371\027\274?\215|\276\001\375\324\275\207\263\200;y\233\256<\274O\241=\212\271C<b=\222\275-K\217=\253\242\276;\t\376\255<\270X\345=\241n\365=l|\227=Iy\335\274_\214\353<\021\345\333\274\"\252}\275\344\227\353\275t\323\227=\225\2121\276\004(J=\215%\030>&\212\032>\271T\222\275\023\236\205;\242h:\275jP\017=\345$\"=\031\324Q=o\333\237\275\001Q\002=\345\355\t>\346\275B=\234\246:=\n\373\203\275!7\213\275\021\177\001>\036\346?>\003O@\275\033EF>\272J\227\275\231\\\177<y1\034> \232\267=NP(>\037e\206\2743\252:\275A\243g>\031\332U=\033\032\324\275\035\210\016\275\275\276\252=n\251\352=i\252\300=X:\245<h\202\256=\327\324\263=z\243G\275\311%K\275\334h\240=\244><>\010\373\210;\363\212A\272\016\331\240>\251\273\035\275R\016E\275\315\354I=a\206\332=\"\251\004=\271\246\227=\031e\336=8(\245=\315E\220=\005\036i\275\360\021\024\276\356\240?\276\317\213\342=\222<\243\275\277\362<>\036~b=p\266\022\274\245\351\345=\346(\007=\271\272~=f\351[\275y\226C<\n\200\277\274\235m\354\275\331`#\272$<\225\275`\235V\276P\251 \275\352\3730=S\201\030>$U\322=\265H\321\271j\177\r\275\266\"\262\274G\370(\275E\336\304<-\r\371=Q.\224<\236N\373\275\032\205\226<\241\303S>}^\377=\310u\t\276\362Xm=\2256>\276\310\035\317=\t\t\246=\001$\n\276\275K\275=\024\317\234\275h\036\004\276\370r\322<\316\231\236\275\033\351\362\275l\305\t>&\037\221\275mS\003<\366.\243\273nu\207\274\3574{\275\315\260\250\275\337C\326<n\240a=\237c\211;\200\227\266\275\216^J\275\021\257(\276\265\000\270=Ig\314\275Z\324\214<\267\tJ\274\210Z\234=\227\010\221\275\024I\345\275*~\321\275\323\246\310=SAz\275\345\337\231=\241\374e\276\237\310=\274\244\360\263\275\r\264\301<\335\340K>\214\362`>\377-\260\274\273\3679=\206\010(\275B^\261=\271\321\207=\220|\251\274\204\346\344\274\026U\204=\r-\310\275\326v\264<U\221\314\274\023\373\373\275\334\337\307=.\014\344\275\020{\334\275=\376\n>$\247\022=z\312\243=\010\032\020\275W\261\264\274\241\372\225=\304\032\007;\3226+>\361\234\222=\363\233\356=\317\274 \276\315\302\013\275[\236J=\214=f=\270,\313\275?\212B\276 y+\273<\277\035\274\007\275\325\275\252\034\220\274\207.H=\274\350\253\275O>C\274]=\003\275\3772\002>p\325P\275\347ng\274j\277;=\352I\306\275i\031\344\274\250\216\252=!0\274=l\003\036\276\257\270\371;2\036<=\245\242G\275\347\363)=\202U\354\274\036\267f>.\212\221\275\302tG=\"\231k\274a\372\316=\244\316\035>\177\273h\273\370\216\263\275Y\252\023\275!u\265\274\030q\361\275v\242\261=r\242\336=k\361\225=\363i\223=\301\017_=\244\243O\274(\323\214\275=e\263;b\204.=C\032]=\247\0037\273\372\177\201=\303\250\001>9J\303\274w\351\336<\224m\323\275\267\025\333=V\374\013\276.})=\364\320\273=O\303c=\333\326\336\274x\224\346\274\267F\353\275\314\013)\275:`V\273W\003\370=\246M<>\213L\210\274\250\213R=\2678G\276\344\213\217<\021\327\254=\260z\005\275\364J\265\275\273\021\240\275\354\331\350\274\260-\017=D\177\347\274\336\344\r=\030\277\370<+&G<KL\030\275\340s\024\275\336\246\341=V\2749\275H\326U\275mF\347=d\004\345\273%C\252=\335\300\247\273Ut2\276\345X\002\275\220V\210\274\275\342U=XL\221\275w?\036=Ku\266=\246\ne=w\373\207<\236\024\217:\377KL\275V\203\032\276(\016\320\275\'\030c\275;\335\002=\017\036p=T\213\023\276ae\360\2747`.\275&Z\236\275\213i\224\274\273\325f=\222YR=\005\n\030\276\"\330\307\274\373\203\003>\261\250o=$\227\313<\212\3112>aA\225=\\\007\204=n\006\366=\024\334\005\276\325\023\023>\006\226*<\023\202\310\275\177?\251=\\?\264;T\034>=l_\335\274\376\n\253\2750\275\243=U\323\335\274D\311r\275\321\203\213<\322\371t>\'\031\024=\237\210\343<j|\007\274\031\004\215=\220\266\234=\352\367\237\275\265\265]=\324d\264\275\013\'\263;\205H/\272\013!4\276\325\236\235\275\353\034\226=\241\023\210</\264\344=\213Z\215\274X\233\355==:(\276\357;\376=B3\210\275+.\345<\032)H\274-W\017=T\000\004\276\366\212l>p?(=iI#>\037\241\"\275\354x\177=\036S\204=Q\207\005>\232e\213=\205\\\351<0\271\323\274q\0253>\375\230\350=x\2463\275\353\202i>\340\252r\275\312\345\302\274=\033q=\356\340W\275\252\305\\<]\036+=\375\021\246<\215\035\317\275\355\0267<5\357&\274Z\235\312\274\367\2325>.\354\'>$R\206\276\342\r\231\2744\353\210=\363\224o=h\311\007>\017\352?=\340\331\366\272s\005\350<\032\021*\275\264\311@\2754C\373=\337\026\005>L\301\253\275\270\345\345=\016\006m\275\315H\237;f)\353<M\246\004\276\371~\341=.\313\371=Ld\214\275J\207@\275\270\242\353<]\215\345\275\352R\304<\255\234v\273d\247\t\274\227u\270<\201\316\326=\276\321;;\272@\356\275\004\217\016\276\223qN\274\237\201\240\275C%\244<6\222w=!\223\230\275N&{>\010\025\237=\034s\336\273\035\231\300;\353R\t>\327S\014==\006\202\275P\036\344\275dK\202\276\0264\006=\223k\301\275@\222\020\276\037\033\365\274\316\377\203\274T-\376<\360\257*\275\343\036\031=\246\0024<J\372=\275\346\267\301\2751\361\353\273\251\244P\275\222v\006>,\032\342<\004\241\"\275\013k\301=C\220s\275\333\250\312\275\t\311\276;\235;\223:\212)\\\275\345\342L\275\367\260U>p\366\023\276S\373\350\273J\212\002\275l\nY=\325\331\222\275\225\244.>\000\037\300=\252\'\360\273\374\316\251=\312d\203\274\363k\006\276<\346\377<\330\215P=\210g\340\274\237 7\275\270i\263\274}\331\344\274\002\241(\275\265\373\226<\343\036\200=-\240j\275\013\001\355=\252a,\274\366\006\231=\010q7=E=\204\27545l\276_\315\203=\177~\032<j\211*\274\277F\225:\226e\272\275\225~\342\275\273\343\\\275\214&}\275R\343\026=(_\252<\377\244\204=\230\250=\2751\257\035\275\267\250\364<?\340O=\330\017\027\274K\330M=\324<{\275\213(?=\342\017\010>j\0228=\330\245\023=P3Q=Lx\347\275\335F\204<\202\305\226\275\322\257\254\275\t\360\237\275f\2105>s\035\321\275\270\302G>\250\334O=\360\227\231\275G)\351\274\256j9\275\030\337\\<z*:=$\032\275=QE\000:\200\246\272\275-&\027\27616\206\275s\024\266=g\006\017\276\222M\216\275\314M\215>\023\200\213\275\033\345\316>\315e\'\275\216\274\333\275\251\022X<\000\321\235\275\316\277)\275\343\003\343=\327\n\034>\037\264t\275\2616\251\274\314\277\223\274j\026\213\274\320\024\345\275\306\2154\275\003\205#=b\355\200<\342\365\231=\013`\034=\352\304\213=\020\307\022\274m\372\342\274\267\214\n>\271\273\217\274\313x5\275\t\356E>n\312\332<\2431\256\275\351G\007\276~\216K\276\342M\245\274\004\206)>\333Tz\275\256\247_>\010w2=k\014\250=\364>\220=\270$(\276-\257\330=\274++\2749\217\315\275\321Fh=`k/\275@h8=\314\305U\274{\311\274<\252\351\330\274m>\212<sn\207<\ra\264\275\177N\325\273r\202C=\366\365\346\274<\273\231=\231nP<\344\333\247>c\236\017\276M\353\353=o\310a\274T\342\331\274*T\270\275\326\324\235<0\312\026\276#\3441\273\026\215\000=8\365y>?\243\022\275\017*\202=o\277\037\276C\344\303\274uH\014\276\036\210\003\276+#$=^\200\360\275S\001:<\202|\360=\276\0261\275\263/\227=^\330[\275b\307\031>1\217*=\331\237}\274\265\021\005<\024!\032\276WBr;\364.@\275\014\332\261\274\332\274\331=%U\032\275p\241J=\334\346 =\302\003S\274y\201U=\354\320\215=\201\216\247=\017ft\275=9\343=:\323@\275C\230\004>\277\203\256<\327\315a=\207\023\334=\207\341\303\274\224\226q\275\316B\n\276ijX>\001H\200=)\261->\031\025\214=F\332\216\275 \275\025\276=n\266=)\337\202\274\270\n\313\2755\365\347\274S\030\347=\035\321 <\353\003\t\276(Q\266\274\227\322\276\274\204\374\354\273\303\345j\274\323`\322;\313\257\376=o\266\311:\227\255+\276\346\377&=\035f\316\275uq\233\275\373\217\263=\224\204/>\244\207E=\202\033\212=\315Q\264<\010$3\275\327\276\300<\370$\352<\361\205\022\275/\004\306=`\277f<\177\352\330\274\373\267 \276\230\233\005>\026\025\211\275\004\0226<\\+.\276-:\213=\2614,>\277\354j=\216+\226\275\2513\370\275\nq*\276\355\245\230=\313{\207=]\221\315\275O\3511\275\2457H\274\277\320\024\275@\350\211\275\313\364?\274\035\361\225\275\027G\274=\r&\227=\210\225\226\274\245\\n\276\230\n\005=\343\351\231\274\303\t\010\276\365.d\276\370\307!=1\340\256\274\260_\261\275\250\242\234\275\177\260\272=l\037\033\276\204&\327<k\321\212\275h&\311\275\234\353\227=\003\2616\276\326\221\201=l\215\314\274\322\017@\273\265`Y=\240P6\2759J\002\275\312~\r>PP\343=\271u\010\276\0235\266;\306\340\204\273\0236\361\275\326\310Y=H,.\275\374^&\275\266*\322=\035M\033>\n1\222=9\331\263=\026\020\014\274=\265\020\275\201\341\361\273\243\023\213=|%\035>p\366K>\340\351\026\275\017\350;\276\004\032\214\275c\013\t\275\320\267\002\274\033V\224<}\242\020<\'\"f= \272\006\275\277W\260\276/0\031<\220\333\037\276\222\214\240=Zf\017=E\352&\2765:,=\346\006C=\253\240\275=\311\013\241\275\277\373\277=JF\244\274\"\014\374<\357\352!>0\254\353\275{y\005=\340}W<\361\255$\276Lr\321<B\004\270\274\007\331-\276\256\002\024=j4\211\275\262j\241=\245\035\025\276\250\247\276<\213\341\207<)\335U\275\247^!>e\006B\276\357\335\000\275E!\354<\274\000(\276\240$\313\275\331%\230\275EL\372<\325U\037=$r+>\377\0043>p\010\211=b@)=\3230\034\275\177\230\307\275\362\224F\273\227\234C\272\001)\213\27574\355\275(\025\r>\230\005e\275\215u\204=\361\032\203<\251\347\225\275\271\202\263\275\2506\303\274m\t\272\273 \311M\274y,\004\276(\223n=\212\215\372\274\307\347\361=\225s\022\275*\225\244\275\244\222}=\240\346/\274\241\3543\275<\003\010\276\007\355\260\2751B\022=\360\260\236<5\r\333=\213<F\276{[\026=\032\226)<\241(\361\274,\306\215\275\003\356\361\274\003\347\261;\016\n\353\275s^A> \022\315\275=6\345\274F\237\035\275\033\251r\275\207\t!>H\323<\276\331n1\275-9\022\275\347LT\275\254\224\317:\001\\1<\353\006\252=\224J\316=\310\361X=\350\311*\275\214\032&\275=\317;=\2142\244=\364\201\000>\277\361\240\271\362\213O>)~\'>\036\323\304\275V=\345\275\325\315\326=l\363/=\304\341$>\237\311\234;\317\275O98\244r=\322\274K=\206\337]=M@\030\275s\372=\276\202_9\276\347f\301<L\325<\275#\3745\275K\260\346;\264wO\276\275\032(\275Fm\207\275}4\270>f\251\275\275ABd\275yM\256<\004\262\201=Q\327{=\306`\313\273\341B\372<\233\205$=\326\"\321\274\r7\\=\031\033\000=\243\253\212=,\274\210\275\300\n\226=\037d#=\002\374\024=m\306\242=*\031,\276~X\311=\255<\316\275\313Q\026>\247\325\363<!\306\345=\"}/\275\355\376\007\276\3651\261\275\331\023x=\273\003\301\275\214e\207>\243D\340\273\300\354\017:\250\322{\275jG\361\275J\203\014<\346\211\306<0\233\256=9<\277\274\td\216<{0\377=Ft3<\210\023V=6\214w\275\242\020\221\275\246\003\271=\003\372\276<|%\242\275^\010B=&n/\275\303r\177=\241\263\010\276\273\303b=\n(\235\274DH\334\274;\340\203\275\370\022\245=O\273g<\\\235\331\273\275\327\004\276e}4\275~kq>\251\216(=\n\350#=\242\0226\273\2553Y:\233\231l>\244\tj=\360\202N=\316Q\203=\362\246\307=D\346?\276@\273\217\275\3654\205=\001\244=\2744\203\277\271\345\324\273<\332\034{\274\300\237w=\363\356\357\275\242h\030<Q\263O\275P\236\314=\203\022\003\275\325#\321=\267\006\253\275\372\202\226=\357{\251\274R\255\207\275\211\225@=iY\227=\306A\017=$\312w=\034\211\267<p\330\031\276\316\275\n\274\216\340\352\274\367\037\022\276H)E\275\3346\237<m\007!<\334Z\300\275\367K\203=\001\206\205\2750\307\354\275Oy\023=e\346f\275\372a#=\211b\344\275\032K\245\275\2350\230\274\222C\334\274\353?\273\275\331Z\362=\242\350\035>\262\036\375\275\017$=\275\351\371;\276i\277H=8\247\232=\334\217\373\275\245\310\321\273\037\233H\273\3071!\275\341\375%\276\354?\032\276\241\320\330\275\227\027\177=Y\0255=\314\305\240\275\246\201\271<\351<\265;j8\025=\254R\317\275\343?\221=\322\370\320=\372\324\205\274\234\275\275<?\n\266<\030\002\334=\334`\330=\302\312/=b\344\234\275\320E\204=5\265\222>\262\353d\275\263N\310\274\264\273\022=\322\006\216=\217\354\217=<\357\300=`\362\244<\375\334\256\274Z\311w=\360\302W\2736\275I\276\177^\226\275\037\354\214\274_]\013=\036#\002<\312\325\357\275\224m`\276\2414\320=\304Y7=\033+\341\274\264\202~\275\261S\372<<8\303=7PS=\030\030\305<\215\256\367=\205K\311\272\315\227S=\252j\332<\342gf>\340\277B\275\254\304\314\275\260H\252=^\362\347=r\200\203\275\201\262\000=\263\206J=\244?\007>\257\355y>*\206\251=\352\236\265\275.\361\324<\374t4=\205\363\353\275K\267\350=\230Q\r\275w\2324\276\017\036#>*e\371\274W\2227;\305\002b\275g\336-\275\223\220\247\275*\3146\2756&\177\275Oxu=\277\006\300<\000b\346\275\375\222\001>T\377p\2769)\353\274\374\336\214\274\222\\V>;\314\225\274\253\304\350\275\243/*\276\036\301e>k\325\034<wM <\360\322N\276\3635\\=w\022\325\275\234\233\336;\353\354\303<\360E8;G\027\251<\256\347<\275\241\223\360<u\311\r=\360\177\211\275o\240f\276OuR>9Y\267\274\311\303\334\275^-?\275:=\007=\013d)\275\023\322\312=P\n\'\275\364\010<\275\230a\231\275\274\231\264=w\342f>\245\302\323<\255\352\206=\025c\213\275e\237P=W2R>U\345:\276l\251,>H2$;9\245.\275\345\253)\276\337\313\321=\277cV\275\262E\n>\031V*\275\256\241\363=IE\003\275\266\331\305\274\323\234=>2N\022\275\343\251\357\273\202\275\243<Z\266\224=;p\344\274\247_1\276\301\221\'\271\225=T=_\270\275\275B\301\320=\263J\346=P@\n\276\274k\360\275\t\377\003\275y\336n\274mCk=\307\301u=\234\276\224=\013_\205>in\375=\303*\204;5\334\272<\2435\'\275-\200\205\273\244\020\t\275\035\240\006>\007\225\372\275\\\233^\275P\003i\276:Y\001=\335I\311=\3215\230<\355_&>5\355W\276gl\270;\321 \255\275\342G\360<{\235\022=:\201i>\252\024\226\275\001\321\231\275\203v^=~\013\013\276z9{\275\354\001\030=\203a\344<\n\370\327<\231\033\002>\262\223\200\275\351\222V\276\317\027\257=CE8\2764\343\370=\2269\306\275\035\366\037=\314\353G\274\032\374P\276v_\236<\n\261 \276-v\265=\312]3\273\007\350!>\004\177\234=P\223\227\275W\306\344\275\371\261\204=\225\323\034\274_\237\255\272\253\343\271\275\242\005\245=\373\350t\276k\203\202\275>\'p>)V\034>\312\234(\275\317l\226>\033v\234\275\330\272%\276\265\032\033=\227\252\"\276\3618\356\275\361&\360=\031/E\275\3709d\274\357\307\251\275a\205\363=\027\376C\276\240\000,\276\314ja\275\262\037;=jV\032\276d\303s\274iL\264=t\230\210\275\3355\311\273\361\003@\276zW\262\274\311U\025;\310H\310\275f3\327=\311\336^<d\236\315=\365\356\341\274\260\013\302\275\230\336\215\275\t\005\022\275\321\314\n=\206#\356\274\363\360\217;\234u[\274\315\336\264\275\"\356-\276\223z\005>\321O\371=;\233\242\275\213\323\367\275\177LM=\272\350\273\275\276r\364=\033\275,=\005 \035\276\345\226\026\276\275qG\274\r\r?\276\036\251\241;\036\005\207\274U\002u\275\347\346l\275T\237\263=fD\256=\263h\222\2758\252\202\275N\236\307=R\262\025\276.\371\323\275=\273\350<+\n\332=\363p\306=\206J\363\275kv\210=\315\345:<4\311)>b\260\347;\370\374\371=\261\321\207=\r\035\030\275\014\330\210=\210\243\336<\324\273\275\275|\2027>B~\n>$\205s=`V\336<\036\342\023=>\rZ<\336O\316\275\0135\035\276vRO\275\324j!\274\374\036\206;\361\277\225=\014m4>\335:\256\2738\177\177<\236h\013\276H\301r=\327-\322;\000\003\324=\320\373\323\275K\260\231=\2272\260<\372\"\261=z\322\020>\263\252\327=\013\365\303\272\214\013B\275\276P\201<\210/\203\275\225\321_\276c\262G\274\333\362F=d\033\270=\235,\032=\3145/\275V2L\275\340\331i\276\213\026\304:1\264\032=\'\332\036=.qU<\222\345\326=k\343\251=1S\333=@z\004=\207\375\014\275{\310\001=\244\347\005\276s+9=\\\373\014=Uu\360\271\333\341\206=\005\232\206=\2558\352\274\023e\201=\251\224w=\327\024%>\341&\342=\302\377\253\275&\377\220\274\260\205\273=:\3035>\304\242\254;w\313\221=0\325\302\275\316\271\220=.\263\321=Y8\317\272\367~\331=\000\312v=rn\225\274K\301\354=\362D\021\275\373]\226;\355\325\345\275\177\375\207\275\364\243->\"\347\343=fxC=1\251\n>\256b\366\275\225q\260=7*\232\275\313[\372=<B\227=\020EO<\'\306\024\276\275\3413\276\370X\016=\373\213\321\275\332h\372\273$\371@=\334\325!>h\2567=\263\022\243\275#\006\210=\036\025\025\276\315\002|<\366\330\254\276\263\"\216\275\033Y\005>l\335A\275\322h\302=\337\306r\276^\273f\275\357\354!\275\213G\261;;\331\211\275g+\340=6x\262=\205\343\242\274\321\360\311=#\177\326\275\230\332\343<\264u\323=\366\257\020\275\321c\210=s\032\370=\305\235|=\260\005\373=\3234\321\275\367\204\274<\332\264\234=\211\300\025\276\337\336\006>G\233\270=\316\177\325\275K6M<0\266\002\275[\222\025=Y\332\346\275:\203\205\275N\005\031\275\242\345\004\273\213\036\">\371\016\232\275b(\030<\336Dj\275\224\022\026=\236\222\330\275\331\361\313\275\201\003\021\276D\243\243;\026w\230\275\301\331g=<\233\000\276\201\214\222=6V\034>\255p\265<\232j\254\275\036\213\373=\247Z\376=\'\333\016>\0073\237=\333\324\374=\320\204[\275N\017v\274\354Yv\276\222\000\006=m\214\331\274\014\317\'>\264yF\274\327\262E=1\212\366\274C\001\013\276\362\017\227\274`A\211=V\321\276=\306\234\206\272\204\371\311\275\346r\306\275\223\251M\274\"H\004\276Y\352\252\273z\277\211\275ZjL\275]2P\276\224,\266\275\306\301\250\275\312\234\315=KC\241\273\267\246\334=9\350\232=\326V\255=*p\000>_\370\210\275\222\325H\275\177\226\007\276\2441\253<%\300\\<\340\016s\276\r\230C\275\267\311\347\275\242\'C\274p\365\311\275\362\330\350\275o\023/>\225\251\315<\2758\365\275\306\341C=\254\364\325\275\251\265@\275\320H\023=\024:o=\\8\337\275\3475\244=T\312\253\273x<\325\274\376)P>_n\351=\226\236\236=*\274\'=\367:(>\244A\224\275\240\317\r\275j\316J\275\256\004E<\335\025\025>\003\271\234<}F\037\276\257\001\252=V\227\346=?ga=\203\0326=`\027\351=\375\013\201\275.\301\014\276\322v\243=\317Q\333\275\020\201\201<\376}\201=E\373\302\273C\202l=\"y\026>\257\007]\273a[L\274\r`4\276\r\243\254\275\210\355\307\275M\373\014<Z\017\027>P\371\036=\210\250\305=\034ee\275\214\3614=\264\224\004:\310(\361=4\315\001>\002i\323\275>\201\216\275c~\313\274?6\032\276\374\337W<<\355\002\271u\0228\275}T\001>n\r\030=\375\273z<\023B(\276zE\215=\335\371-=\314\215\232\275;ND=\253\216Z<\034\010\000\276\274h\">3/\305\274\315\235\307<!\311\350\275@\026\234\276:\346\302=\312\020\n>\243\3516\275s\r\234\275u=\217<\010e\337\275b\244\030>eS\267\274\245\320\226=\315\262\033\275j\0349\275A\315=\276PR~<\232\346\306\275@\316\003=Y\010\031\274\273\204\272\274w\357;=b\226\251=\355\265~\275\"\371\374\274\254Z\246\274\323\221\002>\034\351$\276\262\023,\276\330\250\223\275\230\365\367=-\323\262<\274\334\207\275\320\361\005>@\301\342\275\343\376\336=\241\262\320=\247\233\334<W\201\375\275\231\235\232\271\035\323|=\013_\034>R|2\275V\264r\273\357\016\026<kS\014\276\004\316\212\275J\354\335<\244a\216=+\335\226\275\252\260\311\27489\323\275n\377\336\275\342\216\301\274&\005\005=\233X\003>\315\322\222=\325\002\000>\363\316\036\275\335\355\336<W\3767=\357\032\n\274|\3701=\031\"\236\274\031\\\306\2752\304\337\274T\205\026>M\376a>\013\362\337\275\204\230\017\276 \334\251=rA\022\275\272\363\202=\346.\001=W\306\252\275\277\371J\275\006\336&\276[\n\204\275\330\316\366\275\277\217\020\276\350\035/\276\215\005\336=9o\250\274\212\203\321=\303\n\034=\014\272@>q\346->z+\034=\037\201%>\222s\257=]\326\023\2756\\8\275\363Fj=?\\\r=\371%\272<\361}\276=\261t\010=#j\324\275\013\364^\275\217\257\242=\306Q\221<\326v\217<N\230\027>\355EP\275/\254\312=\361\252\222\275\250\030\275\275\312\317d= \213}\276T\t\034\275\365z\201<\025\373\235\275\277\355\275\273\221o\334\275_\375T\273\305\216->\'#\375\274\223\030\341<R\240N\273\334 \244\275\206\222\026=P\364\007\275\036g\376=\310\366\377\274<\352f\273\337\313=<y\351\n\276d\272\017>+\250\236\2756\213\366\273\206R\006\276\241\346\211=?\362\250\275\204\260\245\274\203\350\363<\'\241\037\275\203\027\220\275y\254\332\275\223\nV:Q\207{<\030\305\334\275\263\036\370\275\221\177C>\247V\024=Y\201\004\276\25716\276\370\023\000<\240B\304\275\366\374B>i\031=\275\200\261\242=\262E-<x\276\016\276\334r\335<j\026\032\275r\236\'>\324\206\241<~\325\314=\307\341\276<x\3266\275\210\276\r\275\231\201\373=\354\215\325\275\305\246\375=)\002.\275\337\204\375\274\030\322*\275KZ\030\276\205@\001\275\240\347\200\275\316\002\\<\342\320\n\276\267\0169=\275il<C\014Y\275\200\224\217=^\276T>\315\'\035>E\233o=\346\224\007\275\021\024\037><\331S<\306\355\325=\250\324\206\274D \261<\335H-=\244\003\177\275z\nF\275\0360\332\275\233\303\242<\014\317\014\275&\350{=\003k\271\275\r\267\320\275\374\376@=\017\343!=\233\"\247<\200\206\025>x\356\312\275\007\025R\275\234,\334\275E\364\327;\'\351\374\274\023\211\002\275\265f\017\276\000\220\352=^1&>\201\320\331=\370(S\276{f\224\275e\302\027\273|\010\371\275\250\270\206\275[E\330\274\031\360\334\275\034\236\377=s0\273<\016\177\252\274\244\203\211\2751:k=I\245\265=o+\275=\367_S\276$\013\315\275\200\333\330\275\203\"\222:\177#3\274P`\241=\357nj\275}\\\335=\006\\\002\276\205\345l=\'\314\363\275\257\321\2409\353\366,\275\034\340\035\275\227\032G=\032\214\006;\254@\350\274\227<*=}\313\027=f\256\345\275%\223\342\275;S\037=\361\314\344\274_\347\202\276d\036\207= \320\342<?I->z]\t\2752\237\211=UY\212>i\223\355\274\021\023#=.`\227=\033\336\257=bP\253\274o-\370\274\263\277\222=\017\244\020=\321z\245=2\277\301\275\247b\375<\347\266\207>\353\332\267\275{\t0=N\013\356\275\270\233\217\275\251A<>\033\303\035=\006>\200=\360\376=<\235\272\002>\007\215%>\375\235\222=\325R#\275K\364%>(\016\004\276M\264\246=\312\317\312<+1\232<3\365\252\275K\334\315=\270NL\273.\003\036<\027N\252<\016v\331<\376\\S=\023\t<=\332\240\001>z\276\037=\202\312\255<\253\022V=F\246\335\275\257\315h\276\242\243\340\275j\037C>u\354\025<\2179\263<f\243\224\274Mz|=\270x\243\275\332\254\233;\002\t\243\275\273\005\033>\223\203\226\275G\252\355<:Q\343<\201h%=\262\217\025\276\022\257\364=\264\234\005\274\033\346\373\274\233\244\004\276\000#\312\275RY\263;\355\260\372=\360\253\254\274 \356\306==\212\306=\236\200\252:y\322k\275\313\263#=\365\237\326=\352\273\253\275\027\267\014\275K\035\032\275Mag\275\3604F=\323`d\276\217\347\317\274\2154\263<\372Xn\274b \211>\224G\362\274\217\310u=}h\246\274\215\206\177\274#\206\016>\357d\337<H\276\356\275\243m\236\273\'r?=*\213=\276\010\256\260\274\346\035\256\275\212\333\226:v\202\351=GM\267<\003\025\272=\316\372\372=k\325\217=\270\204\362\273\201\325N\275\354\207\207<$:V\272\326\214\252;\225\006\310\275\376hf<\362\357 >\375UP\276\376\000\215\274ae\373<\254#Y\275/|\213=\262\353\031\2760\313\035=\2155 \275W\367*>\t\305\014>\312\215\035>mm\375\273Z\\\336\275\n.\312=\315\210G;3\236R\275\341\225\213=|P7>\020\325w=^&\200=F\264\013\276ZVs\274\301N!\276a\230\241\274\220r4=\177Q!\274,\274\216<\200J\337=\032g\224\275Y\254\036>\3143:=0\374\004=\261\214\276\274\234\225\017=w\207\213\275\325\353=<\207{&\276,\361%=\271?\016\276M\307\005\274\002\360\207=\370;[\275\r\006\226\273\004\352p\275\004\353\006\274r\0341\275\010\245\002\276\365|\327\273)m)\276\251\260\356\275\306vc<\207n\010\275\252\323\230=Ps\343\275\242\326$\275/\276e\275\257\357\365\275\271\234\000\273\372\217\206=>D\247=\226\036\213;X\030d\275\242y\262\275\325\327\016\276\235x5\276\257)\265\274\347.\251=\246\303f=\217\233K>\035D\300=\2357\300\275A\357%\274\310/I\275\322\260\247=\375Fr\275\014\346\313\275\2367m\275\024\356_>4\327\241="
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 90
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer0/Assign"
      op: "Assign"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer0/read"
      op: "Identity"
      input: "deep/weights_layer0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
            tensor_content: "\0131\332\273h\365\325\275*\372\267=J\274\233=1\246\233=%Gp;C\337\254<1\255\017\276|X\030==\024\023\276\257\371t\275A\255\035<\372V\352=\320\0017=\214a\222=y\253\363\275\025\373\243\274f\241\311\274\334F4\276\026\351\346\275\001\351\250\275B\340z\275Z\336Z\275KV\265=\205;1\276\023\367\306\275[\240\245=!\222\214\274\372^\274<\035D\213<\357*\t=\037/\033=C(\356\275\233M(=\241\301]=!\356\253;\356e\307=\374g\026=\'=\365<Ag\001\2755\350\020=\274\373\247\273\321\315f\274G\203\340;\254\362\027\275\002\3640\275{\236\020\275\2432P=|=\237\275\244\364z<\343\231\177\2754c\304=\'\224\245=Z8(>\234@\205>\034\221\027>tC\034\275\251\311\303=\352\nJ=N\325\021\276\340\345\216<\255\305\237=D\202y\274z\3342\275\351\360(=o\274\244\275\002S\205=\342\324\010>\235%\031>\356\260\205\275\'\014\226\275\300\303\201=\275\256\270\275%\246A>\003bf=`~F>\032\007\036\275\t\274\214\274c\357S\275\253eO=V\007\t\273h\rk<\302\370\010=\274\253\314=\216b\351=\254\256\310=4\257\323=\252B\213\2740?6=1L\347=\200j\302\274= \374<\300\227r\275\034\033\000\2762\027\316\275#\001\246:\201HQ>\236{\336\2758p\203<\021Q\036<\031\226\305<\311\nn\275\214\3517\275O\033\227\275\360D\340=\177\260\375<\220\0016\274\366\361\321;\253\374J\276a\206\025>\222=\242\275\260_\343<\302,\255\275\277\305\244<;\216\227=C\333\003>N\206%<\252\361\224\275g\013\313\274,\250\034>\240E\032>\264P\215=\333\250K=\266<\206=D\2208\275U\205\317\275\3474\250<\266\020(<"
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias0/Assign"
      op: "Assign"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias0/read"
      op: "Identity"
      input: "deep/weights_bias0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
            tensor_content: "\016\347E\275hB\202=\336\276-\276}\241\217=\235\366\256\274\347\331\200\274eI\272\274\030\n\023>\224\210\226<\362Yl>\347\025\334\275\245\304\206\2752.\203\2738c\372=\342\323\332=\315\303\014\276u;|\275}\r\325\275\320\221\222<v\017\266\275\013\274!>\007\3470>l\256v<M\326\346=?hE\275\216\244\033>\351\231\230\274\342y(\275n\215(>}\336\332<\035\177\177=\3176\301\275\n*J>\375\212(\275\362\010.>\304MP\274\316\005\315\275\223\333\006\276\304\310\353\274J|\220\275\210{\301=\251R\374\275Z\223;\276^\2447>\213\2034\275\207\312<>\234\205\265\275\351\\\363=\234!\230>5\351\030\276\026=\027>v\351\021=\322n\247=:\025\263=n\304\262<\357)\377\275R\207\226=p\220?>\007r.>\375q\236;\316\021\236=\017\322W\274\255\026\000>\372\222\231\275\036\244c\275m-\006\276\362x\311\272#t\215\275\373\211\243<a[@\275V\315\331=\361\032%\273:{\007\275P\031o\275\261\334\331\275\207N\013\276U\354\226\275p\367\020=\203\345\031\276j7\261;\344\004\274\275\241V\316\2746\"\001=\270\n\343\275+\'\017\276\315\365g=\343\357\006\274\311\231R=\315}\264\274@\333&=\303\374V\276\3505\366\273{\363\305=3\367&=@b\312<D+x<86\357=\037Q\254\275\n\007V=\247\217\232=\351$\020=\313\254\271\273\\\310\253\274\370^_=\003\366\203\274\022p\345=i\032\256=c\033\314<\220\022\272\275\250\254r=\365{\325;\005\356\205=>\361\234=Bf\006\275\004\342\205<\371A\267\275L\235\214=-\340M=v\324\352\275\225\004\034\274\270\371\223\275\266\"\340<_\3336\276\014g\030\274\020\\\030>uY\333\275\301\343n=\356*>\275>\206D\274\034\030\220=\035\335==\377+M\275\304\364\356<\025\302\032=\n\375\340\275P\211\"\276\321\314\347\275G\350[=\320\023?\274\301\032\010=\356\260\220\275\377M\025\276\310\233p=*X\016\276\376\212\000>\007\207P=U\341A=\325\201\363<^\021\266<\206yv>\322<\334\275C\024\244=\253\3615\275\233@\213=\366R\204=g\337\013<\351\374 \276=nO>\246{L=7\271\324\275HN\031=\362\227\372=dU\035\275%r\277\275\021\007i<vy\260\275_\312\352=;%\000\275\200\271g=E\314F\276\202\300\235\274\227\n\325\275\257\202\324\274\216\372\214\275p8\223<\346\253A=d\231V>\021\177Y\275\353n#=j\342C<!\300\256<\334\231\321<c\021L=\350o\250=#\327\006<o\226-\274=g\325;w[!\273g\277\243\275\257\367\270\274\351\370%=\264\033\030>\304\\\242\275\240>B\275\305\037\023=\203\021\373<\315\227\366<\323\201\t\276;\350I=S\247\222=\033 \021\275\214\026\242<A\303\032\274\205A\313=W\327\254<#d8\276\252\233\377<\351\020\356=^G,=\217\013>>\212x6<\266*r\275Yg\366\271\306\274G=KTj=\200-\030\276\224\241\n>\304\\\024=gp\'\274\253\014\\\274=\255\256:\203\3770\275/\346\037=\002\250U>Q\\\364\274kMW=\377\025n\275>\231\264=|\355`\276\255\005L\276\245#\346\274\346\323}\275\"\3761>3\252\305\274\346\244\001>\341\010\200\275u\025)\275 0+\275\007\364\020>2F\004\273\223\241[=d\303\244=\030\254\225\275w\001\"\275\264\275\002\276<\223\225=\254}\311<\333K\346\275\267\247e>F|\346=KR\204\274\3364\030>\323\357\236<\"7\024\274\202pv=\021\317\004\275=P\"=\367\240]\273U\222\220=\203H\243\274\347G!\275\343\240\003>\332\347\210<\345\221\365;Y\355\225<\360pW>\2239K=\n\363A\275\262\274\225=\326\346\210\275\370\3546\2768\376v\275\212\263\327=\223\237\210\275\355\215\353\275\352DK\275\253\302\342=J\220\252\274w\2738\275\356\274q=^\332\342=\273`\223=\003\344P\275E2\024>\312\2042\274X\250=\276\333\014\244\274\262\207h=\014\367F\275\264{%=\203\366{=n\254\355\275\254\360.>\276<\014<#E\024\276t*\024=\036\232\336\275\362v\206\276\340dl=W@G\274\235QL\275\367\322t\276\353\220\215\275co:>\342H\300\274\220`\300=\367\216\207\275\212\322\275=5\203\234\275\346\200\371=\233;;>\035\334\331=\363>\263\275w\365\237=\314\242\035\276DW\264<Qg0\275\313\324\363=\223\2217\2760\212\"=\243\240\347\274\232V\201=\356\010\017\275\3768\323\275\365\325@\274\224$\017=k\3222=`d\373=\n\001L\276\360S\220=\362\227\323\273?/\202=b\034\312\275\016\332v\276$\274p=&\341\202=\n`\337=\314.\326\274\361\243\003>\007\'\226>\017\323\007\275\371\003\262=]\207\035\276\321H\207\274g/\204>\320\365\036>]6~<#\225\346;m\271\337\274\203\270\371=\301\235@\276\234KD\275[]9\276\\\251\262<o3\342=La\020\274\235\252;>\316\021\256;\314\347\267\2748xR\275\027\371*>\345\035+\274\242f\200>o\276E\275\001]\221\272\215\217\356\275\371\205\035;\360\271\365=\343;\004>C\357\002\276\366\350\r>\341]\353=zY]<\242IN\276\222`\252=\337I\215>\323\323\273=\273\014\206==\267\255\275\304^\240<\272\377\243\275\351E\034\276\275M\221=XUy=T\252\025\276&&\245<\321U\214>\254\014\264;o#\013\276\234\010\035=2\2534\276\013\370K>\010\336\033\274\337\207\232\275\262\322>=u\215\300\275\023\315\314\275\337\205\031;\313!\235\275\005\025\216\275\037\336\201=\032\374N\275\034\222\310\275\306\205$>\311D\327\271\256\250\322<\006\010\003>cC\301=\372\232\352\275I\2664=\231\013\021>\262\000b;R\004\033<\300\3114=\276k\261\275\276\333\317\275\022\t{\275C\320\202<1\340\'\276\323\373\373\275G\366\010>\302\370\024\275,7\204=\356\364\031\276\207U\210\275\005\004\262<\236\371\226=M\265y<G~\003\275\353h-=\365\025*=>\331\031\276}AQ=\277\224\022\276\225*P\274B\340\245\275\366\254\276<4yg\274\235\313\351\275|O\320\275\304\273\353\275L\207|=\2463\324=\030$\315=~\002]\275\022N9<\332\022\231=\231\256\007\276\302w\225<\\\001\375\273\2204\226=\317#\036\276\335\346\205\275\031\204J\276C\246\263=U\233\335=}\326\003\276j\2472\272\313\257\332\274\020s\372=\266\246\307<\027\361\002>\237\245\353=:\215\222<\017i\022>\003\026:;\007.T\275+\344)\275\262\303\321<\"\323D>o\220\204\275\256\013\323=C\340\365=+\323\006=*\242\360<Uu\007>s\275\212\276\355\364\030>\253\274^>j\357\262\275\232\325\031\276\363\221^=\204\003[<\350H\222=\n\326\335\275u<\270\275\323\232/>\027\230\345\275HI\034>0\203\362\275(X\223\275\2151-=\300\021\255\275\321\340\004>p\003u=\232\324M=$\3477\276\370\250\316=\305[\274:Y:\220;\007\230_<nL\376=\240^\034>\037vb=\2302\264=\002\265C\276\211\272@\2759\266\360\275u\250\331=9\351\024=\301.$= /\257<\270_;=\326\021n<+7\017\276^\355\211=\033\275\247\275\032C\312=@%6=H\313\367=?\r==\016\244\201;\222\337\306=\010\237J=~\336\037\276{\0241\274\204\251\343=\032,\210=\007[*<.\314\217\275s\344=\274.\350,\275\225\306\007>\322zW\275d\n\275=Y1U\276\337\206\214=\220 \325;\204g\036\275\007\264j<\224f\276<g\356\364=x\260e=\252\313\340=\222rp\275\353z\027\275\0011\340=\351\320\037>o-\236=\022t\033;\007.\306\275vX\301\274\265\267<=\306\371\364\275\340r\005\276\350\312\210>S\326\006>\314\230\354=@\305-\275\037\373\223\275\306N\323\275\004\204\207=h\207\200\276b}\304\275-\305\323\275P\262\276\275<\017\323\275z\245\311=b\036\r\275\274\370\306=x{\325\275K\356.:-\370;<\337\200\312\274\277P\305\274\312\210R=p?\033\276A\r\331= \334T\276\035j*=\246\334F=\307\204J>\"m\232\275y\021\361\274[p\300;\032i\203\275P\330\242\275M\346\342\274\002\354\\=\t\036\213=ql)>i\333$\276X\033\304=\236\244\217\275\371\261#>6#\276=\215\236t\276U.|\274\3178=\2756^)>sH\344=\330Q-\276\302\337\251=@\255\r\275c\205\177=\216\254\002>9\372\357=[@\307\273;\033\362<\035\305\307\274\n\2511\276r\325%=\264HG\276Y\332e;\002\244\354\2759\t\353\273\217\016\2079\006\023g\275\255K\320=\236\2439=C\002\216\273/\257\337\275GJ\325\275\312\030\326\274\302,o\275\300\226e>H\220\232\275C\005\367=\214\\\300\274\3119\021=\234\207\221\275\235Y3\274}\202\020>I_\331= \003\373<#\357,\275\216\202a\275\000k(\275\300^\022>~\023\256=h\306(=\333j\252\276\034Tq=$\216W=\305\232\017\275r\231\327=C/N=\300\266:>7A\374=\250e\r>jx\216\2753sV=\273\333\032>0Q\030<1\2741>\362\211z\275+\224\365\274\200\037\227\274A\330\331=\341\350)\275\2530 =\2743\250\275\237\241.<s\355\251<E\322S\275\350\201\303<\026\\9<\265xh=\262\221#>\334\323\232\275q\227D=\275h\007;\203p\375\275\351X\002\274\016\377f<\3522\274=\003\340\351<\230\004\014<c\026\034<\316\2567\275\231\245e>\262e[=\363_\307\274mJA\275\222\205|\275~Q\227=HL\270<\347 ;>jb\267\275\233\205!><\217Z=\0052\306\274\273\267\363=\227\343f\275\222\323N<5\364\002>kz\355\275\312\325\377\275\002\360\005\276m\370\360\273M\260#\2755\221\340\275x\231\362<\326\014+\276?\225\037\276\026\341W\272\314E\010\276*\367o>\373\275\340\274\346\364-\275\033\241{=\361\374\203\275\376>S\274\241\323\207<\316\332\343<\272\240\277=\305C\205<n\227\031=_\031a=Y\223\256=\234\037\027>\231\177I>\375\331\365\275}YE=?r\250\272vn\226\275\370\024\'\275\347c\000=\025\204\344\275d\271\"\276\276\302\336<h\026\376<\000\224\221\273\003\265q<4s6>\204\344\013=\3233\r\276\374\306\241\274\037_\r=\254\376\201\274\353\310\304\275\262\352\033=6\315\006>\'\013\316=tIl=\2255\243={\3704\274\341\325}\275\301\345\241=\333\375:\274\361\3161>\246\317\037>A&\004>\270(v>\215R\232\274\366\307\r\275;\244\210\275\370\2452\276u\030\255=Ha\000\276\336\271Q=%x\255<a\361_=\310\346\013\275&\t\327=4\327\007\275\237\256J\276\242\341\031\276\001\371\252\275\375\215\360;\245\017\226>\253\305\352<\314\215\032>%\222\004\276\314\3551=\225\313\200>\3604E\275\230z\331\274nN\216<\271\364W<\226\t\030\276R\270\022;\344\225\272\274\016\357a\275u\214r\275\274\t\t<\366i4\275s\201\236\272\224\232\203>\311-\241=m\205.\276\240-.\274&r\371\275U\252\026\275\243\022\344=\330h`\275c\034\236:\373~\211\275\227m\313\275\2270\252\2754t\317\275\2720\314\275\306E\t\276\300\'A=E\342L=\301d\r\276%\'3>O\006\353\274\235\355\301<\030\315\247<\006\263\307\275\005h\211\275\215P-\275\272\212M\275\330\032$\276e\013t<\n\020\277\274\341\260\303\275\303H\217;\260\251\215=\006\272\356=\025\371+=@\304\330\275\344\245e>*uQ=\3148\234={\222\221\275\016\001\272\275p\267\233\274\007\276e\274\373\332f>(P\013>\327\235\270\275#\342X>\365\177\340\274\344\223\'>A\242c\275),\364\2752\2201>\252\034\212>\001G\014\276\230\234S\276\227\340\211\2741xJ=\241\231\255\274\001\351\306\275\262\333(=t\017w=\330\020%>\371E\373=\\j\361\275\342\337\302\274\300$!\274m}\252\275\243\360\223=WT\014\276\016g\350<\342\370<>b1:=\246\"3\275\340\357\023\275\333\253\021:\"+\036\274\361\267\226=\234J\031=\267\025R\275|Z\237\275G\223b\273\212l\322=\016\270\313<\313&@=\232dp\275\224\365T\275ScF\275&\313n=\367\"3=\237\343\244\275\004\260\256=\315J\014>\372\375\025>\277w(>\225\024o\275\"\351\024=h\204\024=\214\306\264\273\276\341\005\276\"\r\362<\375\003\360\274\177\023\255\275\002\332V<\240\336A<\n\257\204\274\231\340\206\275-\272\303\275\253\003\032\276\303n@>Q\327\365\275\312\033\224=\017\241}<\264\325%\276#\375\002=\014\344<\276\346jW>\026\250^\273_@\317\275`\t&\275\2403\336\271\245\032\206=\375q\322\275\211\337\017\276Z\227\026>\235w\232<u\364\353= k\256<]\221\033\274j\3756\274\013\267\000\276\036\026\352\275\364\344\372=f\252\r\276\036\014\374<E7\313\275+\004\372\274p\371\327\274\324nB\276\324\231\007<-]I>\221\277H;\265B(\276aH\314=B+\355\275d\273\317=k\376\227=\257!\260\2751\276\335\275\354\361B\2749\270\004\276\307\356\263\275\331\215?9\376\260\327\275\324\351K<5\255F\276\313\3667\274\315\3233=q]\341=\222\336!>X\324\032=\230+\304=X\265\203\274\217\264\265=\177\341Y\273WJ3\276G\334\">\312\021\255=\314\2535\276\257\362\267=\260\344\001<;k(\274\332l\364\274\013\371Q\275n:\327=\377C\223\275\223\346\014=0\021!=\317\216\265=T\310,\275A\t\020\276sJ\007\2764\311\320=\036\273y\275bW\334=\362\275\365\274;\013\362=\311\3575\276{m@>\305%\006=VA9\274\372\236;\276U\327\270\275\211\352w\274S\273\237\275H\216\003\272Gp\354\273\325\023W\276\337\034\024\2759\002\255\275/\243\200\275\270\215c\275\026\000->\005{\250\276\270C\237\276\376>V\275\023/@>\360|\010\275\254<\273<W\313\313<\332\276#\275,&\314\275\007{\013<@\301\032\2754\364\037=\361\356N\276\223\327o>\207\367\220=Z\322R<\000\001}\275X\030\237\275^j5\276\346\264g=\005\211e\275\2577\227=|\333\315\275c\001b=2m\312=V5|\274_B\277=o\236\177=xA#>Lu\014\275]jA\275\r\014\351\275+\376\022>[\325\206<`H\246\275o3\004=\323ue\2752\243\004\276x\321A\276\371\373\\>\315\345w=\311\033\266\275\034\223\236\275\201\372\025>Y\205\226=#y\247<\025\363\346=x\t\327;l\r|<\357\312\246\275\206J\203\275\330\276P\273S+8\276%\016\201=\\\014\n\2761\236\'>\020\332\204;JD5\276ZM\007=`\265 >\230\36319W\230^>\343;\206\274\235\271\373<`\206\002>\3308\233\275\363a\235\273D\2715=\"\026\333\274\375\002]=Y\235w\2764!\273=\326\0042\275z\201,\276\371\3440=F\031\027\274\023%D=\311\242W=\344\206V\275\373\023\305=\311\364Z\276\236\220\205\274\222\035\245\275\322\345\265=\006\242\211\275\271\357c=\267F\367\275\276GR\276 \242H=e\226(\275\351\320\256\275\314\340Q=\354\0103>\273\326>\274g\025U<\0275\301=h\254 \273\337\236v<\346\030z\274\217\347\232=\"\256\250>\326\246-=\210/\326==\371\030>ua\231\275`\336\350==\005\320\275F-q\276XQp\274\234\252\010\276Mk\037<o\373=\275\311oY\275\003F\032;\263\303\252<\227\352%\2740:e>\364\257O=3v\276\275\335C\212\275\240N\370=Y\201\001>58s\276\322\305\307=\365\005\331=f\300n>x\202@\276\340\374\251<\034\265 =h\032a\275\344\332\220\275\356H\027>tsT=\214\255\214=\006\032\336\2753\235\326\275\220\203>\275{\277\354\275I-\342=u\347q\276\305A\020\2768^\r>w\034Y\276\020B\255\275\023\360\344=$\333\256\275^\342G>\016\022\213\275\257\237?\276)\252\024;c\244,=\020\034B=\344L\321=\233\3563=\2765\277\275\244\204\233=V\250\244\275\327\'\240\275\322\257:\276\017\003C>\346(x=\3703+>\021\246\211=L\211\025<\376%i\276z\347d<\206\353\236;\213U\225=\212\033$\275\362<\373\275#\370\260=\275A\361\275>\207>\276\270\346\002>t\352\225=\245\304\030\274\354 z=\302\344\220\275\201\212\007\276\237\220\366=\313\320\341\274uF.>\205\314\010=\300\t\314= oT=\357\270P\275\350\363Q>\326Z$\276\000<\325\275\017>u\275\251n\202;}\276\262=\361M\021\274ZE\357<\026\007\300\275\357\037\240=e\323\343\275\345G\211=t\275U\274\006\335!=H\354\220=(\310\037>\037j\327\275i#\236<\271\211\242=\234\277\\\275\212G*\275\033\305\213\276\321\366\365\275Km\310<<\235\304;\230nS\275\020\303\244=S\352\030\2761\374\250\275v\2566\275\330+@=s\224\277\275\205MG=\305\350\224;\2627.=\374\016\030>`B\227=\014\243\000\276<0\236\273\330\212\212\275P\272<<\245R5=\312\334U\275e\241\210<\327iN\275\246VU=\002\222\315=>\254y<\206U\221\274h\360\276\2743:\265\275\365M\">{\311d=\277\320\006\276s\347\013=\377\310\220\275\335=\000\274{rt\275\261\221\010=5\330\177>\005\026@\276\002$\330=\324\310/=\241\314\312=9\006\316=v*\221\275b\346\204>AuO=\252L\026\275\253\370\r\276):\255\275\3567$=7\232\354\273K\300\374\274\357\335\037>.=\300\274-\177\241\273l\351\200=\322x\003\2769\243U=I\3101\275D\321\232\273C{Q=~\325\234>-\006\211=t\340\324\275yUQ>\232I\246\275\020\376\332=\036\034\342=\260\300\226\273g\340N=\370\025i>\357\223\377= k\016=3C\244\275\233\341\207<(\245\337\275\342\360\324\275\"\367\211=P=T\274\311\220\235\275\033\325\223\275<\237\263\275\014\305O>\314&\313\275(\350\336\274\001z\021\276V\355\000\276y2\014\276a\"=>f\225\274\275X1\023<[\375\252=>{\003\275T\371\277\275\021\370\001=Q+$\276\333c\356\275\271\316X\274z\241\005\276\333\226\023\276\246\030\353=\376_\004\276\234\370(=?u\024>\te#=\243\375\221=\036\2240>cq\013>\000\234\222=\300\363\202>\337\332\016\275+\271\025;\360L\206\275M\273\272<\337\371\203\275t\254\233\275\243\206w\275\341p\027=\010\223\302\275V\322L\275\325?I;\006\030N\275\"\010\247\274<5\253=\2755\017>>\020&=\340f\242\275\302\022\203\275\342@<\275\334\262\276<\222\362\020=\311\206\322\274\207\003H\274Q{\333\275\025\244+=\226\361a=\262\217\010>~\003\372\274\326\344\003>q?\344\275\034\266\302\275\201S\r\276\367\225\325\275\360K\037>\352LO\275`?!\276\252\370<\275H\021\315\2759f\260=\314F*<U?!\276\325r\023=\312\223\233=\276a9<\346\344[<Ru\252<\251-\027=BW\007\274\213Qv\275A0E:\216\263\202\274X\362\030\276\035\372\004>tg/\275\203\240\222=z\233w\275S\340:>a\272\036\276Qu]=\276W\332=\227t\224\275\2215\342<\365x\016=\343*\231\274\356gH\276\351\374\243=d\335\257<g\351\372\274Ew\252=\303\257.\275\260\230\215=\333\007\334<\005\3239=\025\n\346\275Yb\000>(\234\024>_\035\365\275\365\231\215=aoz\275.S\220\275\244u\222\275\232sr\275w\312\323\275\246\261\204\275\215\222A=\307\017\354\274z\253\371=\203\317\016\276\335\223\205>>g\312\275\2503)\275W\032g>BQ\377<\r7B>\275R\313\275hF\345\2746)\375=\r\317?=n\274\n\276sKF\275\314%\202\274?\210\003=\253\\\240\275\227b!\275`\2273=\341}\245\275\010\340\244;\333\336\341\275\347#\016>\322\207*\276\323\324R=X\003x\275\253\262\271=J{\351\274Y\020\241;\276m\366\275.-\267\275E,h>^\214]<\367\277&\274M\024\227\275\205y\207=\325\343O=\207\241\000\2744\216k\275\335q\256\275\202B\021\276\304(\273=I\222\327\275\373:\232\273\372\365\240\274\252 \021\274\256\010\333\275s\357}\274g\304\214=;6\344\275\355\232\000=\035\314\277\275Y\037\263=|\237x\275y\273\226\275\333:,>\260\271\000>\371\211\204\275\231\367\007\275\'o\376\275\275J\252\275JE\225\273\327\004\022<\205\001=>\247\030+\276\002\274\276=\372\337;=B\304\177\274-\016\275=\346\271+=5\020\274\275\273\256\244\274\274\006\251\275\n\231i>f^*\273\0160\223=\271\rM\274N\322O\276G\007\264=@\034\254\275\361\212\t=\303\310i\275\315\333\020=\273\352\357=x\246\207\274\366\270)\274v^\201\275n\304I>\214qe\274\204T1=~\236#\275\275\2405>\220#N\275\3371\233<M:\027>\325\301\024\276\"p\313\275\270\006D=Y\203[<\'\366\373\275\371\342\321\275t\026\033=sI\260=\212zn=k\205\253\275Ty\226<\231\264\007\275\352\003\267\275O\276\007\276&\003\270=$?\001\276 ^\247\274\217g==@t\355\275r\270l=M\253x;\206\315\221\275\363\254\005\276>\022\214\274\370\036\033>a:z=~\002\365\274\311J\017>Dl\202\275\"\220\351\274{\226==\346^\236<\365\200(>\223o}=\240\034\331<\2041\323<x\013\303;8\203\220\275\260\222j\275b\333\t>\307\306\374\275\240\361S\275\003\371\267<\035\3601>Z\n[=\313\326\367=/>:\276\343}y<\212 a\275\302\276\255=\330\317\005>\216\242\016\276\322>\333=;<\022=LA\000;8f\206\275\010\034\326\274c~\005=g\252\003\275s\247\252\275\377c\027\275\365ZD\275\364\320S\276\323~z=E\t\363<U\227\212\275@e\325=\245%\243=\352ls\275\332\374\250\274\004\334\006\275\324\251\356\275e\307\r>\230\354r\276\2435\352\274z\316\263\275\242\035\251=_H\222\275S\'\347\275\327\341G=\264P\030>@\303\300=p\325\306\275\361+\010\276\017!\275=\366\016\375=\317\005\277=\344\267\004\274$\317\t\275\340 s=|\270\254\275\236nm=\016\010D=\270\373\276=SS/\275\311\256C=\352A\205=\303\t\333=C\006]=\010\377\344\275\317a,\275\275\322n\275\2769-\275\311|\264\275Xx\325\275\265tB>M\220\313=!\225\351\274Uo\001\275R\037\360=+\227}\275\255\362*\276\224\025\020>\261\334\332\275t\277\231\274\313\255\244=l\237\253=\235\206f=\0171\247=G\273z\275\265rq=\342\001\371:\320\327p=\226Q\336\274\347\031(=%\305\203\275\265\2230>CmA<\230:\367\275,\234\030\276\035\200\036>\023o\305;\225G\321\274\352F\014> (\220\275\"\360\256= \265\210>\000\026\213\275[\337\303\275P\335O\272\315\274\336=7,f\275\226S\003=\022\347\341=w\220V=\243\345t>%s\344;\tp\233\275G\026U=\325\321\003=\366\313_>\211\202\"\275\360\333d\275oF9\275\257|\347:N\3406>\342R\251\275E\370\257\274\225\312><\037\247\344;g\240>=T\tI= {s=\261m\310;\276j0\276\243R\234<\'\327\254>/\212\264<\212\272\325\276\242\251T\275\013\024\272\275\325\345\372\274,(\232\276H2\014\275\317\034\331=\002)\226\275j\201A\275CDn=\336=\372\275\201+\333\275\026\302\240\275\242\016b=\014\340\024>\316\024\377<\267;i=\356`w=\r\267J>[0Z\275n \222\275~\223\346\273\364\225\375<B\022\200=\023W\017\276\351\330P\275\001`\r>\354*P=\253X\354\274[I?>\231\000\367=\005\254\221=4\2038=\263\224\023=\352v\001>\252\005$>\031D*>\261|6>\3508\037<\2606N\274vW\362=\334\375p>,\304d=<\355\254\275\332f\022=\366\330\351\275\262t\241:\340\272|=\201j\313=r<\022=\t\006>\275\345\256\271=\272\364\006>MR\177=^An=}\230\213=\213/\362;\325\251\022\275ANH\2764b4=E|\252=\341\352f\275\263\256\220=/+j9\360\322\023\276\275\312\256\273\366\256\305\273\357K\001>\201U\320\275A:\"\275?\221-\276\255\356\033>\217\r,>\324\244\240\276^_)>\277\324D\276\232\036\245=\\\"\007\276\"P\315=~\265\010>\033\344\203\276\247\227D=\'\004\035==\356\'=\n\024g\275n\235\211\274k\253\253=:\317\377\275&\255\345\274\203\313y=\245\004X>{\216\255\274tI\365\274\277\352\371<\036\333\361\275H\363\342\274\313!\031\275\205\334R\274\376\302\274<\371d\017\2757(\316\275w+\252=\253\227\264=\257\315\332\274\270\335\\\276\347\225\213\275\306\177\367<%X\330\275\211\334\033>\030\357\354\274\260\267\323=B`\220\275\343x\021<%\r1\276\214Sw\274\341\3221\275\267=\303<\267\254\230<6\351\313\275\220\303!\275\363\033B\274\025d\000>\335\260f\276G\217\324=\0379\031\275\246\257e\275\\\320\220\275\255E==\035Y\215\275\245\"\300<\342Z\324\274\355@H=g\336\372\274\013\221\214\2745\t5\275\370\226\245\274g\324\215\275\372-\220\274\036\354%>MU\022\275\tn\262\275l\344\006\276\353\373\214=\262O\230=q\261+\276\337\360\221\275\034\325s=/c@\276\001^\036\275\330\0143=`Jk\276\227\273\234;\234hR=\263\2068\275T>v\275\233\225\271=\215\276\024\276\243W\243\275\3765\262\275n\210\021>\220F\306=\017r\332=@fA\275,\025\016<\264@\222=\3731\246=+\327\264\274\013c\235\275b\356\276=(\255\257=}=\202\275o\326#>\357\313\3059\210\274\343\275;Y#>X\251_<Xw4\275-\3775\276-\347\377\274\3179N=n\023\211<\367\312\266<f\032]=\202\335\216=\334\001,>A\013r\275\036\n?<8\214\366<!\206\243=\313g\331\275o[\362=y,\361\275\340\353\252\275L\277\330=\222\021\230>\2623\217= \352\000>\346\004\324=R)a;\264\237\211\276c\346i>\237q\325\275\222W\007>)\320\213\274\362\3375\273\"\343B\275\275ox\2754\0032<\\\251\351=\374\345\317=C(U\275\265L\037>f\016\004\275\210\376\373=)W\276<,\255\254;\275hG=F\372\276\275\225\365\014\276`\265\037\275m\023\242=\272\267\310\274\0144\025\276\334\367r>T\243)>\204\010\214=j\027\215\275\025P\244<\275q\233=\274\212\361<\222\317\030\274\000\304\261=\233*d\275\276r\315<7\205\202={\t\024\276\251 a\275*\035w\276\025\371\n\275T\273\333=\330.I>\233$\214\275y\254\323\275\310\025*\276\265\r@\276\231\306\320\273w\032\256=y\366\360\275\236\\\232\275\335\032Q\275V\210\n\275\021i\325<\\\210\330\274\265\331\000\276G\334\017\275\002\262\t\2768\272#\276\231\336\335<\002\206I=\374d<\2764\333\010\275\320]u>V\025\377=\020\247J<n\303\013\276^\\\003\274\0343#\276\263\033\347\275\305\r\026\275y\032;\276\255_@>\203\030b>\235\026\301<\251g\250<\310\273\216\276o\2042\276T\033\246\272\317\"\316=p$\204\275Z\302\006<\\X\223\275}\247\005=?*\336\273\037\234\n>\360\344\355=;\025\367\274\202}\220\274X\263\372=\252\026N=\261\365\336=\"\271\254<&(n=r|\271\275V\"\t=\002\206c<\347\217\361=\322fH\274\t\357\201\274\334\241d\274K\202\274\275T\221\275=\376bQ<V\335R\275\264Xx>+\214\200>Uf\201<\316\220a\276\024G\332=\300\322-\275\034G\315\275\317\306\331\275?e:=W\352p\276\352\230\367\273W\252\356=D\212\246\275Od\230\275f\"\234=Cc*>\207\311\027=q\362\300=c\027\204= \207H\276\224M\230\275\325\304\177\275^\003\343=\345\271\025\275zIE=n*$>\320\214\000<\013v+\273\345\246\232<\222^\372\275\006\371\363\273\226~U\275m\313\307\275\216\212\344\274\325o\252\274\357\377[>\325\r\327\275\363\010\355\274\204Co\275\303\034\351\275\360\236s\274#\330\016\276\032\307R\274\341\014\304\274\317\202o\276\330\202p\276\233J\037\276\367\257\212\275\367\316\"\276\"J\215\275\333\353\356\275\200\326\006\276x\303s\275\351K\234=\t\032\313\275\2545f=\265\026\031=\317\322\032\275\342u\233\275R\246C=\232\337%<7T\003<\337\244\367<y\003P;~_\200\275\221\232\003\275P\263@<v\363\3409\356\306\374\275Q\0279>\272\357K=\023{\215=UWz\275wd\210=\346\034\305\275\365\2354>\217x\375\274\244\020J>\017\362\025\276\314\377\363\275ik]>0\177\327=\366\256\013\274\r\242_\276\345p\201<!\372\362=WD\362\275\373g\264=\205\257\224\2755>o\274~^\352=T\326\317\275\336U#\276\325yV\275S\216\027=\236M\222;\341\017\010\276mU/\276\006x\273=A\335*>B\217\353<\364\030v\275|&\364=\354\300\254=\324.|\275$B =\237\025\357\275\207{(\275y\300t\275\2020\035=\200e\227\275\352\277\371=r\013\233=\305g\207=O\223\007>\014\312\371<\373\337\300<\031\231\241\275<\275\257\275\322\345r=m\367\220\275\245\217\314<\216\272\217< \035\352=\273V\204=2\377\321\273\320t\363\273\325\251\232\274\261)\335=n\334(\275q\314x\275\221\213\211\275h\206\263\272B20>\2772\002\276\022d!\276\206\347&\276\260\216\234=\326e\005\275\311\345j\276\2477\347=\020\314\t\275\037@A>#\303\205\275)\247(>s\353\311=\371\332\272=\345\005\265=\314\354\327\275WMs=\221\370\221\274\327\223\325\274\026\203\032\275\273D\016\275,~\345\275m\010\227\274\035\224\000>4\326\210=IM\200=\020\220\226>\035*\247=\022\304\227\275\202\342Z>\253\232\354<R\314\332\275\301\375\035\275\200\205\033>[\311+=D\225\235\275mT\316\275\216+.<\'\006b\2769\252\031=6\207.\276\325\312i=\252\240\206\274L\2460=\326\232-\276^\245\250\273U?\336<\242\233 <Ej\272<N\215\002\275\241\232\022>\000>\341\275\274\3274>\235\275$=\375bU\274\217\365F=\376\030\243<\374+X\275pS\223\275\337\004\003>\374\236\200=\311`)\275\203\033w\275\367\017\010=\ta\245\274\035L\256\275Mf]=~M\363=\316\226\314\275_\t\013\276\360\330->}\333n=\205\021\374\275\300\rU<\'\"\375\274\324\316\365=\212\230\273;\346\212 >\361F\357=\355\353\002\276y\2140=~q>>\206u\226\275\307@\206=\355\341\004\276-3g\274O]W\276\250D`\276\010\214\232=\214\303K\275\n\034\231\276V\232P>8\361\232\275\225J\244=HC\022<\371-\311\275\350\220\374;D-\271\274\303F7\275\237Q\357\275@\263\276\275\353\253+<\033\3079=\302\315-\274)~\031>\017\t\214=\246G\353=\212&\307\274zJ\311\275\223.\036>\010C$>\336\265\276\274\234v\254\275h\241\004\276\361l!\275\227ym;\221\\\273=Zf\372\275\033\267\207\274w\302F\275\347B\345:w\352\231\275\005\222\246=\347\227\274\274\035\306#\276i\331y=\357\253\257=<\212\004\276\023a.\276R\024\244\275\336\003{=\366\227\313=\037\3715\275\372\236\302<\307\332\016\275\376\224\023\276\3335\\<\013\367\302\275\354|\243\273j\351\225<_\330\277=\373\346)=G\016\004\275EQ\010\276\246\244\305=\341\310\206\274\224\277\031\275\257\007\204\275\023X)\275kQ.\276\225\206\332\275A\356y<3 \336=\355\037\014>\350\271\370\274\321\305\\=\233\332\230\276\027&.\273kD\217=\202\271\026\276\373\251\202=\313\035\242\274W\267>>\356S\256\275D]Y<X\330;\275\232{\325\275\207\373\320\274\242\373@\276\312\206\221\275h\321\266\275\216\2463>\265\264\334\275\\\363Z\275\201\366\025=\006p\201\273\267\244K\275\216\265\341=\271\253\007=f1\370\275 ~\325\275\372\215\005<f@%\275\272OB\275!\027\376\274\314\273p\275\"p\350=\265\274\026\274\214\001T\2742\005\217=\304\357}\275\362ai>\260\215\374=7\260R\274\250\316s\275\244\224\226\274~\031s\275rZ*\275z2\226\275\204\203\366<\010}\272=\350\215\006>6\332S\276\2235?>\250\"\300\2755\014\037>\321\366\003<q\263\235\275\'6\252<\034\n\214\274\234\355\356\275\330Cv\275\232\347\255\276\270n&\276\226\'\260\275]\035\214\275\257/\024>/x\221=\365 \272=\002\376\274\275E8V=\2562\252\274\032S\320\274\007\315>=\313\335\304\275\3171\036>HS!=\340\331\222\275\350\360)\275\262m3<\203\001O\275\363\nU=^f\216\272 %\177=\337\330\017=\3301\255<\230\036\250\275F\345\204<Cl\337=rp$<u\036\256=\022\266\343=\024!\270\275_;_\275\306$\314\273\326\242\023\276\300\016B<\221\235L\274\243s\036>eC&\275\024\366\313=\252\256\001=\031\270A\275V\211\256=N\232\270=n!\311\275To\325=\3540G\276)\t\317\274\353\2423>\200\177\266<\263\247\256\275\251qR=\311\036\003>\216\233\032>B\250r>\366fQ\276\177\352\213\274\366\006\251=\245\320:=7\254\332;\236[\r>\006\232M\276\206\253\331\275\266p\035>f[L\273\213%\027>\315`\026\275O6\257\275\254\031\326=\013\202s>\257#\262=\270\342\025=\006\006\006>\025W\007\275e/g\276\364\201\235=\321\263\316\274U=#=\001\251\274<\317\331\033\275or,=\306\202n9c\023\004\275\220M\324\276\2271\374=\372\306\326=\"\331\212<_@\362=\001s$\276\367\251\205=L\362\036=\220\3107\275\225\251\013\274(\2767\276s\2620>\343T\331=\232%\025\275\204\013\273\274\036\000\252\275\365\013\263;-\325\216\275\027\200C\276\230:W>\362\031\343\275w\274\265\274\237\212\014\275\327\366\256\275\340\270\007>\244t\234\2751\275\244\275-E<\275\276*\005>\226\304#\275\226z\303<\305B\036\275\322h\336\275\030d\276\274L\310~\275\214\313<\274\315\263\014>\346Y\276\275\345\030\313\275\261_\010\276\367\233\223\275\253\303\354=\257\326\n\276\254t\322=\376\336\247\275\314\177H=\376\304W=\222\357\006=F\272\003<|a\247=q\2755<Qi\270:\031\316\213\275\312\240\212\276O\274\367=\250oc= \002\345\274f\264h=;\227\266=6]f\275g,+<\360\027\345;g+E\275\320\275E\275\270\210_\275\n-e\275\266\010\217\2759N\273\274\341\314\324\272\352\263^=\223\034W\275\013S\375=\032)\211\275\372\027L\276\210F\'\275\'\2273\276^Q\341\275~\013\270\275\367=\272>QY4\275X\362\302\274\244\305\3269\206kK\275\250\t\325=\\\355S>\036\315\235=){S\276\2179\r>/\251\005>J\305;=\234T\231\274/Z\311;X<\207\274nHx=\322u\305\275\326\326\003\276\235h\243\275\2128\211\274\010\302\237<\252\237\004\276#v\262=A\311\005=%D\362\274\367j\310\275\264\032\005>\350\236R\276ZS\034\276\027\202\026\275\364nv9=Q{=\204\021\236=\327`\023;U~Y>l\2705=%\2427=\205_T\275\374\211,\275\\\037>=\374\264o\275\366\024\'\276\005\177#>\351$\331\274T\214U\276\371f`\276\247\363`\275a\362\242\275\225\211\255= <\225=\006\331A\275@\305Q\275\033\2101=k(0\275t1\243<guc=\237E\374\275Ct\316<\371\370H=Qc\343\275\373ly=\340\261\030\276\210(\214\274\357\'\210\273\215\"\335\275Wy.=\262\341\337\274\257_\203=%)\202\275\3423\211\274H\260\243\275q\230G>[\322\004=\246?\363=\240\230,>\366\264\323\274\360@\031>\254i\343\275\361?\221<g\337s\273\334\035\265<\245Kt\276\217\231@\276\010\251i<\325\246\016\276\025\345\354\273D\353\360=o\313\244=\213\272g\275\317\321,\276P\201T<\246\216\210\275\345(\363=\3443\013>ed\302;\362y\372\275E\270\311=w\010\234=$dC>2\376\"=\276\320\347\274\254\206\364\275\216\016\203=*\342\334\273\306\025\206\275j\333S;\302\232U<k\370;\276\370V\277\274\266\231H\275\331\333\257<\364f\201\274\221\ri\275\301\014\312\275B\252\243\273MI5<(?\'=\023\303\330\275\344\221\365=\232;X=\261|l<\023\034\347\275\224\237\266\275\344w\245<\200\347+=\362\037\001=Hy\242=\262\177\000<\262m%\275\335W\265=\327\274\016\275\341\260z\275n\200\222\275\325\241!\275\365Z\377=\245u\t\275\"\351\213\275QY\000>]Z$\275q\266\235\275\366\221G\276\336\350\306\274\010\247 \275\240\232\265=\035\213\254\273.%Z=#\324\001=B\035\327\275v\275\026>\265N\r>\320\224&\275\342r\032=D\277M9\273\313Y<)P\255\274e\272\360\274\302J\240\276\0351:\276c1\245\275\342m\211\276&\001{=/\232\235=\031m\262=@-\315\274\371Z \276\245\350\232=\036\335\206\274\203U}=\223\254\210\275p\'h=\005\305\306<%\272\203\274\372\t\037>\027\020\215\2755\027\274\274\270\272\202\275@l\037\275wV5=n\021\r\275\005\330!\273\2365k\274\260\362\261=r\320\353\275\n\242\245\275\n\177.\2755-\016>\016\2765\275\322\241E>9\236\325=x@\002=\274\357b\2754|\342<\262\343\246\274\3754\211>S\032\026\275\240L\233=\360\375\245=\371mZ\276\347Nq\274 ]\240=\221\320\231=5yi\275kZ\362=\311\341\360=\306*\340<\207\366\013=\013\211\036\275\352:1>atd>\354C\372\275\2100\221\275\204\336i\275\360\307\000=\330x\313\274y\334<<Ly\370<\363\332\315=Ts\320=\177\267X\275>\274\351\2750\362!>\234T`\275!h\';\222\327\211=j\272\246=\374<7=4\274\236>\265\320\032\275\323\017\204\275i\373\027\276\006#\304=`\002\371=\252\017\246<O\323\017>jx\253<\304N\031=X\366\030>\017`r\275\327\326,>\344\233:\276C\253h>n}\026\274\220k\t\275\335\372\362=/\220\364\274\330$\002>\325\034\375\275\303\302J<\335m\265\275@\257%=r\013\364\275_\025\002\276\026\372}=\204\250e=gt\017\275F\026\237\274\t\307\347=Qj\241=\2020\037\275\2335)<\021h[;~ \200\275\313\260>>\355\325\200<\202\237\262=\363\260\271\275z\304;>\031\314_<i-]<t7\247=\017\375\223\2757j\023\275\275\203\337<?>\312\275,\351\230=\263M$\275\014\345$\276Qh\256\275E-\323<\202\340\212=\222\336M>\327<\221\275. \026\274s!\361\273\345V\321\275\267\316U>\231\211\226\275\205j\r>\016\343\214\275\304X\221;\324k\373=L\315\344=\273\231\252\275\251g\333\275\373\376\262=\375\243\010>\006**=0\277\214\275\237\322%\276\000\272j\275\"F\007>\020\307\232\275yY\257\275\212\211\334=\006\316\240\275S`\036=\231\r\\=\206l^<\325\374\307=D\332\247=\364\266|=.\366\206<\037\255\365=3\255o<\034\316*\276\ns\306\275\2575\367\275\334\307\236\274H\363\261\275e\0177\275\035\377\273<\351Ak;\350u\251=GL\214<\301](\276\252\207\326=\315\330\375=\325\377\264\275\353/\213\275\342n[\275\207J\327\275L\235\"\276%z\252<E\t\347=\'\311\313\275\020\201\344=\\\347\031>N[\221=o\220\212\2743\357P\276.C\361<d\261\347\273f\343\304\275`\252\324=\250\301-\2762\017\207\274N\0276\276\017^\343=\007\373\312\274\312\226\r\276\035\241(\275{J:>{\303\326=\213u\262=}\033\327\275mS\260=\373\275\304<X\341\r=gv3=\207\356&\275[DT\275\\k\225\275\332\220\2019j\320\250<c\240\372\273j\000\347\275\201X\372=\003\355\252<\333\327D=\3038\337;b\355\304\275\221\"\372\275\030\353n<\216\225(>\337I\236\275\302\\e=\006\304\226\270\262^\350<,\256\262=$q\336=\362\274%\275\212\372\017\276\313\363(\275K\235\007>\351\205\322=u\235X<\270\r\351\275\234E\013=\213_\250\275:$X=|\237W\2753\"4\274\270\352\302\273\305\267Y\275B\207\'=\n\r9=\263\255p>V%\306\275\273\310+>\2153\260=\225\262+\275$\242\203=L\346)>\207s\241\275\233\337l\275\001\2724=\254\305\213<\326\361\261<C\350\031\275\250@.\275?\036\337\275\375\035h\275\001?\215=0!\035\275\271\345\232=O\277\036=\202\2528\276\254\311\212\273b\244\307\275\327\332,=O\254U\276^s\013>\251\255\006>O\262\347=7\227k=\201D\306<\016d\264:\016\267A={\014\217\275Nj\220\275\376i\213=\342\327\030\275\211J\215\275\367\354l=\007N\351\274\235]\271\275\252\275|\275\361\337$\275\"\321\215=y\240\225\2756\177\203=\027m\000\276\353\375\256<\177T\201\275\027\230\217\275\332\2371\276}\321\031>Y-\271<\207\273\200;\017J\260=\027\371\257\274\350\r\260;9\002\252;\022>\224;\2133\352\274\304u\374=}\021\351<\\V\311=2\202l\275\311\357\371\273f\336~=\010\262\031=S\010l=\225\021S\275\035\252+>T\224%>\234\321\232<\276\246\254; 6\036\275\231\203\327\272\314\352\216\275vs,<e\267\313\2752\254\301=\205\266P=\372\235\351=`v\355\274\247]\016=\250g\234\275?\303\353=\031\246\267=\350\3001\275l\240\206\273\031\350P\2740\327\324\275\374\311\312\275\232\254\314:\024\376\302\275\260\222\317\275\021y^>\227\213\302\275\031\202\';\253\n\264<\021l\350<\313H\324=&\005$>H\361L\275\374\275L>8yJ\275\007d\202>8\\\003\276\200\205\037\276\007l\200=C}9\275\303\013\340\275F|\031>\315|\013\276\330\225\">\314o\252=\0378\271=\215\255B\275\246\316\255\275\223\362\024>BgC\275\221\"\370\274\336\352\001\275Qk\335=\324W\002\276;ry=\311z\037=\253\210\220\275-\370\346\272\315#\034\275\207*:\275:\330\352<\231zp=(\236\302\275;\207\177=\351\206\250\274\221\233\205=B6]\276\263\250`\275\357X\024\276\264\236\t=\326\033d=S\001\263:\006/\002=`n\016\274\373\2575>\201\275\226\275\324\2327\276\371#\302\275\247\033\223=\266\'\226=\225Ea>\336\244$>\324%#\276\2561\213=\206E<>j4q=z\013\222=oA\237=4\255i<\372\211z=rB\013;\007\n\202\275\371\020?=\017j\374=\016*\032\276\275\254\344<\334\330\273\274\022\213\212;wD+>\237\206\276=q\332\300=fs\310\275\350\325\235;\002b\323=VR\205\275\252\332_\275\370\362_\275\020\340\330<5)\233=\016\276\201>~\325\313;\311\276s=Y\301\261=\324\215$\275@D\034\275\361b\253<\256\016\205=\275j\360<,\201X\275Y\371\276\2754y$>\332\256\360\275\230oV\276I\260\337<\252\265w=K\374\340\275\243$\313=\002\214:>\032\211\036\276\364\344\3349\n\331\';_\021\">\203\231\363=\0208\274\275\300I}=\210^\021>\"\363,\276\273\262\237\274\233$!\276X\363`>\321\264\312==\261\025\275\022+)<\234c\026\276+\377\227=\270\302\223>w\313U\275\217\362\253<\007\361\224\276\354o\352\2759\326\304\274\026{/\276PoI=9G\n>\217$\r\275\324\033\351;\231\303\276\2755f\267\2749\213\335<\310\307\315=\'\221Y\275\200q%=\"\236\357\273\372\243\221>Q\305\324=_\3031>[\340\235=\031\374\033>\213kQ\275\245&\213;\342a\273=\302\360\224\274\272\266\313=\235\304B\275\207\"&\275x2c<id\036>\372DO<1\')=@s\332\275\264)\314\275I\257\177\275a\021W=v`\247=\033\223\315\275\355R\331=V\344e=\334\353\361\275\007\246,\2751\2162\276\343\370\"\27592\300\275\270_\032\276\256H \2746\337m<?A\331<\010)\223=\022\247\212\275\353P\377\275\313\360\365=GG\007>\333\2572>\037\205\022<!\017\231<>v\243\275a\322\227=\251c4=\376\351$>\254\374\237\274\2223\247\274<\227\022>C\223n\275\001\347\036\276\0140\242\274\\\353*>\203\023\t=H\201\261\275\367\311\211=\247\3657\27610(\275\231\253v\273\'\342Z\272\376\366\232\275\005\214\230=\251C\261\275\215*\263\273>\343e\276\'\026\301\275\003WO>\344R/\275\304\221m=\256\344\250\275AD_\276W!G=\036c\241\2751\327\374<(\256\034>\001r\002\275\323\277\002>PQ\352\275\303e\"\275\254\021\367=F\265\365;\261\357\322\275\331\257\001>/`\004=\030\240\2339&\357\220>\220\333\324\275\255\363\010\275|\375\357\2756|\343<\305S\r\276lD\201<\200u\355\275\237^3>\nr\215\275\364\010\245<\275!w<\366\251Y\275\032\320\n=R\265g\275\030M\006>\350|\256\275\353m\367=1q\032;\353:|=\227\265\276\275\252\314P<&\257;=[\244\245\275\255\203o=\037\214\004\276\331\325M=\027\243n\274\223q*=\220\030k\275*,[=Y\240M\275\t\273\317<\226\255\251\274\246N\357\2755d\237\276_T}=\240\367\237\275o\212\026\276gJ2\275=\212\202\275\033\355\017\274\016!\344\275\030N\025\275\177\315\023>-\313\362\275D\334?\275\262\306\317\275\306_\306\274\257Z\026\2754G5>%\226G\276\213\336s=#$H\276E\241\003\275.\326#>\365\025\243\274\203\357\351\2757\222\231\275*\345R\275\275\256l=\316\342\234\274\214\271\035\273\330\2705>\247d,=\005D,>\347\242\310<7\226\205\275L\325\333\275\247;=>\273)\270\275\036F\223\274!\366Q>a\034\001=f\255\364<\245\212\037\275z\353r\274\\\307\017\276W\364\030\275\332&q\275IQ\217\274\273y\222=[\202\256\275\362iD\274l\232\253=\353YM==\300\231>\355\300)\275\232\315e>\3420\006\276\na\002\274\224\0346\275;Ws\275V\377?>>\263\251\275\245\351\024>dh\036>AN\276\275\237\336e\275\234\266 \276\2727C\276\351\354\345=\320.\206\274\220!/=p\342\252\274\374\271\271=Oa\217\273\321\000\272\275{\240;\276\302/:\276/P\237<\003\233\260\275\235k\033:A\266\361=\233\372\317\274b\264&\276b\3112>M2\211=\315\205\251<\350\215\250\275G\026\353=\352\243\314\274F\344-<\216C\271\275\345\263\302\275n,\240\275\370\254&\275\273\272j>\204\345\371<L\254\027>b\337/\275\257\021\221\2748\354\337<\220\352I>\276s\371\274\000\rk=$\010\263<\331\271R\276E\220\206=K\275\250;\334\177\201\274\232\020\270=g\247n\275o\200\022>K[\371=\230\234J=\334\235\315\274\204Q\352<\350\305\355\275\236[\333=\312\261\235=\375\346\002>\374?\213\275\024\355\214=\252lI\275\365\202H>\230V\n>\007\223\347\275`\261\324\275\304\363\225<\275\315^\274\233R*=-\237\000\275Q\275q=\305T\323\275\251\003\303<\007\347=>+\326\365=N\355\234\275\327xT=\265m\266\274\237`\313\275=!8>\224\205\234=A\266\"\275t\372)\275\372t\037\276\0352\037\275J\240P=\320sh<\317JW;$R#=\252\263%\275\213\'\005<e\327\335=\223\336\346\275&\243L=\315F>=\240[.\276I\204f=\002\031`<p\233\263\274\203\356K<;U\331\274B{\007>\365U\223\275\371\213\323\275h\264\351\275\257\"\202\275\240\354\r=C3\211>\302\366K;\260\\\200>\302\310L>\273\264\010\276\'\301\341=>\311\016>\321\346\017>\342\224i>\251~\367\275\316]I\275\307\354\001>\261\2174\276 \354\231\275`\240\013\276\234\023\001\275\364\212\246<$\343\323\275\242\274-\276U}_=\377*\377\275p\311\324<\230\005\002>\037c\302\274\2649z\273\264!\001>\344\214\020<\264\3275=\026c\205\276\017\377\360\275\226!#\275r\371\236\275r\276\252<\263\342\277\274\2542\364\275\241\335\317\273\303\2343>!\252\347\274\343g\251=2i \275:\221\017\276\324\2040\275\265\303\321:5yD\276\333\023l\276\365d\334=\362\235C\276\001;\014\276\322\301\356=K`\024\275\2500+>\337\277*\274\3064\235=\177\313\035>\234~\t>ZV\330=\354\224\266\275!\334]\274\005\236\300\275\356\305\344\274\')\240\275\020\245\216\275\304\270\225=\257\207{<\314\314\022=\360\327\222<\370\"\217=\220B&\275\'q)\274\217\335\240\274J\366\241;9\365\217=\243\357\010\274\373x1\276SH\003=\332S \2767C;\276>H\223\275&}v=oX\326=\301\231d=O\317\021>!\227Y=\032\217\034\276\345\326\301=\336X+\274\031\024\220\275\264\320\274\275\2756N<i\276k>I\026\341\275\347\347\004\275\\g\206\275\314\223\244=\242KZ=\334\036a\276h\335\300\274Uu\023>\212\362\\\275\017\246\334=\302[;\276N\277\372=\266\200\022\274t\227\230=\205\346/=e\371\246\275\340P\214\275\305-\223<\365VB\274\321\004\017>6\221\r\276#7j\275\224\031\227<@\243\020\276`\017\357=\342\033\005\275\224\260\026=\245\014#\276<\362\001>\036\177\326=_t\023\276\023\224\275=:\274\t\275~\203\210\275\007Z\254\275\324P\231\275\252-\367\274\267\355];\303\316\305\275\271\342\332\274\344\005\235>\256\223l\275\2311\213\275 Q%\276\360\024\232\275Z\n\233<\027|\216=\334\353\016>^\315\177>\204\2733=\356\321\322\2755\3477>\034\376!=\n\250\206<\324\251k\274r\2400\276\272~G=\036\271;\276\025\034\255\274\324\'%\276\252\256M<\177U\016<\315\004\315;\017\r\313\275\231\014\361\272\255\266\375\275\256\300\252\274n\014\021\275%*\000\276\347\245p\276N\023\n=RA\302\274o\264\017>\247\235\211\275\251L\016=\251I\270=\251\362\2547\222\265\250\275\265\320<>\207\014\004:\304\252\035=Am\000>\260\213\242<L%:>\302G[>\330)\200=3\336q;\t\322\314\275\365|2\275\316+a\275!\303}=\247\371\306=D\325\203=tL\370\275W}\222=Dt4\275\237\346D=\304\"\020;2\305\377\275\357\032v=\361R\235=\252V\345\275\014-\023\276)\277\027\276\340\321\220\275\030\370?;\003\2552\275\332+\315\274^/\357\275VV\010\275\373%\010\275Z\335\262=\301\351\242\275\230@%\276,\273\030<\031s\215=\000\0313=R\332\252\275\331X \275>.\357=\266z\261<\223\334N\276\314\231)>!f\250\275\317\301\325\275\363R%\276\241F\350\275\022\323!>\366bR\275WK\353=\345\232\240=j\026\205<o\031\340<\371\343H=\205Hn=\t\221S==\3710\275\022\223\342\275M\315\255\275\256\211\367\275\315p\000>\375\025\246=\347\230X>\010M\215=mD\023\275\007\236\222\275h\236\352=\007o\203=\307B\316\2758\330\251\274\263\343O>8x\257=\037Sk>\032W\267\273\260\314=\275\270?\303=\"\034\223\275\037#o\275 \205a=7\312@\275L5\033\276\350&\023\275\364\277\033\273!\\\022\276\372\261\264;\014\315]\273\357\230\333=\310\314q\275\004\245\221\275\3146\005\275\002\010(>-\224\315\275:\177\204\276&2\317=\rO\337\274\256I\276=O\367?>j\243\205=\341\206e=\366$\371\275\266\'\005\276\375=Z\275\311\016\224=.jv>\034)\274\274\325\213\213=\033\266@\275m\007\211<\375\373\000\273\315\223&\276f\2711>\324\276\271=\326m\327\275\013\231\330\275\366U\223\275\253\335\037>l\241i\275\243\211t;1\227\253\275\244\233\345=\240,\001<Z6\263<%\224\372;\025\036\275\276o\013\032\276\235\014\003\275\221\030\201>+\226\236\275\353\023\330\275H\263\022\276|\003+>m\006`<W\001\275\275{\376\226=\252\031W\276A(\242\275sk\272\275\'K\220=\266\245\004\276\004\221\024>\004\257\'=\312\2755>;\336D\275\314\247!>\371 \225\276\331z\240\275NZ\017\275\346f\025>\331\0055=+t\333\2743{Q99]\033<y\215\375<\260\037\236\275H\257\371=\246\305\035>\257\223\024=INy>5\351\002>\250\344\250\275Q\361\001\276\372\356T>\207\342\253=f\316\352=\323\365x\275\261\020\014\275\301\2556;\316\3405=N}\361\274\r\275\344=\301$\271=\323Ce\275\274\226\263<\350\005L=\253PQ\275\356\254\215\2757<]>\374\006\300=\013\222w=9\n\n\275\017{\027\275\362\254\035\276,z\315=\250N\201=\001\224\224=\374\016\033>?\020D\274\212\257Z=K\203<<\340v\225<\017qn=*\372\036\276\013J)>:>\006\276G\302:\273;\r\250=1{\327\274t\211\262\275K\210\035=\220\336@>=\025\023=\305\334\272\275oV\032\274\235\247[\275\022\322\260=H\246\324\274\367\303\017>Oa1>`\310K<\217\233\215\2749\305$\276U\2130\275\336\231*\276\204\347\344=#d\264\275\006\177\312\275&\r`\276~l\210\275V\024\315\275&&\223\275\227\307\350<\304\334\363=\317>\001\275\253\002\300=\274\341\271\275\341}R\276ey2>\257\203\200>\215\261\371\274%\216n<!!\032\276\373\370\000<nE\271<O\235>\274\245w\246\275\330t\001>\307\205\262=\010\346\313=\254\007I\275x\371d=dG\001\274:\322\274\275\331\203\"\274]U\340\274\325\217\271\274\013\211\235\273\221,\031\274\224PJ\276\211I\315=~ \272\275\317\234\236\275t\366\020\276\375\016Q=\324h\207\274@\1774>M\366j=.\036\037\276\201B<\276\377#\024\276\001G\227=\017J\260\273I\200z=o\0107\275\266\177\363=9z\020\273%\2511\276gA\024>\317s\t\274eB\024\276\024\323\266<\271\177\003>\275\031\243=\2304d\275B\254\313=q\264P=\237\n\361<r\300\345\275\310\320\206=\014?\270\275\336\331\250=}A\270\273\026\375\227\2755\017\002>\216\266E\2751MJ>\037\261c\276\274s\r>d\303\010=\234A==\024\332,\275\213\361.<\246]#>^\361\037\275+\345=\275\211\016z>Q&4\2760\0223\276\242~C\276\014\263\201=\371*\305\274r\376y<,`?>\372a\360\275\017\276\021\2755\227\212\275p\262.=`\022\366\2759\357\006=&\267f\273\021\277\213\275M\016\330\275\306m\\=Y\263B\275\316\t\302=!\354\307\271\243\0337>a\021\274\2756\357g<qC\321\274\314\'[=\236\305\356\274\261.\001>\263\305b\274\353\035@\275x\316\"\275\nt\247\275\234\370f\276\265t\267=e\264o=\254 \230\275)\346-\276\200n\204=\242\355\t>\317\023\232\275h(\340\272\351\025\243\275\277\234\337=\313\251^\275\274\333\006\275u3\341\275\336\312W\275<\375\213\275\357\223\212\273\226\245\374=\353\253\033\276\315\245\203\275Y\014\231<\323\217T=\005\214G>\202-3\275\275\017\033\274\'\372\364:\353\210\201\2741`\r\275\366\364\302=)\262\253\275F\212K=q\270\336=\324\267\213=B\361L>n\2709=\212\023F\276D\260\033>\375\212\021\276N\245\364\274\017V\270<\207\302\244\273E\364$=\366l\210=\370\344\026\275\350\257\307\274<\331]=\232\025\226\275\314\025\007\276\005\366\260=\240\016\036>\303\t\223<*6>>G\356\233\275\t\203\357\275y5)\276\rd\013\2758\t\025:\200\214\327\2740~7<\244\367\310\275\236@\021\275\337aX<`\215M\276\246\240\376=\007\352\031>\203^,>\022\230\020=n\371\010\276\036\231\215\273 (\212\275\227{c=\003M\214=\263\355\301=x\247q\275C\207\200=\351\305}\274X\273\300\274\024z\017=X\233\021\276\361\237b;\216\032\322=\257\030\033\276^\243$\276z\273\354=\301a\256\274\247\266\272\275q\\t=gc\241=\004\357\322\275\240\025\316\275\205\203\023\276\026\374+>\254Q\336\275\033%\006=mS\234=V\214z\275\337\331\221=\313;\334<\024\346`=,x)\276\246\222\242\275\344R.=\235l\327<\206\0022\274F\003\204=\366\216#>\274ts\276Ms\177=\006\016%\275S\214\030\2755wt<\344\307H>\323R\351\275\225\022C\276~\241\324\275\214ZZ\275v-\362\275\307$@\276h\002\205=:\301c=\252{J\275S\032x<\256\215\375\275\023\225&\275\377\000\376=\243\275u\275/\020\300\275\253\n\273<h\352\261\275\306\026\211\274`{h\276\214\013\314=D\037\235\275\232\350\001\275\205/\250=\376\305/>+\317M\276Z\244?\276\255\227H:\307\273n<\232\014\253=\"\t\267\2757\203\232=\320hq\270\264}\037<\332%\027\276\311\214\370=\272+\037\276\211V\220\273\275\303\222\2741\343\345\275`\034a>\311(\322=}\347\210<\315\340g\273\210]\036\276\220\244\000\275^\366\232\274\312Z\347\272\346\346\333<\027_\222\275RP&\275\210\236\016\274\371c\023\276\204\007\314\275\33693=\236\252\313\275x\t\233\275\216\237\256\275S\235S=jA!\276\365\222O=\303\343\377\274\347\032\231=\037\334)\276\001\037\241\275\247e\271=62\007=L\233&<\320TX=\222z\244\275\367-(=\250\211L\275\273\026\366\275a\310\216\276\223\365&=,\0149\275\252_\322\274\224\240:=\022c\005>\035\374\272=]\374w\275\303\323}\275\317\227\005\276\023\343\320=\307X\305\274\243)\223\275\371\375d\276\231\036\236\275\370\327 \275\035\341\023\275\245\226\272=Z%T\275\201B_\276.B\355=+>\327<P\244\006\275;)\005\273\277\231\227=)\247h=f\271\314\274\"C\r\275\330_X\274\313\305\327=\r0\234\275\"\342\033=}\263\376=\035i\232\275\007\324\327\275\227\255\367\2737F\256\273\256(\357;\370E\022\276\254\372W=@D\016\275gXv\275\2274\244\27438.;\311?=\276\0323\202\271Y\'>\276\334\341\272=r\302H\275*B+\273\333\213\205=\036\027\232\275\005\221/\276\312l\006\276\256\036\332\273\377\247\366\274m\2160=\255k\332\275snb\275\260\223\342\275\271\207\373=\347\'\312<\361\005\363=7\\/\276\335!\212=\267\001\021\276\362Y&>\334\251\237=\303\246l<\373\2437>\032Z)>g\271}\275\033\304\031=\273\354a<\217\341P>\266b\215=\233\010I\276\340\226\257=h#\266=eyq\274m\000}\274Al\312;\355\230\205=\304v\331\275\303\027\204\275\305\345\020>=\366\371=\340\026\014\276M\356%=\221\331S\274\203\\\215\275-\352N\275\330\255W>\000iY>jF\014=\303$#=A\254\024\276\333U`\275\230\021\263\275\331\356\003>\262\026B\275h\235\263\273\266\377\000\276\331j6\275\346\210/>\371*\350\274h\274\301\275Q\316\250=\010\023\002\276z\257\233=L\254\n\275/\200\'=\213!\t\275\306\277\272<\003l\241\275Te\021;\364\004\013\276\217L\334=[\213\374\274\361\306g<\001\373N\275+\373@\276/g\322=\303\201I\274\274\034\250;\3016\313=\002E\031<\253X\217=ql\022>\377H\014=\024\tz=.F\242\2742C2\276\224\330W<\016\277\311=D\0219=\275\323\273<\014<.\274t\243X=ILZ=\246$\324=\215\373\362\275\257w\037\275\3458\025=Z\251\345=\207\345\036\275\224\210\265\274\230%\034=\212O\354<\021\241\375\274h5\004\275\002\202a=\246\027w<\226\3576\275*Q\341=\2278\203\275Ju\355\274G\253~<0\237\212\273\324\360I\276\320l\236\275\316\217~<\340\230\022\276\326\243\205=j\"T\275\303,\256;\3123\023>%r^=\010\342s\276\364\231\\=\0373[\275\266){\275\013\320\325=\336\251,<\013\222Y\275L~\344=\203\273\273=\021\364\255<\\\026\313=\257\177\237=\020\335\316=\204\265~=\330\376\033>\253qE>-\213\257=\216\274\323\275\343\272\032\276lu\030\274\222~\376\2754&\333\275\313]\022\276\313\246\373=\311\330\376=\244q\211\275Z\300\366\273\323x4\276+\005\234\275?\241\344<\213PI>]X\311\275\264\026\307=\367\250{>\236\365U\276\010\300\203\275/\214\251\274\365^\2579\363*\"=%S\001\272\207\013\213\276~\006\023\276A\371\024<J\360\274;E\000\341=\335\322%\275Z\246l=\177\035\006\276\300\r\257\275\"&!\276[\001*<U\264C\274\361\330\315=&\211&\276\376\333\334\275\214\321\321=\r\261\260;\307vG>\277$\020>\034\316\n\274\340\320Q=\271\177{\273\364\322\001=xa\016=I\333\217\274p\212)>\341\025\265\273\261\345\227\275C\224\002\276\353P\317=\211\2437>Yui\275Nm\342\274q\322\273=?\337\n\273\301\3533\275\355fl=f\232\017\276\335\031c=\277\272\303\275\277L\341\275\303i\260\275\212\317\002>8\311]<\000@\213\275w\246\002\276\332N\322\275EAT\276\365S\204=\366\373N=\217\367^=c\240\201=k\3471\275\\p\211>\304\205\361\275\201\377\370\274\215}\274=\335\364h\276\322\311\223\275a\344\030={2\231<\324\023)\276\376\233\305=\007K2>^\344\275=\001\231T=\314\275\237\274x\223\272=\347\2653\276\317\242\325=}\333a>y2\027\276\273\253\250=U\001\316\275\253\375\231\2753\310:;R\277\036\276\305-\023\276R\025\344\275V] \276\365\265<\274\375x\365=\260\023m<=\\J>\030\222\210;\356P\210\275\325]\023>%\346*>\342d\217\275\312q\304=\267\253,\276\025!\204\275\177\261\005\276mu\311\275H\006\347\275Q\343\347\275|\177+>\352JD\275\261\361\200\275F.\312=\332\352\021\276\271\216\372<*\232/>tZ\202=I7P\276#y@>n$\246=\215\254&>\213\252\010\276B\301C\275\202\230\300<|\367\300\273\300d\206\274\233?\255=6\\\246\272U\266\314\274\207G\262=\242z\213=\302\250\366\275n\r\026\274P>_>\270\310\310=\257\353\204\275e\035Q\276j)\021=\311\263\351\275\341\030\256\275\236m\003=\225?\357=\300\026n< \177\223\275\177\320D\276\300\017\307=a\274\024<\274p\364=\247\323\200=\\\300W\275\363\207\035\276\252\247y\274\013\034\301\274\335\016\227=:\231\364=^\213\201\275\0142\262=\023\332\254\275\253\267/\275\247\236h\276\313\211\r\276!\227\312=\213\351\270=W\212\357\273\013\2246>|A\244\2740\336\307=\212s\251\275|\367\n>*(;\274\232\213\025\275\017CG\275\2657\031>\374\025\210;6\321\243=\226=\256=\323\357\260=\244\345\246\274\225MI\275\212\014\010\275\311$\020=HC\033>\301\022\345\274\217\233\372\274\300\321\022>{\336\360=h\333\301<\247\354\276==\004?>YbC\275\227gm\275\034r7\274X\001\003>y\270\005>\273x\007\2757x\032>\333^\277\274\375\300\301=\310\341\200\2740\2241>a\321\260\274\213\275]=\304\362\313\275\324\003i\274\272\032k\276%Jv=\217\234\255=\\O\006\276t\343\202\274f\357Y\274u\273\242\273\032\247j:\247O\002>5\272\003\275)\020\234\274\010U\014\276\306\021\210<g\255\217\275u<r\275\2751\352=\375b\202\275C\013\005=t\266\222\275\255B\250\274\237\213\222\275\300\023Y\274\022\354W\276>_\346\275\201E\213=\352\276\013=\311\377\224\275?NQ\275\236\373$\275\340\253\037\274\341\265\220<]$t\275\035\340\026\276\n\313x=U$\235\275wv\312\273\025\230\271=\361\273e\275\232\213\021\276\005E<>m\2108\275I\310\234\275\255\314T=AV<=V\210\221\273\205a\213\275\301\343\330=pu\207\276\325\203\340<\t\354\333=~\301\375\274u\207\005<N\025\255\275\204]6\276\221\226\251=S\253\233=\001D\205>t\251\246=\265\036_\276\2273\264=\021\007I<\362\021\356\274d\213`=\232\030\312=5\216T\276\354\227\323\275\016\017p\275\303UL>\214\022$\275\372\026\235\274\261\347\r=\261]\"=v\027%>\377\022f>\370\236\353=\227\244\261;w\235b\276\244\353\211\275\305\351\222=%\315G\276\005\253\016\276\277\2064\275/v\244=\213\330\227=\324q@=\320U\035\276\363\342\250\275\246\001\033\275\006\032\226\275_\nv>\350\n\320\275\3467\013=\213s\230=W\016Q=P\361\312\275p\225\236=\225\021\326\275C\360(=\372h\035\275\206z\230\275F\370T\273\014\2537:\303[\030=\323(+>x\307\242<i\2334>,\271\207;d7\257=\227\030\343=\211\254\211\275\242\324\253=\033\007\327=\241<\321\275~-1\2758H\005=\177\031\320\274\263\244\253\275))*>p\202\261<2\221k\275_\332\n\2756:]>Z\334\351\274v[\006>\362}\216=\371E^\276\270P#\274)-x=@n\270=\013\357\232<\315\025]\275\031G\014==; =9I\237<B#\207>\377`\334\275\357\363Z=N\002\326\275b\274\205=\032\233\266\275s\367G=\234\305\320\275\316\275\345<=k5\275\354\\\236=6\017\224\275^\204\006\276\211<\213\275n\245\203=\271\276>\276\267u\020\275*\315\251\275\216]\031\275\226\300\247=\216?O\274\336M\214=\002I\263<\213\212\210\2753\207\253\274\177B\021>\326\361O\275\270e>>\025\210-\276\"\335e\273J\366%<*P$\275~5\010\276\302\r\325<\035\342\206\275,Li<<-y=\361\037A=c\201\311\275\353\237\023>\362\t\237\274\307\235\022\274r\256<\274\261\270\027>\276O*=\231\330\013>\000z\036>\021I\224\274\301\355\226=o\353A<\003\031\213\275t\351\207\2740\271\354\274\203\2305\270\202S\223=u\202n\274\342U\366=\253\177\254=\242d\346\275\314YZ\275\347}\214=\206\3660\276z\342l=\247\2336>\250\231\214\275\202.\313\275Qmp>\302-\364\275\364\272p\275\022\343\307=\334\nM=,\037\314=v\022-\276\312\003\005\276\317\300\002\276\211\316!>c\232\255>0D\220<\004\366\311=\373\271\033\276O\340\227=9\0334=\356\000\034>\246O\222\275\247M\314\275(S\004=PG\203\2753\246\210=?\316t\276\331wW\275=fu\275\007\323\225=\005\233\224\275\371\021\334\275\313E\313<Dj\216=H\243\316\274\036-\305<\371z\244=s\264\214\275\246\242\024\276C\000\251\275\230\r\355=?;\213\274!uD\275\002\360D=*\274\346\275^A\327=^Gx=\300\rC\274u\221\020>B-v\275\224\t\374=23\346\274\014\020\257=\\\354l\276x\020N\276\311\345\021=I\241\260\274%K\276=\235\346E\275\021\245\352\275]\337\354\275!Q)>\332\276\023\275\033\220\253\275\243\200i\274\245\327!>>\204\241\275!\273\270=D\256(\275\237Eo\274\021\323!=u\300\306\274\371\213\036\273\271\370F\276\\\333\244=)\\\361\2755\376(\276\007Y\233\275\366V\346= \304\020\276^|\277\274!\314+\275\371\253L\275bT\257\275\370\321\021>\302\031\037>\345Mp=F*\214\275\373Y\355\274|-&\274\242\2039\275\355\305\356<\360)Q=\016w\331\2748x\300=\357\025#\276\252\024S>:.C\274\277\265\013\276/\212\\={\226\362\275\303->=K\323#\276\2129\343\275\351\301\034>\371\200\323\275L\327\306\275\333\024~\274\313x\n\276\313\222\275=\004\016B>\3326 =WN\025\275c\235\305=\310\025\024>\361n\233<\210\357\252=xQ\251\275\20516\275\0042y\275\207\371\004\2744Nv\275\313\342\270\273%\362\372\274PV&=\346\376*\275S\335\031>\341\241\177\275\374\203N>CL\227=j\031J>\001\350\320<6 E=7\0331\275\035\333\377\273\240\202y\275:0\311\275\373o/=\2254.>\027\304/\275o\211\236<\376\203I=\242\271\337\275\206\255\220=\230\022\235=B\034$=.\032\263\275nj\253\275.N\233\275\244\206\376\273\252\253n\275\212\210\205\275\3254F\275\245\224\361\273\237\226v\274~\327\273<\211\361n;n\177\203>\307\210C=\330\320k\275\240\227\345\275\301@\374\271\'\325\320\275\341h\332=6g\325\274i\276\272=\374\311->Z\302\t\276\234\021e\2754Gq=\227\241:\274E\360\014<^\247R<k#\310\2743:\003\276\'\311\252=)\316\373\275\340\351\311<\035)w\275\207\366W\275\024S\300\275\374\361Y\276|\"\370\275\273\000\260=L(\233\276\361Nn=1\030\337<\337\020\021\275G\r\244;$\313&\276\220\036\037>\215XK=\264\362t\275\'\000\376\275\262\222\311\275P\250\273=R%\337:wY;\274A\017F>\242~\033;E\200\235\275\312\376\275=|\323\032\276\312\262R<\362\303/\276\361\233\205=\310\367\227\275XV\342\2750\245\"\276\301U}\275\003]\026=\202oE\276&\232\262=\356\210\346\275nC/\2748i\276\274\312\332\317=\223>\344\275C\211;\275\267\315\222=\345\034\201\274\331`\207\274\r\n\001\275~\310\371=\000t\222\274 \272\347<\005r\037>\346\004\t>\3323e:\334\231\020\276\030\024\335\275\257oA\2754\312\177=\305\035\257\275\005\226 \276\n\272\240\275f\356(>x\247\337=\3126 \275\247\377P\274%\266\207\275j\000\246=+\335\n\276,.\310\275mHT\274\263;\025>l\354\326<\341\324>\275\322\245->\370\\\232\272\372\013z=\271\255\234\275\202h\255=\245\027\227\275\272\222\254;\347\241*\275P7\231=\005zw<\317\342s\275\311\031\013>\354Y\224=\007|\005>D\245\322\275k\'\373=\330+*>\276\373*>\214\326T\276t,\017>i\322 \275\230Z.\276\224\345\266\274\254\240)\276p[\361\272~\'C>\025K\247\2748\227\313\275\024\256F>\027\227$\276\0302\006=\222\230M>\251\211K\276\201`\242=\2054\257<1C\272=@\301m\275\035\304>>g\r$<\322\251\236\275k\367\262\275\336[b\275\035S\235=\203\010\210\275\002\306j\275\211R\010\275\216\210\241\274\200\264\036=\344+\037=a\3467>\366\265&\275\035\370\016\2768\005h=\240\253i\275\031\2306\275\216=\226=\344\003$\275\366\n\322=\3266\036=\215\360\013\276\021\266\236<>Q:\276f\303\027\275/\322\304=\313\333Y=\235\231\360=\336fK:\271\003\366=.\266\244\274\032\256F>\225\265\225\273\216D\224\274$\036t<\036\026Q=\316\300\202=\255r\301\275 Wt=\215\345\356=\237\257\216\275\016\215n>\232Eg\275\251\275g=\237\034\035>\252\034\243=L\013\233==\021\262<\267\030\033\276\311Q\321=\320\343.\275\243\262\003\274C\016M=\n\233V\275\366Z<\276\277P\362\274Y\223\301\275?\203k=\245\246\221\275\036\270\005==\345\357:\347\217\215<\247\026\023\275k\372O>5\2778>nd\350\275\372\247\336\275{1\321=\022p)\275e\374\341;\010h\342=.Un\274\334\342N>\256\317\275=\323\220\261<\316\242J\275\310\334`=\3469\027>\210N\215=\216\020K<\240\367\242<\267\371\257\275b\017\276<\177;k\275\014\211\022=\340vy\275\035W\340=\007SD=\027u\274=\215A\241\275\010: \274\302T\262<\201\210\245=]\346\"=\320w\315=n#\243\275\224\243\261\275G5e=u\226\314=\007\340\357=\340\225g<\020\243\232<\307\330\276\2757E\252=\016\256\372=\266\217\340=\273\316\256\274D\r\370\274\315\225R>\ta\243\275l\261\037\275g\265 \276\336\203\203\275)jn\274|\253\250=\036\177\340\275\311\204\230<\331\315\017\275DQ8>\371\346|\273.EH>-\236>\2750r\'=X\007#\275\014R\203<\007\376\201=\020\013\034\276g\302@=\301vq\276e\315k\275\375\341\024>\031\343\363\275\374+\020\275\336\367\035>m2\351\274\004\242\r<b\033$=\377\227\211\275\030\234\'\275\353o&\276&\304\364\274\325\333c\275:\231\263\274\3269\321\2743)B=\214P\374=E_\311\275\232ZR=a\324\341\275\336E\"\276HS\020\273\\\352\335<}\357\212>v\t\033>\r\260\024>Y\017\327<\371\221t=?\264\005>\345\027O>\203\345\033<\250\342\031=\004L\312\275\3570g\274e#\327\275\373\314n=\217\013\237=\315\330z\275kY\035<\034\222\235\275p\\\211=r\324\247=D\363>\275\001\"7>\352%\207\274\236\204\321\274\230\013\253>j\327A>\220o\026>sZ\266=\006\023\030>P0\243<\365\252p\275*\315\263=\343#\344\275\361~\237=\332q\323\273A\332\346=\317\2364\274\346\264\276\273Am\000\276%\254\340=\200\323\323\275\341\353N\275\004\t\261\275\307\\\033>\315m\223=n\336E<@!\"=uAL<2n\013=)\307%=\024\025\266\275\273i\307=\221\217\024\275\366\006Y=\267\276-=\3041B\275\006k)<\271j\262\275k\322<\276$\263_<\373\221\263=\337\353A=\207T\337:\217=\026>\207\032\304\275\341\022\374<\351\374\335\275x\353\301\275\200b\276\275D l\275\004B+<]\334\003>\367\365\020\276\020\212\376=.P:=%\1775\276\032\342\254<vh+\275\013\212%\275\013\3615> \332\214<\276\231\377<(\276\263=\237\252\021>b\362\245\274\r#8\276Go\371\274c\340\344\274\211\326\275\275_4\316=5\376|\2759.\226\274w\237\240\275iU\005>hd\n\275\022$\221\274On\225=&iG\275\006q}\275\365\217R<\352\277\022\2768 \201\273\357\331\246\275\303\264\216<\275\026\020<\202\224e=\027\304\372\275\325\2601>f\262\307=\301\235C=\035\260\236\275L\214\353\275\252\030\304\273\333\363\236=u\240\t\275\372\201\245<n\001\327\275\344]\017\276\316!\004\276\247\363\212\275\307<\267=\321K~\275:Z\245=D\003\356=\2239\306\275\311-\t>9\224\350\275\020\325d\275\301\224\257\275\2145\206=\020H@=\3545\233\274\205\221=\274h\363 >\203[\"=\217\256\304=\332\300.\276\304Hp=\000\232\036\275\027E\244=E\002\036>!L\342=\372\223j=o\273\372=WK\360;\037Q\224\276;S\340\275\276\025Y<\347\'3>\371\177\225==\266\242\273\303\220\035;\373;.>\022\232\323<!\337\234\271e\"\224=\346 I=\322\007\234\275\320\016\234;\000\247\305\274\3277\320\275\216=p=\351\301\272\275\200\311j=\001\3416\275\316\277\037=\334\017\374=\3159?\274;\370\301</\t2>2\021{=\263\254\331\275]n\350\275\256@\247\274\377\310\017\276/\034->V\372\016\276@s\350=\274&\002\276\226\313\234:o\214\355\274/\350\247\274Gw+=\233\317\302\275.\034T=\365\ta\275\027\331\246\276\300\0050\274\005\207i\274\360\025\303\275\177\375\216<Y\001=>\005\014\365\275\313\314\311<&\344\342=\000\373\306\274:\0046>z\354\362\274\275Z\245\2755c\000\276\345\354\002>c\373\014\276\376\2353=\007\034\245\275\225\177\026\276u>\021=#\221\021\276f67=\216\254\007=\341\252\003\276\323d\200\275\264w&\272\307\177\317=\343|+=e\335z\275\342Mk\275\014\267\221<B\246P\275\027\2470>+{\317\274\203\303\003>R\271\237=\252L\366=\331\265\200\275\256\250]\274\025\344\207=\374=\201>\000\331\215=\360\340\027\276\203\233O\276\214\252\366=\2446&>\022\237\206=Qm\002\275)\355\367=\257\302\327:\321P\334=\320\325\233\275g[\335=\205B\206\274w\365\347\275\301\035\177=\360\211\210=p\010\022\276L\2670>\262#6>k\350\255=h\363X\275\266\204c\276 ]\243=\002)%\274P>>\275\254\216\376=\234\266\327\274\227\303\024>\262\333\333\275\210M2=\305\343\000\276\323m5\276Z\021\021=(5\3408\304D_=\201M\214\275\3071\030<\006-\215=\363Xq=\315\370\032>\232\320\313\275\344|\207\276Q\3374<\367\357\'=\255\366p=y\351\330\274\245F\213\275\273Z\177\276\030\275\t>\023\010\243\273\213d\020\276\335\346\221\275\212\374\334\274\244\3712=\322\323j=~hA\276\013\025\007\276eZ\217=0p\374=\356\362\376\275\276H\302<j\370\"\275\277!,=@\251]=@\333U\274\306h\205\272\256\211V\274\217\230\204\273\275\214\240\274l\377\035\273\276r{=\333\\0>\224\n\005>d\221\212\274$\004\261\275Bt\255<\360A\t\275\325\265\236\275\207\262\033\276:\207\227\276\205\312\264\275\262l 8\345\247i<\205Z\262=\275M\252<[\367\210\275Y\332\370;\340e\317<\263\212W>\237vf;\227\031\256=\215EH>8\312\276=\024r\267=l\217\027>\004\256\350\273g\265Z\276nG\202\276Y\346\351=\350\t\221;\307\014\322=\031\310R=]r\222=\370X\352\275\253\223\004>/4\035<\277m\r\276nA\022\276Zp\351<JP_\275\220\242\260=]\340*>\007m\303=ql\232=\024\335\337=\230\020\026>\000\362-=\306\005w\276\327\231\361\275\265 \232=\035J}>VQ\374=0\351\253\275-\t\r>\366\304\247\274\212@\241=\032\014!=3\320\224>\362C\213<\327\007/=P\342\233\275V6l\2735\237n\274\230t\326\275\321\224Y\274\211\244\333\275\237`\265=\310\353\377<-\017\207=\300\225Z=@\370\003>\2372\332\275i\332\004\275M\213h\274\307\227@>\027z\003\276(\220\325<\267\222\251\274\022\247\274<\371\221\253\275[z\351\274\207\316\343\275_\207X\275\004}\267\275\2656d\274\240\0130\275\271-\264=\000\231\220>\216\030i\275\234&\256=hz\366\275\362\177\325\275\2730\201;h\327\256\274\006\206\215\274\313\2405>\214Q\013>\351<y\276D\014>=\2143\"\276\264dK\275y\r\371\274n\350J\273\010\274(>\316+\n>\272\027\201\275\034\351\013\276l5\211\276!\034\246\275/\335r\275m\211\204\275Z\326\013=\010\344\002\276<\264y\273\231\203y=A,\271<\261w\000>=\364M\275m\314\300=\354\336\366=\311Q3\276`~t\274F\354\235\275\367\263^=\201z\023\276\370\317\353\274\025B\200\275F\304L\275\233Q\240\275c \245=j\340\240=:TI=?\212u;C\331\262\275\344\346Q<?a\275\275#\361c\274\230G\352\274\303\326\231\274k\244(=\007\212\360\274\315\177\343<\t\321\264\275\314x\240<\206\331\003>c\245\324=?\352:>\223dh<F\367\337\275\316!\016\275\003AB>\366\224\031\276\341\000\201\275\203\3205\276\324\253\020\274\246\030\001=\236\311(\276\03267>q)\341=S\027\220<H\242\';\330\225\213\275\313W\025=\023\221\017=\270\325\253=\"\307Z>Wq\022\276\344#<\276\314[U\276\322\255\">\361\000\202\275\223\207y\275\\\222s\275yn\036>\261\004\331<\232]\207=\027f!\276\021\320\254\275\301\350\364\273:i\342=\263\342\330\274\254^\271<\214\036\004\276NBI\274\2564\274\275\337\344\022\275\312\022j\275H_\220<&\223\236=\333H\027>u\337\021=*\001\313<_\260\225>\2653\027\275f\355\253\275F\032\235=^\310\265<\231\243\023=\275\330\322\275\216\376\177\275\246@$\274\3267\315\275_\024^\275\375\212O=\276\337\253=\003\2332=\242\205\264\274Vp\374\275\035\026$>5\361\265\275\217\'\215<\333\247U\276p\324\006=3\233\313\275l\263\367\272]\224\000=\243\373\r>W&T\276=\313)\274\340x%>\313\222\201\274>\233)=S\272o\276\250_\'\276\221>@\275\263\245\363;\303\322\325\275\212\312\215=7\207r=\340\333\247<\374\337\t\276\365\230\271\275\273@#\275\013\\\010=\212\220#=\240\372_\275\357W\320<\230Rt\274zs\033>*\020\205=\315\225\r\276\266:#>P\311\261=\333\366\035=X\341`=\362\014\332\274\325\354\260\275\301\354\013\276]\200\256\275\322n\010=\251q\001>#>\261\274\315\2265\276\303\302#>\370\374\\<K\273\254<\027ws\275\t/!\275\006\243\252\275\263h\023>\326 \036\276jJ\035> b\352=`\220=\275u\261\322<d\320\004\276\357\366`=\357\026\203=\024\243\244=\310b?\276\022\202\263<\230/3\273-]\325\275\321=\350=[\301\007\275\010\277\233;\271g\222>^6\337\271c5\273=\200\336\244\275\337Y\265\274\327\333\014>\256\350\274:\352(\023>G\036\034\275\013W&\276\213\217\224\275 \212\024\276\323\037\237\275G\300\211\275\320\024\224\275 Y$=\316\t\207=RgQ=\014 \005=\013\366\016\276\240WW\274C\262\235=\013\270V>?\261\300\275\214\177\201=\037\341\236=\277\217\303<\257Y\236=\247\036\004>j7\274\274\364C\222\275t\351j\276\225bO>LUr=\326&Z;\226\244\343=\013\240\212;L\305\3149\373\203\244\276\257p\200<n\236\222=\371\240\260<\262\342|:\231\362\311\2737$\002\275\347e\240=Y\016\024>Vh\236=\345\266\303=X\003\237=\271\275\326<\351\326 <w\357f\276\237\200\216\275]\3122\276$\3254=H\234c\276h\034\203\274\255\362B>\375\316.=\254|\272\275\002\325\252<x[_>\000p\037\276O\334a=!\370\323\274\265\335X=np\246\2759\350\340=\361q\267\274\341\343&>!\032\272\274\300y\265<\277_\217\275d\233\216\275\240\237\005\276zq\003=\250N\375=7\326\214\275\303#\327=n\270\316\275f\036F=\205\3222>\027\350\001\275\267\024\261\275Y\226\374\274 5\362=s|\007\275\2604\237\274%U(=$\261\202\275R\306\253<H\022\014\275J\336-\275\367\222\276\275w),>\343{D<\374\362$\275-:\023>pk\025>g\n\243\275&\250\202=N/\033>X\215\273=\254\3132;\343\274\030=\352\241\023=vK>\275\263\222\377\274\314\361\003>|\252\r>\350+=>~\370\t\276\340\027W=\307\362\310=%[\200>D\370\272\275\251;X=\227\223\212\275z\374\r\275\351\235+\275\333\360\231=\032ec>\353\336@>=w\264;W\027\244=\351\370\337\275;3\243\274Y\2610=R\240\035\276\324\347\210\275\201)%>A\3555>\260$|:\301\203\357:\007\034.>\255[\230=oM\261\275\262!6>\005\344i\275\0046\367\275|\351\357=\244\320\264<%{\203<\224\315\007<\264\001|=\275\327.<}\035\316\275\323\372\201\275\207G\"\276\252\320\002=N\276\315\274\332\310\232\2754\227\206<\007\313\025=\267\327\213\275\212V\033>B\201\232\275\024\207\006>\254\206\365=&\265\351\274\353]\331\275\033E\313=\355\034\t>\340V<>W\323\350=\311\315>\276w]\334=\324\034\007>\234,\206\275\277yD\274&y\255\275BV\004=~\034\333=\215\223\305\275\337\214\334\275\006S\254\275\304Dw=\377\321\004=[\0025>\003H/\274O\362\207\273\030t\205\275\361;k=\225Y\211=\'\372:\275W\206q=t\312\\\275\226\\\305=\367\013\021>\362\275\025>\314\006H\274\241\212\321\275f Z=\022\351\274\275\023J\375\275 \005\212<n\322\n>z\344\230\275\250\344\274=g\021\376\2741e\'\274\321\347\375\274\3540\277\275\230\032\035<6\212\346\275$HR>\313\332\244=y\301\025=N\025O\274\245\r\005\276\224l\262<\273\235\035\276\307!\264\275\334\026\220=\231\270\004\276\024\231?>(\'29\316c\353<9\026=;\266\336\375<\205\265\031\276\345\244\335=w\251\211\2751AS=3X\232>\344\034\365=s\377T=\364\017\033=\260\255P;DA5\275!\036\002\274v\306p>\207M\000=\321\013\010=\366\224\275\275\250\315\310\275\027\345\211\274m\241\014\276X\224\331\275\332\204\327\274\315\342\004\275\271\361)=\354)\260\273\212\234\022>>\2228=\356I\341\275)\242x><\030\341=Q7O\274\217\023\313\275\277\301v\274\367u\355\275!\206\352\275\306+\r>\352\242\216=6n\241\275#\036\272\275+\\\243=\360\362\\\276u\320\313=s\'\000>\003\334\254\274D\364\004>\346\201}\275I\215\337\274\330K\014=\200\356\274\275\304\232\232\274\364\016\027\273\312\375r=lJ\021=\213\014\215\2753\231><\227-\033>\207b\304\273\0024i\275\315`1>3\225\210\275(@\026=\317\335#\2753\257\212<\2660]=\362\222/\275\303\036\223\275\\&\346\275\272\311\017\274\2313!\276BFp\2768\364\242\274\227\206\323\274!\260/<Go\226=s\203\'\275\257\200\315\273\231\251|\276\304\307\346=\271\223\022>\223\204\376\275\334\n\202\275\274\201P=*\'\344\275\305\266>=a\003x\276\023C\215=\335\326\272\274\234\204\201\275\344\345!\276\310,\323\275\315~\n=R;\014\2753\035\230=\243ow\275\362\342x\275q\303G\275\306\212\177=\330\2319=\031\233G\276(\035\267<\220\335\"\275\231\222\005\275Y\242f\275\332\016Q\275B\265\000=\020\003\"\275M\r\345=\207 \324\274VjZ\274\324\035f=2m\341=\323\210\323;N\250F>\317,6<\224\017\334\274\221v)=\254\354\350<\270\223&=t\323\266=\222\"\031>\rN\331\275b\323\214\275*\345\226\275m\275\212=\371%\200\275\232\210K\276\213!\324=)a\000\275-\205\305\274p|X\275\311\243\027>\323\016\036>(Gx=\2065\000\276(\301\n>\3414\261=-\354{\274\204O\212\274\202\332\313\274\275\331\013\275\352`T\275\213\307F\276\026\357\321\274\034O\240<_\267D<\364\263\270\275\007C\263<\365\217\256\275\255\030\275\275B\222\255\275m\t1\275\304\3206\276\006\376\021\275ET\t\276h&\311\275Q\273\365\2749\352\272=\332\220\023>\264\320\257=\004\332R<\371\020\305\275nE\306\274\303\376\222\275\234\242X=\264\214)=\263\253\006=\232zv\275\3727p\276\261!\334\273\211g\360<\t\251x\2764\330\037\275u4,\275R\3425\276\303\242\201<\360-\230<\342\311\274<\346\374\330;P\241\020>\210\336\220<\243\370<\276\304\010m<\361\364\357=\216\204\004\276\026\277\356\275\221\027M\272\371\007\311\275wo\004\275\017\271M\274\257\0272=M\312\302=\350\203\330\274N>(\276\362^\r\276k\374m\275\233\023\264\274\365\364\217=F\031\242=\250k\241\275\226;H=\026,\326= wo;~\332\207=Col\276\020\003\354\274LF&=4\221\326\274\274t\022\276\356\325\324\274\306\324O\275z7/>-b\253<v\214n=\267\374\007>9h\363<3\264\333=\231\250\314=\306\3337\275\022G\275\275\306Yr\275\355T\204=\252\"\245=\217By=\363n\227=\323\240-\275\316\353A<\204\233k\275\372V\322<H\'\347=\220sR\275\021\241\273=\231\371<>\251\374\r>}\220\032\275/\244\325\273\375\274\365\275s\210\005;6\356\264\274\361WP<\302\347\237\273\227k\006\274\0066\250\275\334\212~=\212\331M>\267\255\373=\215ZM>^\367\334<\306\336\320\275\213C\022>k>3>3g\206=\327p\014>\202AO\275\201\255\311=\305\261\321;z\264\017>\373>\214=QeJ>st\225\275\337\232W=hH\331<]\t\207;&C\003\276\277\317\313\274\212\300\267;T44\275\216Zg=\301\260\013\276z\236\342\275\243\203\304\275\014\357A>\22535=[5>>v\236\246<\371\330\203=\255\221\025>g\354a\275\322\016\211=\025\310\261=CT\352\274\222\375\307=\224\350k\276dX8>\347\202\201<!~\324<-\344}\276\225O\317\275\267\215\002\272\277\301\246\274g\350e>\023l\376=\375\370\003\276\260nv=\340\333\232\274$\006\356\2720\266\001=\363O\307\275\262\024\314=4\n\273<\276\370E\275\206\245\301=,8_\275G\022\232=\236\323\203:\217a\236>\350&\257\273h:\247=\307\374~>S\031\344<\005\242\000\276r\330\035\276\217v\t=\260\326\374\272\246\007\363=\363\225\215\275\274\017\361=<\242\032>3|\304\275\357\274\335\275\336v\023>\2638x\276\025\313\372\275\324\036\032\274\001\0131\276\312\344\242=\223\320N<#B\036>u\205\006>7\027\236=\013\336\254\274\014s\314\274\007\316\005=\025!\r\275\021\214\000<>p\371\274f\014\246=\375\323\203\275O\334V=\274\364\037\275\2505o\275\337j,>\014_3>\306\265\002\273\024\242x\275\206<u\275\030\257\373\273\311\177(=N\241\017>\207\355\227\275se/=\332R\214;T\265\301=\374\350\234\275\026CD>\264\314H=\323\266\377\275\310\327K\276\007|a\275\315\177\322=\010\235\n\275\000\322e\275\214\305\027=\250\3437\275\277U\305<\231;\312\273k\033W\276c\177\245=\334\000S\275\232P3\276\372\277\254\275n\023M=@\177L\275\262B8\276\214\023\262\274o~\243=dx\034>)\362/=\2218\367\273\\\311G\275\341\211\271\274*[\201\275\331\020\032\275Gv\313\275!+\004\276|Y\274=\340g\237<-\347\250<\313\271\253=\"\203\354\275\037>\204\275\177\351V>\201\247=\275b\206J=.)g\273\201\317\222=\2502S\275\035\374Y\275\030\215}\274\306S\275\275\013\334\201>\333\365\235=@\343\341\275 \346>>\351\036\356\275\320\034\303<\020\202\t=(u\357\275l\001\216\275\364\217\276<\255\223\365\275\227\303\264\275\347< \275\021)C=\237\n\265\275!}\335=\240\214\226\275\363\001\213<\032^\026=v\350\253\274\340M\\\275\033u\177=\017\331U=i||<\237\303d\276HE\364\275\351\310\324=\311C\365=t?;\276\333\n\215\2752e\002=\274\3620\276h7\242\275\3555\337\273H\004\347<\360f\336=\000\254\010\275\327\320E\275ww\216\275\240I\272=0\322\317\275\021\003\313\275lg\021<\236]}>\014\360\013>\235\313#>\023\016\017>\360b\253=*\344H\275\325u\236\274{\341\007>\334\215&\276#\321B=\252\227=\273\353\331\033=GQh\276\031o\005>\214|\260\275f?\304;\324\377\274\275\227\313\351:\335\263]=G\231\310=\376\031\274\275\033\254\016>\325\273)\276\234\215\366<e\374\\=\016{\025\276\372\245]>;C\013>\354\321\"\276\350\224Q=\275\254F\275*\200\201<1\361\007:7[\303=\302\242}:\023\336\003>\016K!>U6:=\300\n\003=n \027\276\"\207\367\275\244\327S\274^H\022\275\004\306\'\275\362]!>\372\274\200=\227\003c\275a\214\326\275\010\235\370<\216\350\022>\252\271\307=D\037f\275\326V\244=\206\361I==\305d=\212\022(\276\201\205\004\276`\2674<\242>h=/\373\251\275\026\273\014\276\014\200~\274\030\337\t=\257\236\031\275\244\300\312\275\217\212\001>\370\215\307=\301}\330=\237\311\236\275\327H\245=\212@0\276kf\271=:w\036\274u\275\332<\3320$>p\206X=N\327\231\274\242\300=\275e\357q=\222\036r=\201\307\027=0\366\210\275b\346\341\274\266\000\230\275(\202\277\275\350;Y\275\275\253T>\343\371o\276J\367\003>\250f\356\274\001\200\202\273\3306\212\275\312\325\r=\356\351\231=\244\260\210\2736\253&>\364\t\224=\315\265\211<\275\262\237\275(\205)\276\340\353\247<\232\2365>2\006\016=7\316\364\275r\207\310\2746\352X=\024\373\215\276\352R\343\274\237\326\017=\353\341\213\274q\266\206<\372K|=\333FO>TV\376;\214J\001\275.\037[\276\243\340\007\276W\277\006>\245\337\353=\212\310E=\037\251\026\276L\034\234\275\314\322\026=\327\223\316<\347s1\276\212G\n\275\264\277_\275y]\340\275g\343\260\275\303\003O>t\254\312=K@\002\275\347h\344=X\265\207<\227\232\224\276\347\001\210=\204\207\005\275Fu!\273$vZ\276\345!\273\275\037e\375=\255\367\207=\245\356\200\275\004\273W=F\177\226\274\t\276*\276\205\"?\275\t\320\236\274D\215\243\275|@\177\275\007B\032\275\326\267@\276\275q<=\362\267\370=n\033\030>\201?\220\276l\t\355\275\361\276\020\276!J{>\314\253|\276\217!\242<B\331r>\211\377i=\277\260\020>\021\200*\276\311\235\256\275\311\337\327=\201\301\007<\245m\204=\022\220j\276v\276B\276\340<\306\275\001\300P\275\t\301\330<^#\331\275\035\255\240=\032A\351\274B>C<\230\265\025\276\235\200\312<\366@\203=p\203\207\271\341?\222\275]BE>\237\013#\276\365\204H\276f\362\007\276\307\343\202\275a\350\275<\337\205u=\261\234C\275\300r\021>\340\r9>7n1\275\036\207\243>\326U\367\274\242\362\272\275aQ\"=\341\265\376\274\342\032e=\375\221\274;\337\305\236=U\260\214=\265\360w\275\022\025\007\276a\224<\275\261\311\264\274\345qJ\275\316\243\232\275\366i\351\275`\031\353\274j\252\204\275\210\352j\275\270\215G\275]\221\325\275J\361\231;>R\033=\325\\[\275\021\3232=\357\223T=5\001C\275h\224\202\275\360\375d\276\314\256\013>\001\\Q<\360z\214\275\332\343\320<+\353\225\274\347\253\316=\214\213A\274\240\245\245==,\023\276&C\202\275o\3422>aG\325\275)!l\275\365\0255\276\337\273S\275\"\233);>\244\246;\022\307\267:@\203\027=\341\3372\274\233\333\210=\326L\321\274[,\274\275\227\2647=yU\246<\202\202\351<\237\226\207<\305\343\302;\356\334\027>(\030\261\275\256\202\241\275\371\220\255\275\364;\317<l\374\302\275\334c\310\275}gf=\247-\232\275\222\366G\276O\357\200\276+\007\304\274C#\335\275E\344\r\275-\354t\275\334\202x\275\017\247\"=#\241\330<p@v=\0160\030=8\214\t>OY4\273\3560\231=\377!#>[\'\242\275\0001Z=\326\314\200>\032\212\205\275\036\371\304=\303\207\034\275.&\346\275\202\375\236=\366\260\304\275\177E\351=\270\350m=K\226\210=\n\360\346<\277q5=[po>\344m\033=\370\n\304\274e\373\351<\247G\021\275\372\366\253\275\2225\024>1\365}\274;[\";\355^z=\216\260\330\273\275D\026\276\364@\010\276\027~A\275q\355R>q\350-\275\310\tH\276\300\001\252=\226\3549>\260\216\254\275o\261\304<i\277\262=,=E\275\203\235\202\275\005+\001>\300Z#\276c\250\211\275\247\377\343\273\030ET\275\246\027o<\270\n\274\275\251)N=\372\357\357=\\\312\000\275\037\203.<\366G\000>s\306-=\207W\"\276$\001\200\275j\314y\274\335\321\010>1w\254=\331\263\017\276\201qQ\276\226Z&\273x\372\006\275\020 !>k&\224=n\037\364\275\233+9\275`b\273\274\340\216\214\274)\232\220\275\365\240\335\274\3409B=\004\001\311\273\030\307\226=\2517@\276\365\361W\275o\353\310=\274\037\204=\262\0054\276\246\t\325\275\007\370\275< \211l<\313N\334\274\207\320d=,\277\377\2743\343\243=\3379A<\362\315E\276\323\355\217=@\303?\275L\031#\276\243.b\275\326\236\332\275\354@\013\275B\253k=\374(\213=\371\023@=\260y\305\275i\256!=\222X\323<\267\027\234=Z\346\306=\210\236^\276\215~\264\275\304\232:\275\254>K=\020\262\224\275>F\234\275\361\363\022>F\021\347\275\273\017W\275\331\2101=\203\331\332=\267T\026=&0\347=\253\336\247\275?\014T\274A\363\203=\2113\224\276\267\025\375=\206\373\303<%\317\233;\207\n\277;\222\364\027=\016\273\235\275\226\370\203\275\220\253\252=:\331\005>\327:\204\276n\036\315<Kn\026=(\230d\275z\234;\276\314P\331<=\225\304\275\226\"\305=\t\023%\276d\007)=\335N\352\275R\006/\275\371\241z;T\256\007\276$HU=\251a8=\313S\370=\357Y\272=f\307\340=\273\264\037\276\221\362\231=\215@^\275\010\272\027=\212\261[\275\354\201\017=,\326\341=\3664e\276\333\021\257\275r6U=\325\r\324\274\341\217\371=R^\240\275\001\225C=\023\2335=R\211R=\270\367<>/\264\216>?\303\266\275\326T\\\274\211\3641\275\013\000\000\276\'\374\006>\375c\215\275\341\350=<\021\375\364\275|\300\273=Z\357f\276iD\001\276\206M*>\250g\212=v\367\007>\272\215\373\275`\270\320\274\263wB>\230\362\027>\344?\265<\235\370\307\275&\232\256\274\316C\004>Q\354\025>\177F\013\273v\035\253\275|\\\037\276\343\351t>\337\211\342\275\221\335\312\275\246\306\252=R\3648=\221\036\203\275O\262\233=\307\311\277<\231XT=q\346\242=\326\035a\275T(\326\275L \007\276\304^\274\275\367\372\366<\326\2267=\213\271\031\276\002\266\'\275v}\033\276p\010\243\275\t\213%\276\233\223\225\274\346\ne\2768v\t>EOa\276\345\241\262\275\277i\362;\\\347\200\275\207\255\306=\312s\225=_\261\251\275O\270?\276O\017\352\275a\207J=at(>\357q\242\273\212R\023\276N\003\203\274\372\003/\276l\356\246\274\014:8>\235\213\277;\263\313\372=s\202\022\276a\274/=\321\266e<8\325\356;\307\215&<\337y>=\206\317\023<\247kI<\004!\231=2l\017=\202\207\200;|\315\212\276\013\005\245=\311\204\333;\321o!\275\331\036K\276\214\035;\275\367\324\225\275\234\323\360\275\303\314\337\274\256\010\370\275\225\006*\276\'\010\211=~3\235:\255\344?=\211\271\332=\366l\246\273\262\341\201\275\341\005:>:\354\315\275\203\372\001>35\326\275\357\256E\276g\007\233=I\307y\275O\320\002\276\201\376\307=\354\036D>\0027\222=te\227=\277rg\276\022\0072\275\033\373\272=\342\302\205=\205N\007=\246\253\"\276{\363\n<\373\334Q\275\367\037\000=\274M\305=\036\001\204=\236I\000=\010\230m\274\277\357c\275\247\230\002\275\347\346\247<.h\024=\t}2>\000\213\220\275\371\251\\\275\320\332J>]\273\321\275\353\237\301;\221\255\317\275\023\312\007\274\3573\006\276\006z\r=:\"\204=\204\256\220=V\312\000<\237l+=\364\266i\276;4\301\275\365\224\311=\207\253\006>X\322\264<\370\2314\276\020\227\027=\263N\014\276\205\351\271=\310\274\217=\202m\206\276{\td=\263\013T\275Qy\002>\036\310\276\274\3225X\276\t\244\"\276Hu\024=)*\264\275\340c4>\343\204\325<\337f(>f2.=3f\200\274j\235\220=\307o\307\275\331\352\347\275\006\3506>U\245==\303VQ\2752v\363\275\231\021\236\275g\031.>\216ae\275\217\352\003>m\000~=\362\310\361\275\005\'\243=\333;\314=+\345\352=KB\210\275\243A\003>-Wg\275\236gj\275\332S\227\275w\336\226\275{\2070<k\354\315\273\367\026\267\275\3258a\275\303C\204=\246\206\217;\377\002\230\276\204\243T=\256\224 <9\001)\275\225\213\242\275\3051N\274\"\211\017\275x+\360=\035\002\220\2762@c\275\004\342\213\274Q\322\241\275\032\274!\275Nz\316\275t\224\261\275V\266\342\275pc\231<\377i\356=\341\255\n>J\201W=\367\025?>\243\3720\276\331g\001\275\274\314\327=V\177\001=\023\237\255=V?\260=BM\341=EF\211=\203\301\003\276]\223]>\246R#\275\020+\242\274\374cr=\256\355S<\324\203\216\275\235\202\005\274P\222\374\274\201\302\237=\265[\203\275N\000\217=\255\227\\=\234\224\203\275\375Ek\273q(\305<\320\275\251\275Q\206\220\274uf\275<\022\346\026=\342j\335=\225\"\250\274\210\033J>\313\006\244\275\337\217\334\272\205\356A>|\232d\276\261\303\022>\234\370N<\306HU\275Q0[\275\362\3045=\274{B\2753O\002> \315(=\226\016\177<b\266\214<\243\206S>G\222r\275\005t\336=\234\243P>\2035\201\276z\277\203;\211vq=_\256\271\275\2732\313\275\001\201}\275\200B6>\0307\271=j\321y9\022\322\322<E\232$>]\257X>]\365{=\016\273\023>\307\307I<?\347\206\275b\246\020\275\242\233\232=\264\346\035\275\220\344\004\275K\373\021\276\376\332\035\275\316\013\000\275\302\322\033>\221\025\240\274\200\033+=\006S\247=>\350\222\275\214O\236\275&\037\023>\032\371\313<\270R\266=cC\357=\255\253|\275\025\265\306\275H\313\022\275\204?!>\224X\245<&\363\355<a\302e\276\337g.=\262\316T\275\252\2219\274\372\207\313=\t\272\317=\t\177\217<Y\016\307\275\017n\313\275\205\234\324=\250Q\035<L\332d:\365\036\322\275e \274=\237\207\035>\333J\251\275\231\307\277\275\211:\222\275\3270-\276D_!\276\204\t\010>\2542\345<\013w\206=\335\332b:\212\034]\274g2\005\276\313\330\032\276g\262\340\275\373\274\336\275\020C\016\276m\002\313=\2376\263=5\202)<\315\347\202>>i\344=|\032t<?\376\025\276\375G\n\274w\263\374\275\313X\005\275\267D\370\2744S\353\273D\325\323=]t\254\275\221\231\335\274s\224\014\275\225\0020\276IHf<Q\362\256;\262\031\277\273\262\362i=\311F\331\275\231\277c>\'\2670>\363l\023<i2\322\274\261\2234\275C|\027\275@\251F>\330\302*\276\000%\212\274H\023\204\275\2065\253=J\232\236\275\3174\235=\\AJ=\002\214\262\275U\030\344\274\3706\266:\206\032Q\275\344k\363\273?\353\013>^\n\233=\3013y=\240\332\035=\257}/\275\t\251\227=gs}\275Y\025\205\274\226+4=e\\\204\275\246\356\300=\306w5\275\236g\020\276\345N\312=7\214\224\274@Y\355=\203\236\033\275\246ZL=\n\"\356=\213E\002>S\352-\276\217\344C=Y\246\314<\t\023\026>^\315\331\275Z\200m\275#\265[\274\367\351\030>\002\332*\276\205X\325=\221\367&\276J\210v<\376\r\242=J\326\316=?4+=\233<d\276\253u$=\205\035\251\275\032\217R\275\000\273\202;\244V/\274\027\217A\275\360\324X\275\004\2445=H\320\256=1\342\301=\363a\313;\331\345\310<\030\322\255\275\340\036\034=e\0065\2754\025\013\276C|\263\274!@h\276*\033u=\036l =r\"\332\274\025\t\242\275\036\330\311\275\3160\326<B\250\024\274\277\213?>\300\366\312=\000\253\246=\270X\236=Wj\031\275\246q\262=\374\271\221=\t\372\373=\013(\310=\334\304&\275E\222\264\275Y\233\277=\351\2773>^\204\000\275AD\213=G\002\224\275\220\252e=D\364\201\275\242\221\323<L\310\336<\024${=\201N\351=\036\235\006\276\314\335\261=\247=\037\274\306\272\022>!\260W\275\005\3433=\304\223_\271r\237;>\225\336\355\274\245\363\020\275\336\022\304<\327\353d\274\317\360\026\275aL\376=e\006\340=NzC\275\016U\344<s=\210=>Z\254\275\357Q\326<nc\\\276V\351)>\244\217\236<i\237\027\274\250\311\n=\016\373\274<\260P+<\245\213\264;\371\035\000\276\002!\242=Y.[>\347\007\210=\030G\'\275\021\251\362=\323\240n\275\017?\203\275\005\200\316<\004\356Q>\024\257\004\276\210\r\245=ZD)\276\250\313\211=\004\325\350;^\250\025>g)\262\275\241<\032>\203#\301<\374\375\276<\331\004\037>\336B\246\275:\030.\275\366\000f<1\n+=\313\351X=\017S\036>\356\303H>\371\353\207=\243z\334;\225\311\303\275X\357)>]\'\326=\241\013\330\274\243q1>U\027\003<b\372\305\275nR\354<H\234]\275u\037\372;\257\376\275\275\375i\252=x>r=A\323\205=\2419\211\275\022\237\010\276\337\000\222=\247\004{=\307H\365=v\302G\274u\230[=\223\202\304=\347\036\022=C\377\275=\343\265\233=\274\342\211<\3130Y\275\\\363\246=n\355\021\275,6\211=.7\265\275\245g\322=j\326\276\275\222\274\300\275\032\240\211\275\254\322\251\274\207L\334\275\370\027=>G\242\325=\241\300\356<\024U\241\275\"\332\252\275\356\232\014>\2261`\275\374\231^\2755\0137\276\365f3<b\347&\275\221o\017<\315(\201\275\004\006\204>\3552M>-M\017\275-m\375=\200\375@=}#\004>\256\3168\275\r%\t\276+\021\006>)\210\202\275\241@\2269v\310\207;\211\270~\273q\366\033>\354\215C=\023\343\007>\217wL\274,\363\007\275\202n\020\274V\207\314\275\370\266\217=-\0171\276X\306%\276L\002;\275\217\244\311\274\002\361\322\2741v\317\274R\315\307<\256h\363=\361\353\243\274S\013\261\275\232JQ\273iIJ\273%S,\2750\014\311<X\351\030\275\376Y\334\275\334\320\026=\325v8\276`l\236=\003\010.\275\220\264\002=\232v\301=0p&\275\246\341\017\275v|\247\275\020_\201>\312k\254\275}\'\013\276\240\013W\275\326RX>X\303n<\305\020&\275/F\363\275L@\220\275\211.N=\246\232\020=\005\023@=Jb\013\275\240\270\n\275\027:\001>\310yJ\273\037\3204\276\221\324N\275*\272\024\276\031\006\030\273\313\007\013\275\254sq\275\327\3233>:\022\227=I\261\361={\251N=\366\365R\275\312\010\023\276\237>\376\273q\246\366\275\007\307\016\275Yz[=r0\273=\033\037\007>\233Q\215=\201\233\371<\204\301\262\275\322\"S\274x\315\337\275\204\270\">P\334\004>\321\262\314\275\313*f>\317\257%>\037\225\214=\352\263\023\276\234z\374=\336\251\253\274\2669\n=\036\371Z=\341n\037=\005ER>\220e\203\275\301}\263\272\207]\310=b\302B\274?d&\276\327%l=\371\342s;\023\301*>UUh\276\251\207\310=<\227@\275A\357\277<g\336\317=U\2179\276f\026\365:\212\'\220\273\374`\236=X*\214\275y\303\306\273\215j\374\275\377\340s\275\231X\246<D\324\001=\3567\001\275\324 \251\275\332\001\315<yw\200\275\374\033\002\275\230&\237=\237U\267<\010+\020><Y7\275\223\225\005>\270\\I\276U\361\016<\254>T\275)Wz<\033\212\337\275m\022\305\275\346w@>t\374\253=8\007==9T\211=\200\223\372<\347\264o=\'\207\007>|\361\216<\274\345\266<8\300\247\274\0274=\276\335\202\013\275$\267\005=\242\007\246=,\372\265\274\261;\344=\306\221#\274\276\\\022>^\020G\275G\227\241\275\351\003.<\\\2518\275\203\204\210=\006V\352<h\036o\275h\302\013\276J\223\206>\215\016\r\275B\345x>\322\242\303\275\334\303c=;\203\227\275w\276S\273}\233\020\276\226x\262\275\357\233+>\337\006\206\2758\346$\276\330\002}\276s\001}\275v\232\367\273n\004\027>/\263\246=\331\260\320\275)\362\220\2759\273Q\276\351\027)>\356:\252<\2656\000\276\363C)\276\025\307\337<M\254p=\001I\215<\302\371\365=\010\3004\27517\000\274\265\256!>\216\t\210=\277\251\371\275\252\217B>1\362\034\276\250\2521=N\232j=\244\320\200\275#;S\276\3321\300=X\266\377<K\321[\275;\336\305=\221\010\317=\252\265\037>\331\231\335=\257\237\210=seH=\rx]\274\225t\030\274Q\232\277\275\205\333\201\275\343\226\231<\345\025\210\275\311\323_=\347\210\363\274\367r\206\275\234\341&\274\203X\246<\275e\r=\261V\366\275\313\023\327=\347$\231\275\221\301\374\275\356\016\264=\262\343\225\274l\236>\275\375P\266=\330_\250=\r=E>g/\004\276,Z\272=PF\234=\020\307\r=\331\002\332=8\323\377\275\010v{=\212\353G<\255J2>_k\277\274\322\321\325<0E\226\275\210\310\321=\030\317\223\275\233\226\374\275\357\204\017>N\031\254=J\245\241=[\377\224=\347\277\344\275\376\214\373\275-\203+\275\340\031\204\275\340\352\370=\201\341\220\275\272\001\300\274\254\0102\275\267\336\360<\032\352i\2756\344&=J\234\004\275\371\341^\276\352\206\224\274\"\261\212=\240N\373=Rd\001\276z\023\017>\\\006\022\276\314A\'=\305\357\272\271A\277\007\276\030Px\276E\275Q>>\016\031>\316\334\201=\267\036*\275\320R\243=\034\327\233==\254\206=\235\300#=\350\257\214\275\027\210\t\276\324\366\206=\236FU\274ic\031<)\346\016\275\321\350s=\276n\030>\273\260\360\275\335\347M=\344\264\323\275W.\242\275\177\026m\2755\3117=\\\217\365\275\010u\005\276\241;m>s\"8=N\241\311\275P\017D\275*\014\357\275\267\325\361<\264\242\264<\276\325\016>\326\350\364\275\021%\022>\005 e>\300F}<\002\322W\275\205g\374=i\310M=\336\205\377;q\272\177\273v_S>\256a\032\275\332\305\253\274\213\3133\274\201\202\006\276\\k\370=\301\326+\274ab\211\275a\237\215=@\353G\274\326\\#\274\n\226\244=\\\275\376=\002R\302;\207\234Z>F\362#>\366\362\353\274\302\007\004>\004\244P\276\0042I>n\262\316=\254t\030\276\014\351E\275\327MP=d~\202>\0148l<\254\230\335=\324\324\313\273\226>\\\275uz\037\276\306\363\240=\264E\021>\\\336\211\274\206\020f>Im\250=9-K=\2434V<\'\"L=MZ\346=H\252#\276\027@\206\275\226\024\327=\274lo\276\0347x=\016\200\244\275X\020\243=\343\335\021\272v\342\345=\251\370\227>\014L\027\275y\177<>\033`\243\275\324pf\275\274\324\030\275\341\305+>\331\024\252\275\010\334Z\275\246\260\001>\246\306\376<\3110\340=\240\363O\275\t\320t\276\232d\337\274+\265\274=\307S\315\273\025\220\244\275\326>\253\275\177f\251\276\r\257\366\275\304 \306=\333\265\n\276\233\022\211<\002K\032\2769\230\372\274\241DT=\327\215\031\274\243\240\027\275\323w\253\2755\256\234=S[\222=\252V\211\275\237dA\274\'\3617=\247\034\337\275\2362\241\274\332\277J>\032\334)>[M\035=\341`1\276\221\002\336=;\304\271\274\027\213_=\236O6=sQ\201=\231\333\246\274_\025\023\274\'\003\234;^\304\206\275\005p\356\275\264\274\266\275\247\334q=V!\014\275\022\017\252=*s\027\275\337\026\t\275i\026c\275\206fm\276\217H\221<\316H\267=\262C\033=}\324\017>b\204:=\\is\275s\277\220=\357\322\254\273\341I\335\275\\\364\222<1x\037\275\010!\004\276\237\333\213=\307\273?\275\250\314\013=\3176\314\273a=\325\274\337\016\262\274\324`\026\276\010\220\347\275>U\227=\224\260\224\276blM=6\226\375<g\341\377\275-\362\206\275\261\244L\275L\320\001\276\257g(\275\177\270\224\275NW\001\2760\246r\274\357][=\207&F\274\304\355\376\275\253\241h=\022\366\223\275\203\207\"\276\221\213\001>\352W\024=\3134\\=\013\250t\275\313fP\274r\000\223\273\241\177\345=+J\346=\000\006Q\274\372%\225\275\201\322\234=|\377\203\274\340p\260\275\2224\301<\034\320;\276\026\201->\234\255\021\276\333\375\244=$\232\'<k\262\321\274\262d\241=\274\000]\275\241u\210\275\330\372\017=F\323G\276\247,\342=\217\2132>Q**\275E2\030=wv\233=\024\342\004\275\347\213\271=\214\346\035\276\233\201\026>\037$I>X\227i={%F>\345&\021=\2350\364<K\265\232\275\r.P=\325Y\240\275]2T\274\334V\210=\177\250Z>\362M\274\275\264ej>Mj\303<\373\226b\275(0\277\273[3P<\307\235/=\2649\265\275\025N\237=+\366\215=\023\352\000>\004\370F>\220E\236\275\346\014L<=4/=\333\333K= \251\215<\220\246A>\273*&>9,\032\276\376ri;\273\261\223<\215Z\354=\347Z\353<\250\025\316=\274)\"=\277\332{\275\271E\371=\222\205\332\275\251\022\025\276yz\013\276\3432\347=\'\337\350=\r=P\274VP\362\274\2778y\275$\017\243\275\247\376\013\275Mc[=\230A\300=\237A\202\275\220\311\362=/\032\352\275\1778\245\275\245\277\305\275=\225\352\2743c\256\275\260\234\261\275\2102\215<7\203\202=\223\235\315<\212\353\255=\036\237\261>\211\003\203\275\036\267\037>\371\354\332\275\"\241.> |\203=\265I\260;\265&`\275\253\307\304\274$\3547\273\341=7>g\232\253\272\007\304$\275\374\r\324=LH]<\275\250\302<OCN\275\224\335\275\273O\2465>\377\240\013\275\365>\231<z\274\034=\304V\000=\005\274\360=\321h\374=\216\272\177=\002}\224;\0170\300\275B\020@=\217\\,\276n|\301\275\261\331\027>\024\344^>\301}\360=t\267\305=\r` \276\275\310\252<>\371V=|\250:\276|k\325\2753\305\r\275\256\364\312=\344\335\201>\035l\212\276\314F\357<bk\001\276\236) \275;\262\266<-\026\311<l\377Y=\356\200\220\275\032\277\320\275\257D\022>c\357\232;\rZ!=\024z,=R\261\246\275\364S\200=\322\325\264=\232\252\274\274Ew\005\275\3701}\275l\271\231\273L\231t<F\210\001>\3555k\275EA#\276\362\361\031>js\357=\357;\322=d\307/=U\\\370=\206\221\006>_\267S<z]\324<\272w\026\276gg\261=\031\355#=\200\310\337=\232-\324\275|o(>X\265s\275\204\326\t\276\366]+\276E\365\025\276\265\355\323\275N-\002\275\024W\250=\337\007\006\274\223\206\236:\326\346b>@\017\254\275gp\215\275S\247\356=p\311\236=\230%\320=r\0271\276-{\270<\312\210\003\276\032[D<+\352C>Q\351\003>\302\262<>\367\300y\2754*\210=\034|\324=:n~\275\246\327\377<|\t\272\275o\377\302<lf\005>\331\253\014\276\352\241f=\3273}=l\234\360=\265\323F=4\321Y\275c`\335=\2004\"\275\207\353\341\275\2458\347\274\344N9=/\214\007\274t6\263=\360\227\330\275.\321\264\275%\224w\275\222\250\220\276\245\014\267=z\312\342<\217\372\014\276\177\344\356;\260\003\346<\321\232\005\276\006\212W<\220\233\006=#\325+\274xL\236<\347\t\370<D\206\273\274\232\252\\<\021\327W\276\337e\266\274ABw=\236\322\025\274?\010@=w&\275\275\271\237\004\275N\306\225\275\304\031\203\276\261\327\017>\342\007\323\275\332{\214\273\002\010\314=k\332\022>\360?\252\275X\n\226\275\273\205\226<t\227\251>\177\031\301\275\201gR\273oQ\344\275\2629T\274\365t\312=\245\177\270<\332\177l\272rM\376\274a\262\346<\210\261\007\275\250v\304\274j\005\027>\233!%\274\254I^\275\254\231\225\275\374\220\306\274\217U\275\274\277/D\276H\241\230\275H\326\034\276\234\325S\276\2404-=\332\3311=+\n&=\251$\303\272\025\215\037\275? \270;+LY\274\260\300/>\224\371\254\275\266\234\337<\272T\234\275\367\377$\275\335K1:\263M-\275\320\030r>k\367\344\274\'\276\013\273\276x\376<\351\230\330\275Y\250\014\276\276\217\025={@e\273\324\'\010\276\017\336+=\264w\206\275\002G\002\276\017\204-\276\0018`\276&\377\354\275Z\350\325\272\337\247\210\274-\277\303\272[,j\276b\363H;\322\204S\275\261:\007>\277>\350;8`f\275$\236S=al\200= g\372<\237\231v\275Z\177\260\275Yo!\275!\232\240=B\346[\275\211k\232=\262u\311\2759j\254=\304\021\035\276\177\245\r=\027\210\377=\315\366#\275\213\314\244\275>`\304\274M\273\251:\352J(>\331O\223\274/\360\321<\351\2709\273C/3\276\016\346\256\275\\\224\341\275,\265\356\275\305\237\326\272\254r\361\273q\207\324=B\374+=\373! \275\326|\215\274#\352\223\273\000\033$;\200\222\r>\341\363\215=\002%\206\275\024P\244\274%,\017\275\253+\\>\203\021\307\275\3044\034>2\026\014\273U\027\337\275t\371z\2758\270=:\301m\352\274\302\226A\275\347W\010\276i\343\r>\021y\256<\216\305\031\276.\201Z\274\223N\202=\265\207\'\275\211C\241=\347\251\002\275Gay\275&\375k\274\372\331:\276aLf\276\201\347\006\276P\353\204=@*\301\273G\214z\2752\270 \276\022\274\026=\'u\270<gV\214=\3206\223<\3276 \276\321-\277=.3\">\tAQ>0\371\360\275s\234\271\275\005C\365;n}P\274\001\013C\276\363\364\263\274\266\374\342\2757{\330=\305\216\230\275t\251\252\275NT\025\276\342\341\223\2753\025n\275\206\341\024\276\000\022`<\1770\"\275K\036\357\275F\255\007<\003\204\351\275\0136\362\274q\246Z\275"
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 128
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer1/Assign"
      op: "Assign"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer1/read"
      op: "Identity"
      input: "deep/weights_layer1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
            tensor_content: "\000\320\277\274\372^B\275\351\033\256<\264\'\256=>\276\227=\240\311\217\275 FX\275JLc>Kz\007>\220\347#\276\206\361\260=\351\363!\276\246]B=\236\346_\275}\016\204=[\023\331\273=\3207\275\331\271\200<\362C\220<\361f\025>\260\342h\275q\245\203\274oI\300\273n\357)<\266\223@>\273\273\261\275\275YS=,\237\316\275\266\363\013\275iJI\276~\007 =\200~\010=l\325\367<6=\036\276\007\314\305=\240G\244=\253\254\366\275\016\226\311=\361qP\276\337\364j\275\300\367h\275\367\030\220\273\350\301\305= \007\341\273|\373\303=\002\205\023<\347\\0\274\237J\240;.\203\223\274\326\030&>\013\317\352=u\300\032>\216\373I=\214\331]=\362\006B\2768M\220=\273\035\210\273\354\254\214\275\274\0132>\316S\372=\216\226\335\275\365\271X<\376\252\312\274\277\205\356\271"
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias1/Assign"
      op: "Assign"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias1/read"
      op: "Identity"
      input: "deep/weights_bias1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/MatMul"
      op: "MatMul"
      input: "deep/Reshape"
      input: "deep/weights_layer0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "deep/Add"
      op: "Add"
      input: "deep/MatMul"
      input: "deep/weights_bias0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/Relu"
      op: "Relu"
      input: "deep/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/dropout_1/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deep/MatMul_1"
      op: "MatMul"
      input: "deep/Relu"
      input: "deep/weights_layer1/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "deep/Add_1"
      op: "Add"
      input: "deep/MatMul_1"
      input: "deep/weights_bias1/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/Relu_1"
      op: "Relu"
      input: "deep/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/dropout_2/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deepfm/concat"
      op: "ConcatV2"
      input: "fm/Sum"
      input: "fm/mul"
      input: "deep/Relu_1"
      input: "deepfm/concat/axis"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 83
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
            tensor_content: "\031\310\210>\033\257\342=\257B\312=\270g\000>\370\030|\273x\021\256\275E\264\221\275\365C\234\274 bH\2769\032\013>\035\223\335\275\335\301\034>i\213\367\275\237\224\354\275`\317\365\274\266M\001=-\215\206\276\217\211\237\275B\364k\276\371-1>\313]@\276\256\366\244\276\253\365\206>e\031.>\331\371\254=\241c\316=\371,,=~\030\313=\267\377a\273\030\364\265==\005\201\274\352Z\036=\323\365\"\274\361\177\017\276\003\300S<ow\004\274\016\347~>\376\311<\275<RB\275G\254@\276 \375\244=\262\261Q=\375YJ\275\302.\210\275s&B=*\324\363=\026\324Z\275\336\220]\276\227\357\261\272\305\351y>\324S\356\275H\020 \276%\310\005\276p-O>\317\336\234=*\302u>?2\324>\354\261\230\275\016\372\002<\216\001\037=\340\207\243\274\350s\031=\035@\242\2768\227\226>\345\370\236\275\347\345%\276\230\341\326\275\367\247\266\275sm\235>{\005\224\276>\006\031\276\375\375;\275\026\324K\276\tf\261\275;\225o>~\007A\276\0373.\275=\224\020\276\001\207\326<1\253\014\276\022\215\333=\270\363k>\331\230\353="
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 83
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Assign"
      op: "Assign"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/read"
      op: "Identity"
      input: "deepfm/concat_projection0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Assign"
      op: "Assign"
      input: "deepfm/concat_bias0"
      input: "deepfm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/read"
      op: "Identity"
      input: "deepfm/concat_bias0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deepfm/MatMul"
      op: "MatMul"
      input: "deepfm/concat"
      input: "deepfm/concat_projection0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "deepfm/out"
      op: "Add"
      input: "deepfm/MatMul"
      input: "deepfm/concat_bias0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "score"
      op: "Sigmoid"
      input: "deepfm/out"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deep_fm/score/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "deep_fm/score"
          }
        }
      }
    }
    node {
      name: "deep_fm/score"
      op: "HistogramSummary"
      input: "deep_fm/score/tag"
      input: "score"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "estimate/sub"
      op: "Sub"
      input: "Placeholder"
      input: "score"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/Square"
      op: "Square"
      input: "estimate/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/Sum"
      op: "Sum"
      input: "estimate/Square"
      input: "estimate/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/Mean"
      op: "Mean"
      input: "estimate/Sum"
      input: "estimate/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/loss/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "estimate/loss"
          }
        }
      }
    }
    node {
      name: "estimate/loss"
      op: "ScalarSummary"
      input: "estimate/loss/tags"
      input: "estimate/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Cast"
      op: "Cast"
      input: "Placeholder"
      attr {
        key: "DstT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "estimate/auc/Reshape"
      op: "Reshape"
      input: "score"
      input: "estimate/auc/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "estimate/auc/Reshape_1"
      op: "Reshape"
      input: "estimate/auc/Cast"
      input: "estimate/auc/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Shape"
      op: "Shape"
      input: "estimate/auc/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice"
      op: "StridedSlice"
      input: "estimate/auc/Shape"
      input: "estimate/auc/strided_slice/stack"
      input: "estimate/auc/strided_slice/stack_1"
      input: "estimate/auc/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "estimate/auc/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
          }
        }
      }
    }
    node {
      name: "estimate/auc/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/ExpandDims"
      op: "ExpandDims"
      input: "estimate/auc/Const"
      input: "estimate/auc/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/stack/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/stack"
      op: "Pack"
      input: "estimate/auc/stack/0"
      input: "estimate/auc/strided_slice"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/Tile"
      op: "Tile"
      input: "estimate/auc/ExpandDims"
      input: "estimate/auc/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/Rank"
      op: "Rank"
      input: "estimate/auc/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/sub"
      op: "Sub"
      input: "estimate/auc/transpose/Rank"
      input: "estimate/auc/transpose/sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/Range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/Range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/Range"
      op: "Range"
      input: "estimate/auc/transpose/Range/start"
      input: "estimate/auc/transpose/Rank"
      input: "estimate/auc/transpose/Range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose/sub_1"
      op: "Sub"
      input: "estimate/auc/transpose/sub"
      input: "estimate/auc/transpose/Range"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/transpose"
      op: "Transpose"
      input: "estimate/auc/Reshape"
      input: "estimate/auc/transpose/sub_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Tile_1/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\310\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "estimate/auc/Tile_1"
      op: "Tile"
      input: "estimate/auc/transpose"
      input: "estimate/auc/Tile_1/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Greater"
      op: "Greater"
      input: "estimate/auc/Tile_1"
      input: "estimate/auc/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/LogicalNot"
      op: "LogicalNot"
      input: "estimate/auc/Greater"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Tile_2/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\310\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "estimate/auc/Tile_2"
      op: "Tile"
      input: "estimate/auc/Reshape_1"
      input: "estimate/auc/Tile_2/multiples"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/LogicalNot_1"
      op: "LogicalNot"
      input: "estimate/auc/Tile_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "estimate/auc/true_positives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "estimate/auc/true_positives/Assign"
      op: "Assign"
      input: "estimate/auc/true_positives"
      input: "estimate/auc/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/true_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "estimate/auc/true_positives/read"
      op: "Identity"
      input: "estimate/auc/true_positives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/true_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/LogicalAnd"
      op: "LogicalAnd"
      input: "estimate/auc/Tile_2"
      input: "estimate/auc/Greater"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/ToFloat_1"
      op: "Cast"
      input: "estimate/auc/LogicalAnd"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum"
      op: "Sum"
      input: "estimate/auc/ToFloat_1"
      input: "estimate/auc/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/AssignAdd"
      op: "AssignAdd"
      input: "estimate/auc/true_positives"
      input: "estimate/auc/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/true_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/zeros_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "estimate/auc/false_negatives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "estimate/auc/false_negatives/Assign"
      op: "Assign"
      input: "estimate/auc/false_negatives"
      input: "estimate/auc/zeros_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/false_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "estimate/auc/false_negatives/read"
      op: "Identity"
      input: "estimate/auc/false_negatives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/false_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/LogicalAnd_1"
      op: "LogicalAnd"
      input: "estimate/auc/Tile_2"
      input: "estimate/auc/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/ToFloat_2"
      op: "Cast"
      input: "estimate/auc/LogicalAnd_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum_1"
      op: "Sum"
      input: "estimate/auc/ToFloat_2"
      input: "estimate/auc/Sum_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/AssignAdd_1"
      op: "AssignAdd"
      input: "estimate/auc/false_negatives"
      input: "estimate/auc/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/false_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/zeros_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "estimate/auc/true_negatives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "estimate/auc/true_negatives/Assign"
      op: "Assign"
      input: "estimate/auc/true_negatives"
      input: "estimate/auc/zeros_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/true_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "estimate/auc/true_negatives/read"
      op: "Identity"
      input: "estimate/auc/true_negatives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/true_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/LogicalAnd_2"
      op: "LogicalAnd"
      input: "estimate/auc/LogicalNot_1"
      input: "estimate/auc/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/ToFloat_3"
      op: "Cast"
      input: "estimate/auc/LogicalAnd_2"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum_2/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum_2"
      op: "Sum"
      input: "estimate/auc/ToFloat_3"
      input: "estimate/auc/Sum_2/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/AssignAdd_2"
      op: "AssignAdd"
      input: "estimate/auc/true_negatives"
      input: "estimate/auc/Sum_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/true_negatives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/zeros_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 200
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "estimate/auc/false_positives"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 200
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "estimate/auc/false_positives/Assign"
      op: "Assign"
      input: "estimate/auc/false_positives"
      input: "estimate/auc/zeros_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/false_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "estimate/auc/false_positives/read"
      op: "Identity"
      input: "estimate/auc/false_positives"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/false_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/LogicalAnd_3"
      op: "LogicalAnd"
      input: "estimate/auc/LogicalNot_1"
      input: "estimate/auc/Greater"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/ToFloat_4"
      op: "Cast"
      input: "estimate/auc/LogicalAnd_3"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum_3/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/Sum_3"
      op: "Sum"
      input: "estimate/auc/ToFloat_4"
      input: "estimate/auc/Sum_3/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/AssignAdd_3"
      op: "AssignAdd"
      input: "estimate/auc/false_positives"
      input: "estimate/auc/Sum_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@estimate/auc/false_positives"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "estimate/auc/add"
      op: "Add"
      input: "estimate/auc/true_positives/read"
      input: "estimate/auc/add/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_1"
      op: "Add"
      input: "estimate/auc/true_positives/read"
      input: "estimate/auc/false_negatives/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_2/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_2"
      op: "Add"
      input: "estimate/auc/add_1"
      input: "estimate/auc/add_2/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/div"
      op: "RealDiv"
      input: "estimate/auc/add"
      input: "estimate/auc/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_3"
      op: "Add"
      input: "estimate/auc/false_positives/read"
      input: "estimate/auc/true_negatives/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_4/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_4"
      op: "Add"
      input: "estimate/auc/add_3"
      input: "estimate/auc/add_4/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/div_1"
      op: "RealDiv"
      input: "estimate/auc/false_positives/read"
      input: "estimate/auc/add_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_1"
      op: "StridedSlice"
      input: "estimate/auc/div_1"
      input: "estimate/auc/strided_slice_1/stack"
      input: "estimate/auc/strided_slice_1/stack_1"
      input: "estimate/auc/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_2"
      op: "StridedSlice"
      input: "estimate/auc/div_1"
      input: "estimate/auc/strided_slice_2/stack"
      input: "estimate/auc/strided_slice_2/stack_1"
      input: "estimate/auc/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/sub"
      op: "Sub"
      input: "estimate/auc/strided_slice_1"
      input: "estimate/auc/strided_slice_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_3"
      op: "StridedSlice"
      input: "estimate/auc/div"
      input: "estimate/auc/strided_slice_3/stack"
      input: "estimate/auc/strided_slice_3/stack_1"
      input: "estimate/auc/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_4"
      op: "StridedSlice"
      input: "estimate/auc/div"
      input: "estimate/auc/strided_slice_4/stack"
      input: "estimate/auc/strided_slice_4/stack_1"
      input: "estimate/auc/strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/add_5"
      op: "Add"
      input: "estimate/auc/strided_slice_3"
      input: "estimate/auc/strided_slice_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/truediv/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "estimate/auc/truediv"
      op: "RealDiv"
      input: "estimate/auc/add_5"
      input: "estimate/auc/truediv/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Mul"
      op: "Mul"
      input: "estimate/auc/sub"
      input: "estimate/auc/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/value"
      op: "Sum"
      input: "estimate/auc/Mul"
      input: "estimate/auc/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc/add_6/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_6"
      op: "Add"
      input: "estimate/auc/AssignAdd"
      input: "estimate/auc/add_6/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_7"
      op: "Add"
      input: "estimate/auc/AssignAdd"
      input: "estimate/auc/AssignAdd_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_8/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_8"
      op: "Add"
      input: "estimate/auc/add_7"
      input: "estimate/auc/add_8/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/div_2"
      op: "RealDiv"
      input: "estimate/auc/add_6"
      input: "estimate/auc/add_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_9"
      op: "Add"
      input: "estimate/auc/AssignAdd_3"
      input: "estimate/auc/AssignAdd_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_10/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "estimate/auc/add_10"
      op: "Add"
      input: "estimate/auc/add_9"
      input: "estimate/auc/add_10/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/div_3"
      op: "RealDiv"
      input: "estimate/auc/AssignAdd_3"
      input: "estimate/auc/add_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 200
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_5"
      op: "StridedSlice"
      input: "estimate/auc/div_3"
      input: "estimate/auc/strided_slice_5/stack"
      input: "estimate/auc/strided_slice_5/stack_1"
      input: "estimate/auc/strided_slice_5/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_6"
      op: "StridedSlice"
      input: "estimate/auc/div_3"
      input: "estimate/auc/strided_slice_6/stack"
      input: "estimate/auc/strided_slice_6/stack_1"
      input: "estimate/auc/strided_slice_6/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/sub_1"
      op: "Sub"
      input: "estimate/auc/strided_slice_5"
      input: "estimate/auc/strided_slice_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 199
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_7"
      op: "StridedSlice"
      input: "estimate/auc/div_2"
      input: "estimate/auc/strided_slice_7/stack"
      input: "estimate/auc/strided_slice_7/stack_1"
      input: "estimate/auc/strided_slice_7/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "estimate/auc/strided_slice_8"
      op: "StridedSlice"
      input: "estimate/auc/div_2"
      input: "estimate/auc/strided_slice_8/stack"
      input: "estimate/auc/strided_slice_8/stack_1"
      input: "estimate/auc/strided_slice_8/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "estimate/auc/add_11"
      op: "Add"
      input: "estimate/auc/strided_slice_7"
      input: "estimate/auc/strided_slice_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/truediv_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "estimate/auc/truediv_1"
      op: "RealDiv"
      input: "estimate/auc/add_11"
      input: "estimate/auc/truediv_1/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Mul_1"
      op: "Mul"
      input: "estimate/auc/sub_1"
      input: "estimate/auc/truediv_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 199
              }
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "estimate/auc/update_op"
      op: "Sum"
      input: "estimate/auc/Mul_1"
      input: "estimate/auc/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "estimate/auc1/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "estimate/auc1"
          }
        }
      }
    }
    node {
      name: "estimate/auc1"
      op: "ScalarSummary"
      input: "estimate/auc1/tags"
      input: "estimate/auc/value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "estimate/auc1_1/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "estimate/auc1_1"
          }
        }
      }
    }
    node {
      name: "estimate/auc1_1"
      op: "ScalarSummary"
      input: "estimate/auc1_1/tags"
      input: "estimate/auc/update_op"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "train/gradients/Fill"
      op: "Fill"
      input: "train/gradients/Shape"
      input: "train/gradients/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/Fill"
      input: "train/gradients/estimate/Mean_grad/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Shape"
      op: "Shape"
      input: "estimate/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Tile"
      op: "Tile"
      input: "train/gradients/estimate/Mean_grad/Reshape"
      input: "train/gradients/estimate/Mean_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Shape_1"
      op: "Shape"
      input: "estimate/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Shape_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Prod"
      op: "Prod"
      input: "train/gradients/estimate/Mean_grad/Shape_1"
      input: "train/gradients/estimate/Mean_grad/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Prod_1"
      op: "Prod"
      input: "train/gradients/estimate/Mean_grad/Shape_2"
      input: "train/gradients/estimate/Mean_grad/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/estimate/Mean_grad/Prod_1"
      input: "train/gradients/estimate/Mean_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/estimate/Mean_grad/Prod"
      input: "train/gradients/estimate/Mean_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/Cast"
      op: "Cast"
      input: "train/gradients/estimate/Mean_grad/floordiv"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Mean_grad/truediv"
      op: "RealDiv"
      input: "train/gradients/estimate/Mean_grad/Tile"
      input: "train/gradients/estimate/Mean_grad/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Shape"
      op: "Shape"
      input: "estimate/Square"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/add"
      op: "Add"
      input: "estimate/Sum/reduction_indices"
      input: "train/gradients/estimate/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/mod"
      op: "FloorMod"
      input: "train/gradients/estimate/Sum_grad/add"
      input: "train/gradients/estimate/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/range"
      op: "Range"
      input: "train/gradients/estimate/Sum_grad/range/start"
      input: "train/gradients/estimate/Sum_grad/Size"
      input: "train/gradients/estimate/Sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Fill"
      op: "Fill"
      input: "train/gradients/estimate/Sum_grad/Shape_1"
      input: "train/gradients/estimate/Sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/estimate/Sum_grad/range"
      input: "train/gradients/estimate/Sum_grad/mod"
      input: "train/gradients/estimate/Sum_grad/Shape"
      input: "train/gradients/estimate/Sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/estimate/Sum_grad/DynamicStitch"
      input: "train/gradients/estimate/Sum_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/estimate/Sum_grad/Shape"
      input: "train/gradients/estimate/Sum_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/estimate/Mean_grad/truediv"
      input: "train/gradients/estimate/Sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Sum_grad/Tile"
      op: "Tile"
      input: "train/gradients/estimate/Sum_grad/Reshape"
      input: "train/gradients/estimate/Sum_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Square_grad/mul/x"
      op: "Const"
      input: "^train/gradients/estimate/Sum_grad/Tile"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Square_grad/mul"
      op: "Mul"
      input: "train/gradients/estimate/Square_grad/mul/x"
      input: "estimate/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/Square_grad/mul_1"
      op: "Mul"
      input: "train/gradients/estimate/Sum_grad/Tile"
      input: "train/gradients/estimate/Square_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Shape"
      op: "Shape"
      input: "Placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Shape_1"
      op: "Shape"
      input: "score"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/estimate/sub_grad/Shape"
      input: "train/gradients/estimate/sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Sum"
      op: "Sum"
      input: "train/gradients/estimate/Square_grad/mul_1"
      input: "train/gradients/estimate/sub_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/estimate/sub_grad/Sum"
      input: "train/gradients/estimate/sub_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/estimate/Square_grad/mul_1"
      input: "train/gradients/estimate/sub_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Neg"
      op: "Neg"
      input: "train/gradients/estimate/sub_grad/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/estimate/sub_grad/Neg"
      input: "train/gradients/estimate/sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/estimate/sub_grad/Reshape"
      input: "^train/gradients/estimate/sub_grad/Reshape_1"
    }
    node {
      name: "train/gradients/estimate/sub_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/estimate/sub_grad/Reshape"
      input: "^train/gradients/estimate/sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/estimate/sub_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/estimate/sub_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/estimate/sub_grad/Reshape_1"
      input: "^train/gradients/estimate/sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/estimate/sub_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/score_grad/SigmoidGrad"
      op: "SigmoidGrad"
      input: "score"
      input: "train/gradients/estimate/sub_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Shape"
      op: "Shape"
      input: "deepfm/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/deepfm/out_grad/Shape"
      input: "train/gradients/deepfm/out_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Sum"
      op: "Sum"
      input: "train/gradients/score_grad/SigmoidGrad"
      input: "train/gradients/deepfm/out_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deepfm/out_grad/Sum"
      input: "train/gradients/deepfm/out_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/score_grad/SigmoidGrad"
      input: "train/gradients/deepfm/out_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/deepfm/out_grad/Sum_1"
      input: "train/gradients/deepfm/out_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deepfm/out_grad/Reshape"
      input: "^train/gradients/deepfm/out_grad/Reshape_1"
    }
    node {
      name: "train/gradients/deepfm/out_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deepfm/out_grad/Reshape"
      input: "^train/gradients/deepfm/out_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/out_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/out_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deepfm/out_grad/Reshape_1"
      input: "^train/gradients/deepfm/out_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/out_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/MatMul"
      op: "MatMul"
      input: "train/gradients/deepfm/out_grad/tuple/control_dependency"
      input: "deepfm/concat_projection0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 83
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "deepfm/concat"
      input: "train/gradients/deepfm/out_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deepfm/MatMul_grad/MatMul"
      input: "^train/gradients/deepfm/MatMul_grad/MatMul_1"
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deepfm/MatMul_grad/MatMul"
      input: "^train/gradients/deepfm/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 83
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deepfm/MatMul_grad/MatMul_1"
      input: "^train/gradients/deepfm/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/mod"
      op: "FloorMod"
      input: "deepfm/concat/axis"
      input: "train/gradients/deepfm/concat_grad/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Shape"
      op: "Shape"
      input: "fm/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/ShapeN"
      op: "ShapeN"
      input: "fm/Sum"
      input: "fm/mul"
      input: "deep/Relu_1"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "train/gradients/deepfm/concat_grad/mod"
      input: "train/gradients/deepfm/concat_grad/ShapeN"
      input: "train/gradients/deepfm/concat_grad/ShapeN:1"
      input: "train/gradients/deepfm/concat_grad/ShapeN:2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Slice"
      op: "Slice"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deepfm/concat_grad/ConcatOffset"
      input: "train/gradients/deepfm/concat_grad/ShapeN"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Slice_1"
      op: "Slice"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deepfm/concat_grad/ConcatOffset:1"
      input: "train/gradients/deepfm/concat_grad/ShapeN:1"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/Slice_2"
      op: "Slice"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deepfm/concat_grad/ConcatOffset:2"
      input: "train/gradients/deepfm/concat_grad/ShapeN:2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deepfm/concat_grad/Slice"
      input: "^train/gradients/deepfm/concat_grad/Slice_1"
      input: "^train/gradients/deepfm/concat_grad/Slice_2"
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deepfm/concat_grad/Slice"
      input: "^train/gradients/deepfm/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/concat_grad/Slice"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deepfm/concat_grad/Slice_1"
      input: "^train/gradients/deepfm/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/concat_grad/Slice_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deepfm/concat_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "train/gradients/deepfm/concat_grad/Slice_2"
      input: "^train/gradients/deepfm/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deepfm/concat_grad/Slice_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Shape"
      op: "Shape"
      input: "fm/Mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/add"
      op: "Add"
      input: "fm/Sum/reduction_indices"
      input: "train/gradients/fm/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/mod"
      op: "FloorMod"
      input: "train/gradients/fm/Sum_grad/add"
      input: "train/gradients/fm/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/range"
      op: "Range"
      input: "train/gradients/fm/Sum_grad/range/start"
      input: "train/gradients/fm/Sum_grad/Size"
      input: "train/gradients/fm/Sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Fill"
      op: "Fill"
      input: "train/gradients/fm/Sum_grad/Shape_1"
      input: "train/gradients/fm/Sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/fm/Sum_grad/range"
      input: "train/gradients/fm/Sum_grad/mod"
      input: "train/gradients/fm/Sum_grad/Shape"
      input: "train/gradients/fm/Sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/fm/Sum_grad/DynamicStitch"
      input: "train/gradients/fm/Sum_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/fm/Sum_grad/Shape"
      input: "train/gradients/fm/Sum_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency"
      input: "train/gradients/fm/Sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_grad/Tile"
      op: "Tile"
      input: "train/gradients/fm/Sum_grad/Reshape"
      input: "train/gradients/fm/Sum_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Shape_1"
      op: "Shape"
      input: "fm/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/mul_grad/Shape"
      input: "train/gradients/fm/mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/mul"
      op: "Mul"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency_1"
      input: "fm/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/mul"
      input: "train/gradients/fm/mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/mul_grad/Sum"
      input: "train/gradients/fm/mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/mul_1"
      op: "Mul"
      input: "fm/mul/x"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/mul_1"
      input: "train/gradients/fm/mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/mul_grad/Sum_1"
      input: "train/gradients/fm/mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/mul_grad/Reshape"
      input: "^train/gradients/fm/mul_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/mul_grad/Reshape"
      input: "^train/gradients/fm/mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/mul_grad/Reshape_1"
      input: "^train/gradients/fm/mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "train/gradients/deepfm/concat_grad/tuple/control_dependency_2"
      input: "deep/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Shape_1"
      op: "Shape"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/Mul_1_grad/Shape"
      input: "train/gradients/fm/Mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/mul"
      op: "Mul"
      input: "train/gradients/fm/Sum_grad/Tile"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/Mul_1_grad/mul"
      input: "train/gradients/fm/Mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Mul_1_grad/Sum"
      input: "train/gradients/fm/Mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/mul_1"
      op: "Mul"
      input: "fm/feature_bias_0/read"
      input: "train/gradients/fm/Sum_grad/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/Mul_1_grad/mul_1"
      input: "train/gradients/fm/Mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/Mul_1_grad/Sum_1"
      input: "train/gradients/fm/Mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/Mul_1_grad/Reshape"
      input: "^train/gradients/fm/Mul_1_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/Mul_1_grad/Reshape"
      input: "^train/gradients/fm/Mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/Mul_1_grad/Reshape_1"
      input: "^train/gradients/fm/Mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Shape"
      op: "Shape"
      input: "fm/Square"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Shape_1"
      op: "Shape"
      input: "fm/Sum_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/Sub_grad/Shape"
      input: "train/gradients/fm/Sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/tuple/control_dependency_1"
      input: "train/gradients/fm/Sub_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Sub_grad/Sum"
      input: "train/gradients/fm/Sub_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/mul_grad/tuple/control_dependency_1"
      input: "train/gradients/fm/Sub_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Neg"
      op: "Neg"
      input: "train/gradients/fm/Sub_grad/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/Sub_grad/Neg"
      input: "train/gradients/fm/Sub_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/Sub_grad/Reshape"
      input: "^train/gradients/fm/Sub_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/Sub_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/Sub_grad/Reshape"
      input: "^train/gradients/fm/Sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Sub_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sub_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/Sub_grad/Reshape_1"
      input: "^train/gradients/fm/Sub_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Sub_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Shape"
      op: "Shape"
      input: "deep/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000@\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/deep/Add_1_grad/Shape"
      input: "train/gradients/deep/Add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Sum"
      op: "Sum"
      input: "train/gradients/deep/Relu_1_grad/ReluGrad"
      input: "train/gradients/deep/Add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deep/Add_1_grad/Sum"
      input: "train/gradients/deep/Add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/deep/Relu_1_grad/ReluGrad"
      input: "train/gradients/deep/Add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/deep/Add_1_grad/Sum_1"
      input: "train/gradients/deep/Add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/Add_1_grad/Reshape"
      input: "^train/gradients/deep/Add_1_grad/Reshape_1"
    }
    node {
      name: "train/gradients/deep/Add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/Add_1_grad/Reshape"
      input: "^train/gradients/deep/Add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/Add_1_grad/Reshape_1"
      input: "^train/gradients/deep/Add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_grad/mul/x"
      op: "Const"
      input: "^train/gradients/fm/Sub_grad/tuple/control_dependency"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_grad/mul"
      op: "Mul"
      input: "train/gradients/fm/Square_grad/mul/x"
      input: "fm/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_grad/mul_1"
      op: "Mul"
      input: "train/gradients/fm/Sub_grad/tuple/control_dependency"
      input: "train/gradients/fm/Square_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Shape"
      op: "Shape"
      input: "fm/Square_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/add"
      op: "Add"
      input: "fm/Sum_2/reduction_indices"
      input: "train/gradients/fm/Sum_2_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/mod"
      op: "FloorMod"
      input: "train/gradients/fm/Sum_2_grad/add"
      input: "train/gradients/fm/Sum_2_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/range"
      op: "Range"
      input: "train/gradients/fm/Sum_2_grad/range/start"
      input: "train/gradients/fm/Sum_2_grad/Size"
      input: "train/gradients/fm/Sum_2_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Fill"
      op: "Fill"
      input: "train/gradients/fm/Sum_2_grad/Shape_1"
      input: "train/gradients/fm/Sum_2_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/fm/Sum_2_grad/range"
      input: "train/gradients/fm/Sum_2_grad/mod"
      input: "train/gradients/fm/Sum_2_grad/Shape"
      input: "train/gradients/fm/Sum_2_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/fm/Sum_2_grad/DynamicStitch"
      input: "train/gradients/fm/Sum_2_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/fm/Sum_2_grad/Shape"
      input: "train/gradients/fm/Sum_2_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Sub_grad/tuple/control_dependency_1"
      input: "train/gradients/fm/Sum_2_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_2_grad/Tile"
      op: "Tile"
      input: "train/gradients/fm/Sum_2_grad/Reshape"
      input: "train/gradients/fm/Sum_2_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "train/gradients/deep/Add_1_grad/tuple/control_dependency"
      input: "deep/weights_layer1/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "deep/Relu"
      input: "train/gradients/deep/Add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/MatMul_1_grad/MatMul"
      input: "^train/gradients/deep/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/MatMul_1_grad/MatMul"
      input: "^train/gradients/deep/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/MatMul_1_grad/MatMul_1"
      input: "^train/gradients/deep/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Shape"
      op: "Shape"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/add"
      op: "Add"
      input: "fm/Sum_1/reduction_indices"
      input: "train/gradients/fm/Sum_1_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/mod"
      op: "FloorMod"
      input: "train/gradients/fm/Sum_1_grad/add"
      input: "train/gradients/fm/Sum_1_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/range"
      op: "Range"
      input: "train/gradients/fm/Sum_1_grad/range/start"
      input: "train/gradients/fm/Sum_1_grad/Size"
      input: "train/gradients/fm/Sum_1_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Fill/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Fill"
      op: "Fill"
      input: "train/gradients/fm/Sum_1_grad/Shape_1"
      input: "train/gradients/fm/Sum_1_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "train/gradients/fm/Sum_1_grad/range"
      input: "train/gradients/fm/Sum_1_grad/mod"
      input: "train/gradients/fm/Sum_1_grad/Shape"
      input: "train/gradients/fm/Sum_1_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Maximum"
      op: "Maximum"
      input: "train/gradients/fm/Sum_1_grad/DynamicStitch"
      input: "train/gradients/fm/Sum_1_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/floordiv"
      op: "FloorDiv"
      input: "train/gradients/fm/Sum_1_grad/Shape"
      input: "train/gradients/fm/Sum_1_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Square_grad/mul_1"
      input: "train/gradients/fm/Sum_1_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Sum_1_grad/Tile"
      op: "Tile"
      input: "train/gradients/fm/Sum_1_grad/Reshape"
      input: "train/gradients/fm/Sum_1_grad/floordiv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_1_grad/mul/x"
      op: "Const"
      input: "^train/gradients/fm/Sum_2_grad/Tile"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_1_grad/mul"
      op: "Mul"
      input: "train/gradients/fm/Square_1_grad/mul/x"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Square_1_grad/mul_1"
      op: "Mul"
      input: "train/gradients/fm/Sum_2_grad/Tile"
      input: "train/gradients/fm/Square_1_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency"
      input: "deep/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Shape"
      op: "Shape"
      input: "deep/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\200\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/deep/Add_grad/Shape"
      input: "train/gradients/deep/Add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Sum"
      op: "Sum"
      input: "train/gradients/deep/Relu_grad/ReluGrad"
      input: "train/gradients/deep/Add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deep/Add_grad/Sum"
      input: "train/gradients/deep/Add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/deep/Relu_grad/ReluGrad"
      input: "train/gradients/deep/Add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/deep/Add_grad/Sum_1"
      input: "train/gradients/deep/Add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/Add_grad/Reshape"
      input: "^train/gradients/deep/Add_grad/Reshape_1"
    }
    node {
      name: "train/gradients/deep/Add_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/Add_grad/Reshape"
      input: "^train/gradients/deep/Add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/Add_grad/Reshape_1"
      input: "^train/gradients/deep/Add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/Add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/MatMul"
      op: "MatMul"
      input: "train/gradients/deep/Add_grad/tuple/control_dependency"
      input: "deep/weights_layer0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "deep/Reshape"
      input: "train/gradients/deep/Add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/deep/MatMul_grad/MatMul"
      input: "^train/gradients/deep/MatMul_grad/MatMul_1"
    }
    node {
      name: "train/gradients/deep/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/deep/MatMul_grad/MatMul"
      input: "^train/gradients/deep/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/deep/MatMul_grad/MatMul_1"
      input: "^train/gradients/deep/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/deep/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/deep/Reshape_grad/Shape"
      op: "Shape"
      input: "fm/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/deep/Reshape_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/deep/MatMul_grad/tuple/control_dependency"
      input: "train/gradients/deep/Reshape_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/AddN"
      op: "AddN"
      input: "train/gradients/fm/Sum_1_grad/Tile"
      input: "train/gradients/fm/Square_1_grad/mul_1"
      input: "train/gradients/deep/Reshape_grad/Reshape"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Sum_1_grad/Tile"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Shape_1"
      op: "Shape"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "train/gradients/fm/Mul_grad/Shape"
      input: "train/gradients/fm/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/mul"
      op: "Mul"
      input: "train/gradients/AddN"
      input: "fm/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Sum"
      op: "Sum"
      input: "train/gradients/fm/Mul_grad/mul"
      input: "train/gradients/fm/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Reshape"
      op: "Reshape"
      input: "train/gradients/fm/Mul_grad/Sum"
      input: "train/gradients/fm/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/mul_1"
      op: "Mul"
      input: "fm/feature_embeddings/read"
      input: "train/gradients/AddN"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Sum_1"
      op: "Sum"
      input: "train/gradients/fm/Mul_grad/mul_1"
      input: "train/gradients/fm/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "train/gradients/fm/Mul_grad/Sum_1"
      input: "train/gradients/fm/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^train/gradients/fm/Mul_grad/Reshape"
      input: "^train/gradients/fm/Mul_grad/Reshape_1"
    }
    node {
      name: "train/gradients/fm/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "train/gradients/fm/Mul_grad/Reshape"
      input: "^train/gradients/fm/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "train/gradients/fm/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "train/gradients/fm/Mul_grad/Reshape_1"
      input: "^train/gradients/fm/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train/gradients/fm/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "train/beta1_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "train/beta1_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "train/beta1_power/Assign"
      op: "Assign"
      input: "train/beta1_power"
      input: "train/beta1_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/beta1_power/read"
      op: "Identity"
      input: "train/beta1_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/beta2_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "train/beta2_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "train/beta2_power/Assign"
      op: "Assign"
      input: "train/beta2_power"
      input: "train/beta2_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/beta2_power/read"
      op: "Identity"
      input: "train/beta2_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam/Assign"
      op: "Assign"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam/read"
      op: "Identity"
      input: "fm/feature_embeddings/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1/Assign"
      op: "Assign"
      input: "fm/feature_embeddings/Adam_1"
      input: "fm/feature_embeddings/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_embeddings/Adam_1/read"
      op: "Identity"
      input: "fm/feature_embeddings/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam/Assign"
      op: "Assign"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam/read"
      op: "Identity"
      input: "fm/feature_bias_0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1/Assign"
      op: "Assign"
      input: "fm/feature_bias_0/Adam_1"
      input: "fm/feature_bias_0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fm/feature_bias_0/Adam_1/read"
      op: "Identity"
      input: "fm/feature_bias_0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 90
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam/Assign"
      op: "Assign"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam/read"
      op: "Identity"
      input: "deep/weights_layer0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 90
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_layer0/Adam_1"
      input: "deep/weights_layer0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer0/Adam_1/read"
      op: "Identity"
      input: "deep/weights_layer0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam/Assign"
      op: "Assign"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam/read"
      op: "Identity"
      input: "deep/weights_bias0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 128
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_bias0/Adam_1"
      input: "deep/weights_bias0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias0/Adam_1/read"
      op: "Identity"
      input: "deep/weights_bias0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 128
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam/Assign"
      op: "Assign"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam/read"
      op: "Identity"
      input: "deep/weights_layer1/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 128
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_layer1/Adam_1"
      input: "deep/weights_layer1/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_layer1/Adam_1/read"
      op: "Identity"
      input: "deep/weights_layer1/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam/Assign"
      op: "Assign"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam/read"
      op: "Identity"
      input: "deep/weights_bias1/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 64
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1/Assign"
      op: "Assign"
      input: "deep/weights_bias1/Adam_1"
      input: "deep/weights_bias1/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deep/weights_bias1/Adam_1/read"
      op: "Identity"
      input: "deep/weights_bias1/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 83
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam/Assign"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam/read"
      op: "Identity"
      input: "deepfm/concat_projection0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 83
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1/Assign"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam_1"
      input: "deepfm/concat_projection0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_projection0/Adam_1/read"
      op: "Identity"
      input: "deepfm/concat_projection0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam/Assign"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam/read"
      op: "Identity"
      input: "deepfm/concat_bias0/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1/Assign"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam_1"
      input: "deepfm/concat_bias0/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deepfm/concat_bias0/Adam_1/read"
      op: "Identity"
      input: "deepfm/concat_bias0/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/Adam/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "train/Adam/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "train/Adam/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "train/Adam/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "train/Adam/update_fm/feature_embeddings/ApplyAdam"
      op: "ApplyAdam"
      input: "fm/feature_embeddings"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/fm/Mul_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_fm/feature_bias_0/ApplyAdam"
      op: "ApplyAdam"
      input: "fm/feature_bias_0"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/fm/Mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_layer0/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_bias0/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/Add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_layer1/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deep/weights_bias1/ApplyAdam"
      op: "ApplyAdam"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deep/Add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      op: "ApplyAdam"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deepfm/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      op: "ApplyAdam"
      input: "deepfm/concat_bias0"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam_1"
      input: "train/beta1_power/read"
      input: "train/beta2_power/read"
      input: "train/Adam/learning_rate"
      input: "train/Adam/beta1"
      input: "train/Adam/beta2"
      input: "train/Adam/epsilon"
      input: "train/gradients/deepfm/out_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "train/Adam/mul"
      op: "Mul"
      input: "train/beta1_power/read"
      input: "train/Adam/beta1"
      input: "^train/Adam/update_fm/feature_embeddings/ApplyAdam"
      input: "^train/Adam/update_fm/feature_bias_0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer1/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias1/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/Adam/Assign"
      op: "Assign"
      input: "train/beta1_power"
      input: "train/Adam/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/Adam/mul_1"
      op: "Mul"
      input: "train/beta2_power/read"
      input: "train/Adam/beta2"
      input: "^train/Adam/update_fm/feature_embeddings/ApplyAdam"
      input: "^train/Adam/update_fm/feature_bias_0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer1/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias1/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train/Adam/Assign_1"
      op: "Assign"
      input: "train/beta2_power"
      input: "train/Adam/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train/Adam"
      op: "NoOp"
      input: "^train/Adam/update_fm/feature_embeddings/ApplyAdam"
      input: "^train/Adam/update_fm/feature_bias_0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias0/ApplyAdam"
      input: "^train/Adam/update_deep/weights_layer1/ApplyAdam"
      input: "^train/Adam/update_deep/weights_bias1/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_projection0/ApplyAdam"
      input: "^train/Adam/update_deepfm/concat_bias0/ApplyAdam"
      input: "^train/Adam/Assign"
      input: "^train/Adam/Assign_1"
    }
    node {
      name: "train/init"
      op: "NoOp"
      input: "^fm/feature_embeddings/Assign"
      input: "^fm/feature_bias_0/Assign"
      input: "^deep/weights_layer0/Assign"
      input: "^deep/weights_bias0/Assign"
      input: "^deep/weights_layer1/Assign"
      input: "^deep/weights_bias1/Assign"
      input: "^deepfm/concat_projection0/Assign"
      input: "^deepfm/concat_bias0/Assign"
      input: "^train/beta1_power/Assign"
      input: "^train/beta2_power/Assign"
      input: "^fm/feature_embeddings/Adam/Assign"
      input: "^fm/feature_embeddings/Adam_1/Assign"
      input: "^fm/feature_bias_0/Adam/Assign"
      input: "^fm/feature_bias_0/Adam_1/Assign"
      input: "^deep/weights_layer0/Adam/Assign"
      input: "^deep/weights_layer0/Adam_1/Assign"
      input: "^deep/weights_bias0/Adam/Assign"
      input: "^deep/weights_bias0/Adam_1/Assign"
      input: "^deep/weights_layer1/Adam/Assign"
      input: "^deep/weights_layer1/Adam_1/Assign"
      input: "^deep/weights_bias1/Adam/Assign"
      input: "^deep/weights_bias1/Adam_1/Assign"
      input: "^deepfm/concat_projection0/Adam/Assign"
      input: "^deepfm/concat_projection0/Adam_1/Assign"
      input: "^deepfm/concat_bias0/Adam/Assign"
      input: "^deepfm/concat_bias0/Adam_1/Assign"
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "deep/weights_bias0"
            string_val: "deep/weights_bias0/Adam"
            string_val: "deep/weights_bias0/Adam_1"
            string_val: "deep/weights_bias1"
            string_val: "deep/weights_bias1/Adam"
            string_val: "deep/weights_bias1/Adam_1"
            string_val: "deep/weights_layer0"
            string_val: "deep/weights_layer0/Adam"
            string_val: "deep/weights_layer0/Adam_1"
            string_val: "deep/weights_layer1"
            string_val: "deep/weights_layer1/Adam"
            string_val: "deep/weights_layer1/Adam_1"
            string_val: "deepfm/concat_bias0"
            string_val: "deepfm/concat_bias0/Adam"
            string_val: "deepfm/concat_bias0/Adam_1"
            string_val: "deepfm/concat_projection0"
            string_val: "deepfm/concat_projection0/Adam"
            string_val: "deepfm/concat_projection0/Adam_1"
            string_val: "fm/feature_bias_0"
            string_val: "fm/feature_bias_0/Adam"
            string_val: "fm/feature_bias_0/Adam_1"
            string_val: "fm/feature_embeddings"
            string_val: "fm/feature_embeddings/Adam"
            string_val: "fm/feature_embeddings/Adam_1"
            string_val: "train/beta1_power"
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/Const"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam_1"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam_1"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam_1"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam_1"
      input: "deepfm/concat_bias0"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam_1"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam_1"
      input: "fm/feature_bias_0"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam_1"
      input: "fm/feature_embeddings"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam_1"
      input: "train/beta1_power"
      input: "train/beta2_power"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/Const"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/Const"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "deep/weights_bias0"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_1/tensor_names"
      input: "save/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "deep/weights_bias0/Adam"
      input: "save/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_2/tensor_names"
      input: "save/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "deep/weights_bias0/Adam_1"
      input: "save/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_3/tensor_names"
      input: "save/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "deep/weights_bias1"
      input: "save/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_4/tensor_names"
      input: "save/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "deep/weights_bias1/Adam"
      input: "save/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_5/tensor_names"
      input: "save/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "deep/weights_bias1/Adam_1"
      input: "save/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_6/tensor_names"
      input: "save/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "deep/weights_layer0"
      input: "save/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_7/tensor_names"
      input: "save/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "deep/weights_layer0/Adam"
      input: "save/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_8/tensor_names"
      input: "save/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "deep/weights_layer0/Adam_1"
      input: "save/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_9/tensor_names"
      input: "save/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "deep/weights_layer1"
      input: "save/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_10/tensor_names"
      input: "save/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "deep/weights_layer1/Adam"
      input: "save/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_11/tensor_names"
      input: "save/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "deep/weights_layer1/Adam_1"
      input: "save/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_12/tensor_names"
      input: "save/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "deepfm/concat_bias0"
      input: "save/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_13/tensor_names"
      input: "save/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam"
      input: "save/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_14/tensor_names"
      input: "save/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam_1"
      input: "save/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_15/tensor_names"
      input: "save/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_15"
      op: "Assign"
      input: "deepfm/concat_projection0"
      input: "save/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_16/tensor_names"
      input: "save/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_16"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam"
      input: "save/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_17/tensor_names"
      input: "save/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_17"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam_1"
      input: "save/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_18/tensor_names"
      input: "save/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_18"
      op: "Assign"
      input: "fm/feature_bias_0"
      input: "save/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_19/tensor_names"
      input: "save/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_19"
      op: "Assign"
      input: "fm/feature_bias_0/Adam"
      input: "save/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_20/tensor_names"
      input: "save/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_20"
      op: "Assign"
      input: "fm/feature_bias_0/Adam_1"
      input: "save/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_21/tensor_names"
      input: "save/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_21"
      op: "Assign"
      input: "fm/feature_embeddings"
      input: "save/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_22/tensor_names"
      input: "save/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_22"
      op: "Assign"
      input: "fm/feature_embeddings/Adam"
      input: "save/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_23/tensor_names"
      input: "save/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_23"
      op: "Assign"
      input: "fm/feature_embeddings/Adam_1"
      input: "save/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta1_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_24/tensor_names"
      input: "save/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_24"
      op: "Assign"
      input: "train/beta1_power"
      input: "save/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_25/tensor_names"
      input: "save/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_25"
      op: "Assign"
      input: "train/beta2_power"
      input: "save/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
      input: "^save/Assign_7"
      input: "^save/Assign_8"
      input: "^save/Assign_9"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_15"
      input: "^save/Assign_16"
      input: "^save/Assign_17"
      input: "^save/Assign_18"
      input: "^save/Assign_19"
      input: "^save/Assign_20"
      input: "^save/Assign_21"
      input: "^save/Assign_22"
      input: "^save/Assign_23"
      input: "^save/Assign_24"
      input: "^save/Assign_25"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^estimate/auc/true_positives/Assign"
      input: "^estimate/auc/false_negatives/Assign"
      input: "^estimate/auc/true_negatives/Assign"
      input: "^estimate/auc/false_positives/Assign"
    }
    node {
      name: "Merge/MergeSummary"
      op: "MergeSummary"
      input: "deep_fm/score"
      input: "estimate/loss"
      input: "estimate/auc1"
      input: "estimate/auc1_1"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_81eb6375f877478a85daaa4979590003/part"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin"
      op: "StringJoin"
      input: "save_1/Const"
      input: "save_1/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save_1/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename/shard"
      input: "save_1/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "deep/weights_bias0"
            string_val: "deep/weights_bias0/Adam"
            string_val: "deep/weights_bias0/Adam_1"
            string_val: "deep/weights_bias1"
            string_val: "deep/weights_bias1/Adam"
            string_val: "deep/weights_bias1/Adam_1"
            string_val: "deep/weights_layer0"
            string_val: "deep/weights_layer0/Adam"
            string_val: "deep/weights_layer0/Adam_1"
            string_val: "deep/weights_layer1"
            string_val: "deep/weights_layer1/Adam"
            string_val: "deep/weights_layer1/Adam_1"
            string_val: "deepfm/concat_bias0"
            string_val: "deepfm/concat_bias0/Adam"
            string_val: "deepfm/concat_bias0/Adam_1"
            string_val: "deepfm/concat_projection0"
            string_val: "deepfm/concat_projection0/Adam"
            string_val: "deepfm/concat_projection0/Adam_1"
            string_val: "fm/feature_bias_0"
            string_val: "fm/feature_bias_0/Adam"
            string_val: "fm/feature_bias_0/Adam_1"
            string_val: "fm/feature_embeddings"
            string_val: "fm/feature_embeddings/Adam"
            string_val: "fm/feature_embeddings/Adam_1"
            string_val: "train/beta1_power"
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2"
      op: "SaveV2"
      input: "save_1/ShardedFilename"
      input: "save_1/SaveV2/tensor_names"
      input: "save_1/SaveV2/shape_and_slices"
      input: "deep/weights_bias0"
      input: "deep/weights_bias0/Adam"
      input: "deep/weights_bias0/Adam_1"
      input: "deep/weights_bias1"
      input: "deep/weights_bias1/Adam"
      input: "deep/weights_bias1/Adam_1"
      input: "deep/weights_layer0"
      input: "deep/weights_layer0/Adam"
      input: "deep/weights_layer0/Adam_1"
      input: "deep/weights_layer1"
      input: "deep/weights_layer1/Adam"
      input: "deep/weights_layer1/Adam_1"
      input: "deepfm/concat_bias0"
      input: "deepfm/concat_bias0/Adam"
      input: "deepfm/concat_bias0/Adam_1"
      input: "deepfm/concat_projection0"
      input: "deepfm/concat_projection0/Adam"
      input: "deepfm/concat_projection0/Adam_1"
      input: "fm/feature_bias_0"
      input: "fm/feature_bias_0/Adam"
      input: "fm/feature_bias_0/Adam_1"
      input: "fm/feature_embeddings"
      input: "fm/feature_embeddings/Adam"
      input: "fm/feature_embeddings/Adam_1"
      input: "train/beta1_power"
      input: "train/beta2_power"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency"
      op: "Identity"
      input: "save_1/ShardedFilename"
      input: "^save_1/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save_1/ShardedFilename"
      input: "^save_1/control_dependency"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save_1/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Identity"
      op: "Identity"
      input: "save_1/Const"
      input: "^save_1/control_dependency"
      input: "^save_1/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2/tensor_names"
      input: "save_1/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign"
      op: "Assign"
      input: "deep/weights_bias0"
      input: "save_1/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_1/tensor_names"
      input: "save_1/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_1"
      op: "Assign"
      input: "deep/weights_bias0/Adam"
      input: "save_1/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_2/tensor_names"
      input: "save_1/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_2"
      op: "Assign"
      input: "deep/weights_bias0/Adam_1"
      input: "save_1/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_3/tensor_names"
      input: "save_1/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_3"
      op: "Assign"
      input: "deep/weights_bias1"
      input: "save_1/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_4/tensor_names"
      input: "save_1/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_4"
      op: "Assign"
      input: "deep/weights_bias1/Adam"
      input: "save_1/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_bias1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_5/tensor_names"
      input: "save_1/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_5"
      op: "Assign"
      input: "deep/weights_bias1/Adam_1"
      input: "save_1/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_bias1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_6/tensor_names"
      input: "save_1/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_6"
      op: "Assign"
      input: "deep/weights_layer0"
      input: "save_1/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_7/tensor_names"
      input: "save_1/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_7"
      op: "Assign"
      input: "deep/weights_layer0/Adam"
      input: "save_1/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_8/tensor_names"
      input: "save_1/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_8"
      op: "Assign"
      input: "deep/weights_layer0/Adam_1"
      input: "save_1/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 90
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_9/tensor_names"
      input: "save_1/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_9"
      op: "Assign"
      input: "deep/weights_layer1"
      input: "save_1/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_10/tensor_names"
      input: "save_1/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_10"
      op: "Assign"
      input: "deep/weights_layer1/Adam"
      input: "save_1/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deep/weights_layer1/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_11/tensor_names"
      input: "save_1/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_11"
      op: "Assign"
      input: "deep/weights_layer1/Adam_1"
      input: "save_1/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deep/weights_layer1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_12/tensor_names"
      input: "save_1/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_12"
      op: "Assign"
      input: "deepfm/concat_bias0"
      input: "save_1/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_13/tensor_names"
      input: "save_1/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_13"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam"
      input: "save_1/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_bias0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_14/tensor_names"
      input: "save_1/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_14"
      op: "Assign"
      input: "deepfm/concat_bias0/Adam_1"
      input: "save_1/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_bias0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_15/tensor_names"
      input: "save_1/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_15"
      op: "Assign"
      input: "deepfm/concat_projection0"
      input: "save_1/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_16/tensor_names"
      input: "save_1/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_16"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam"
      input: "save_1/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deepfm/concat_projection0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_17/tensor_names"
      input: "save_1/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_17"
      op: "Assign"
      input: "deepfm/concat_projection0/Adam_1"
      input: "save_1/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deepfm/concat_projection0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 83
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_18/tensor_names"
      input: "save_1/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_18"
      op: "Assign"
      input: "fm/feature_bias_0"
      input: "save_1/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_19/tensor_names"
      input: "save_1/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_19"
      op: "Assign"
      input: "fm/feature_bias_0/Adam"
      input: "save_1/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_bias_0/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_20/tensor_names"
      input: "save_1/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_20"
      op: "Assign"
      input: "fm/feature_bias_0/Adam_1"
      input: "save_1/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_bias_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_21/tensor_names"
      input: "save_1/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_21"
      op: "Assign"
      input: "fm/feature_embeddings"
      input: "save_1/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_22/tensor_names"
      input: "save_1/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_22"
      op: "Assign"
      input: "fm/feature_embeddings/Adam"
      input: "save_1/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fm/feature_embeddings/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_23/tensor_names"
      input: "save_1/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_23"
      op: "Assign"
      input: "fm/feature_embeddings/Adam_1"
      input: "save_1/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta1_power"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_24/tensor_names"
      input: "save_1/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_24"
      op: "Assign"
      input: "train/beta1_power"
      input: "save_1/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train/beta2_power"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_25/tensor_names"
      input: "save_1/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_25"
      op: "Assign"
      input: "train/beta2_power"
      input: "save_1/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fm/feature_embeddings"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard"
      op: "NoOp"
      input: "^save_1/Assign"
      input: "^save_1/Assign_1"
      input: "^save_1/Assign_2"
      input: "^save_1/Assign_3"
      input: "^save_1/Assign_4"
      input: "^save_1/Assign_5"
      input: "^save_1/Assign_6"
      input: "^save_1/Assign_7"
      input: "^save_1/Assign_8"
      input: "^save_1/Assign_9"
      input: "^save_1/Assign_10"
      input: "^save_1/Assign_11"
      input: "^save_1/Assign_12"
      input: "^save_1/Assign_13"
      input: "^save_1/Assign_14"
      input: "^save_1/Assign_15"
      input: "^save_1/Assign_16"
      input: "^save_1/Assign_17"
      input: "^save_1/Assign_18"
      input: "^save_1/Assign_19"
      input: "^save_1/Assign_20"
      input: "^save_1/Assign_21"
      input: "^save_1/Assign_22"
      input: "^save_1/Assign_23"
      input: "^save_1/Assign_24"
      input: "^save_1/Assign_25"
    }
    node {
      name: "save_1/restore_all"
      op: "NoOp"
      input: "^save_1/restore_shard"
    }
    versions {
      producer: 22
    }
  }
  saver_def {
    filename_tensor_name: "save_1/Const:0"
    save_tensor_name: "save_1/Identity:0"
    restore_op_name: "save_1/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "local_variables"
    value {
      node_list {
        value: "estimate/auc/true_positives:0"
        value: "estimate/auc/false_negatives:0"
        value: "estimate/auc/true_negatives:0"
        value: "estimate/auc/false_positives:0"
      }
    }
  }
  collection_def {
    key: "summaries"
    value {
      node_list {
        value: "deep_fm/score:0"
        value: "estimate/loss:0"
        value: "estimate/auc1:0"
        value: "estimate/auc1_1:0"
      }
    }
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "train/Adam"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\027fm/feature_embeddings:0\022\034fm/feature_embeddings/Assign\032\034fm/feature_embeddings/read:0"
        value: "\n\023fm/feature_bias_0:0\022\030fm/feature_bias_0/Assign\032\030fm/feature_bias_0/read:0"
        value: "\n\025deep/weights_layer0:0\022\032deep/weights_layer0/Assign\032\032deep/weights_layer0/read:0"
        value: "\n\024deep/weights_bias0:0\022\031deep/weights_bias0/Assign\032\031deep/weights_bias0/read:0"
        value: "\n\025deep/weights_layer1:0\022\032deep/weights_layer1/Assign\032\032deep/weights_layer1/read:0"
        value: "\n\024deep/weights_bias1:0\022\031deep/weights_bias1/Assign\032\031deep/weights_bias1/read:0"
        value: "\n\033deepfm/concat_projection0:0\022 deepfm/concat_projection0/Assign\032 deepfm/concat_projection0/read:0"
        value: "\n\025deepfm/concat_bias0:0\022\032deepfm/concat_bias0/Assign\032\032deepfm/concat_bias0/read:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\027fm/feature_embeddings:0\022\034fm/feature_embeddings/Assign\032\034fm/feature_embeddings/read:0"
        value: "\n\023fm/feature_bias_0:0\022\030fm/feature_bias_0/Assign\032\030fm/feature_bias_0/read:0"
        value: "\n\025deep/weights_layer0:0\022\032deep/weights_layer0/Assign\032\032deep/weights_layer0/read:0"
        value: "\n\024deep/weights_bias0:0\022\031deep/weights_bias0/Assign\032\031deep/weights_bias0/read:0"
        value: "\n\025deep/weights_layer1:0\022\032deep/weights_layer1/Assign\032\032deep/weights_layer1/read:0"
        value: "\n\024deep/weights_bias1:0\022\031deep/weights_bias1/Assign\032\031deep/weights_bias1/read:0"
        value: "\n\033deepfm/concat_projection0:0\022 deepfm/concat_projection0/Assign\032 deepfm/concat_projection0/read:0"
        value: "\n\025deepfm/concat_bias0:0\022\032deepfm/concat_bias0/Assign\032\032deepfm/concat_bias0/read:0"
        value: "\n\023train/beta1_power:0\022\030train/beta1_power/Assign\032\030train/beta1_power/read:0"
        value: "\n\023train/beta2_power:0\022\030train/beta2_power/Assign\032\030train/beta2_power/read:0"
        value: "\n\034fm/feature_embeddings/Adam:0\022!fm/feature_embeddings/Adam/Assign\032!fm/feature_embeddings/Adam/read:0"
        value: "\n\036fm/feature_embeddings/Adam_1:0\022#fm/feature_embeddings/Adam_1/Assign\032#fm/feature_embeddings/Adam_1/read:0"
        value: "\n\030fm/feature_bias_0/Adam:0\022\035fm/feature_bias_0/Adam/Assign\032\035fm/feature_bias_0/Adam/read:0"
        value: "\n\032fm/feature_bias_0/Adam_1:0\022\037fm/feature_bias_0/Adam_1/Assign\032\037fm/feature_bias_0/Adam_1/read:0"
        value: "\n\032deep/weights_layer0/Adam:0\022\037deep/weights_layer0/Adam/Assign\032\037deep/weights_layer0/Adam/read:0"
        value: "\n\034deep/weights_layer0/Adam_1:0\022!deep/weights_layer0/Adam_1/Assign\032!deep/weights_layer0/Adam_1/read:0"
        value: "\n\031deep/weights_bias0/Adam:0\022\036deep/weights_bias0/Adam/Assign\032\036deep/weights_bias0/Adam/read:0"
        value: "\n\033deep/weights_bias0/Adam_1:0\022 deep/weights_bias0/Adam_1/Assign\032 deep/weights_bias0/Adam_1/read:0"
        value: "\n\032deep/weights_layer1/Adam:0\022\037deep/weights_layer1/Adam/Assign\032\037deep/weights_layer1/Adam/read:0"
        value: "\n\034deep/weights_layer1/Adam_1:0\022!deep/weights_layer1/Adam_1/Assign\032!deep/weights_layer1/Adam_1/read:0"
        value: "\n\031deep/weights_bias1/Adam:0\022\036deep/weights_bias1/Adam/Assign\032\036deep/weights_bias1/Adam/read:0"
        value: "\n\033deep/weights_bias1/Adam_1:0\022 deep/weights_bias1/Adam_1/Assign\032 deep/weights_bias1/Adam_1/read:0"
        value: "\n deepfm/concat_projection0/Adam:0\022%deepfm/concat_projection0/Adam/Assign\032%deepfm/concat_projection0/Adam/read:0"
        value: "\n\"deepfm/concat_projection0/Adam_1:0\022\'deepfm/concat_projection0/Adam_1/Assign\032\'deepfm/concat_projection0/Adam_1/read:0"
        value: "\n\032deepfm/concat_bias0/Adam:0\022\037deepfm/concat_bias0/Adam/Assign\032\037deepfm/concat_bias0/Adam/read:0"
        value: "\n\034deepfm/concat_bias0/Adam_1:0\022!deepfm/concat_bias0/Adam_1/Assign\032!deepfm/concat_bias0/Adam_1/read:0"
      }
    }
  }
  signature_def {
    key: "serving_default"
    value {
      inputs {
        key: "inputs"
        value {
          name: "input:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
      outputs {
        key: "results"
        value {
          name: "score:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}
